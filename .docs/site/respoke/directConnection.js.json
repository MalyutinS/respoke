[
    {
        "tags": [],
        "description": {
            "full": "<p>Copyright 2014, Digium, Inc.\nAll rights reserved.</p>\n<p>This source code is licensed under The MIT License found in the\nLICENSE file in the root directory of this source tree.</p>\n<p>For all details and documentation:  <a href=\"https://www.respoke.io\">https://www.respoke.io</a></p>\n",
            "summary": "<p>Copyright 2014, Digium, Inc.\nAll rights reserved.</p>\n",
            "body": "<p>This source code is licensed under The MIT License found in the\nLICENSE file in the root directory of this source tree.</p>\n<p>For all details and documentation:  <a href=\"https://www.respoke.io\">https://www.respoke.io</a></p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "var log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');",
        "ctx": {
            "type": "declaration",
            "name": "log",
            "value": "require('loglevel')",
            "string": "log",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "class",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "constructor",
                "string": ""
            },
            {
                "type": "augments",
                "otherClass": "respoke.EventEmitter"
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "params",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "params.instanceId",
                "description": "- client id"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Call"
                ],
                "name": "params.call",
                "description": "- The call that is handling state for this direct connection."
            },
            {
                "type": "param",
                "types": [
                    "boolean"
                ],
                "name": "[params.forceTurn]",
                "description": "- If true, force the data to flow through relay servers instead of allowing\nit to flow peer-to-peer. The relay acts like a blind proxy."
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "params.connectionId",
                "description": "- The connection ID of the remoteEndpoint."
            },
            {
                "type": "param",
                "types": [
                    "function"
                ],
                "name": "params.signalOffer",
                "description": "- Signaling action from SignalingChannel."
            },
            {
                "type": "param",
                "types": [
                    "function"
                ],
                "name": "params.signalConnected",
                "description": "- Signaling action from SignalingChannel."
            },
            {
                "type": "param",
                "types": [
                    "function"
                ],
                "name": "params.signalAnswer",
                "description": "- Signaling action from SignalingChannel."
            },
            {
                "type": "param",
                "types": [
                    "function"
                ],
                "name": "params.signalHangup",
                "description": "- Signaling action from SignalingChannel."
            },
            {
                "type": "param",
                "types": [
                    "function"
                ],
                "name": "params.signalReport",
                "description": "- Signaling action from SignalingChannel."
            },
            {
                "type": "param",
                "types": [
                    "function"
                ],
                "name": "params.signalCandidate",
                "description": "- Signaling action from SignalingChannel."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onStart"
                ],
                "name": "[params.onStart]",
                "description": "- Callback for when setup of the direct connection\nbegins. The direct connection will not be open yet."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onError"
                ],
                "name": "[params.onError]",
                "description": "- Callback for errors that happen during\ndirect connection setup or media renegotiation."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onClose"
                ],
                "name": "[params.onClose]",
                "description": "- Callback for closing the direct connection."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onOpen"
                ],
                "name": "[params.onOpen]",
                "description": "- Callback for opening the direct connection."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onAccept"
                ],
                "name": "[params.onAccept]",
                "description": "- Callback for when the user accepts the request\nfor a direct connection and setup is about to begin."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onMessage"
                ],
                "name": "[params.onMessage]",
                "description": "- Callback for incoming messages. Not usually\nnecessary to listen to this event if you are already listening to respoke.Endpoint#message."
            },
            {
                "type": "returns",
                "string": "{respoke.DirectConnection}"
            }
        ],
        "description": {
            "full": "<p>A direct connection via RTCDataChannel, including state and path negotation.</p>\n",
            "summary": "<p>A direct connection via RTCDataChannel, including state and path negotation.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "module.exports = function (params) {\n    \"use strict\";\n    params = params || {};",
        "ctx": {
            "type": "method",
            "receiver": "module",
            "name": "exports",
            "string": "module.exports()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "instanceId"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.Client</p>\n",
            "summary": "<p>@memberof! respoke.Client</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;",
        "ctx": {
            "type": "declaration",
            "name": "instanceId",
            "value": "params.instanceId",
            "string": "instanceId",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "name",
                "string": "className"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>A name to identify this class</p>\n",
            "summary": "<p>A name to identify this class</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.className = 'respoke.DirectConnection';",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "className",
            "value": "'respoke.DirectConnection'",
            "string": "that.className",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "name",
                "string": "id"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>The unique identifier of the direct connection.</p>\n",
            "summary": "<p>The unique identifier of the direct connection.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.id = respoke.makeGUID();",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "id",
            "value": "respoke.makeGUID()",
            "string": "that.id",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "call"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Call"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.DirectConnection</p>\n",
            "summary": "<p>@memberof! respoke.DirectConnection</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "if (!that.call.caller) {\n        that.call.caller = false;\n    }",
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "dataChannel"
            },
            {
                "type": "type",
                "types": [
                    "RTCDataChannel"
                ]
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.DirectConnection</p>\n",
            "summary": "<p>@memberof! respoke.DirectConnection</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var dataChannel = null;",
        "ctx": {
            "type": "declaration",
            "name": "dataChannel",
            "value": "null",
            "string": "dataChannel",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "client"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Client"
                ]
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.DirectConnection</p>\n",
            "summary": "<p>@memberof! respoke.DirectConnection</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var client = respoke.getClient(instanceId);",
        "ctx": {
            "type": "declaration",
            "name": "client",
            "value": "respoke.getClient(instanceId)",
            "string": "client",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "pc"
            },
            {
                "type": "type",
                "types": [
                    "RTCPeerConnection"
                ]
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.DirectConnection</p>\n",
            "summary": "<p>@memberof! respoke.DirectConnection</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var pc = params.pc;\n    delete params.pc;",
        "ctx": {
            "type": "declaration",
            "name": "pc",
            "value": "params.pc",
            "string": "pc",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.listenDataChannel"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Event"
                ],
                "name": "evt",
                "description": ""
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\nonly fires for the callee.</p>\n",
            "summary": "<p>When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\nonly fires for the callee.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "function listenDataChannel(evt) {\n        dataChannel = evt.channel;\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        if (dataChannel.readyState === 'open') {\n            dataChannel.onopen = null;\n            onDataChannelOpen();\n        } else {\n            dataChannel.onopen = onDataChannelOpen;\n        }\n    }",
        "ctx": {
            "type": "function",
            "name": "listenDataChannel",
            "string": "listenDataChannel()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.saveParameters"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "params",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onClose"
                ],
                "name": "[params.onClose]",
                "description": "- Callback for when the direct connection\nis closed."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onOpen"
                ],
                "name": "[params.onOpen]",
                "description": "- Callback for when the direct connection\nis open."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onMessage"
                ],
                "name": "[params.onMessage]",
                "description": "- Callback for incoming messages."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onError"
                ],
                "name": "[params.onError]",
                "description": "- Callback for errors setting up the direct\nconnection."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onStart"
                ],
                "name": "[params.onStart]",
                "description": "- Callback for when the direct connection\nis being set up. The direct connection will not be open yet."
            },
            {
                "type": "param",
                "types": [
                    "boolean"
                ],
                "name": "[params.forceTurn]",
                "description": "- If true, force the data to flow through relay servers instead of allowing\nit to flow peer-to-peer. The relay acts like a blind proxy."
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>Register any event listeners passed in as callbacks</p>\n",
            "summary": "<p>Register any event listeners passed in as callbacks</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "function saveParameters(params) {",
        "ctx": {
            "type": "function",
            "name": "saveParameters",
            "string": "saveParameters()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.DirectConnection#open"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>The direct connection is open.</p>\n",
            "summary": "<p>The direct connection is open.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.listen('open', params.onOpen);",
        "ctx": {
            "type": "event",
            "name": "respoke.DirectConnection#open",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.DirectConnection#close"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>The direct connection is closed.</p>\n",
            "summary": "<p>The direct connection is closed.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.listen('close', params.onClose);",
        "ctx": {
            "type": "event",
            "name": "respoke.DirectConnection#close",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.DirectConnection#message"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "respoke.TextMessage"
                ],
                "name": "message",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "respoke.Endpoint"
                ],
                "name": "endpoint",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Incoming message on this direct connection.</p>\n",
            "summary": "<p>Incoming message on this direct connection.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.listen('message', params.onMessage);\n        // documented elsewhere\n        that.listen('start', params.onStart);",
        "ctx": {
            "type": "event",
            "name": "respoke.DirectConnection#message",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.DirectConnection#error"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "reason",
                "description": "- A human-readable description of the error."
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>An error occurred while setting up the direct connection.</p>\n",
            "summary": "<p>An error occurred while setting up the direct connection.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.listen('error', params.onError);\n        pc.listen('direct-connection', listenDataChannel, true);\n        pc.listen('stats', function fireStats(evt) {",
        "ctx": {
            "type": "event",
            "name": "respoke.DirectConnection#error",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.DirectConnection#stats"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "object"
                ],
                "name": "stats",
                "description": "- an object with stats in it."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            }
        ],
        "description": {
            "full": "<p>This event is fired every time statistical information about the direct connection\nbecomes available.</p>\n",
            "summary": "<p>This event is fired every time statistical information about the direct connection\nbecomes available.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('stats', {stats: evt.stats});\n        }, true);\n\n    }\n    saveParameters(params);\n\n    delete that.onOpen;\n    delete that.onClose;\n    delete that.onMessage;",
        "ctx": {
            "type": "event",
            "name": "respoke.DirectConnection#stats",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.getStats"
            },
            {
                "type": "returns",
                "string": "{Promise<object>|undefined}"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "params",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "number"
                ],
                "name": "[params.interval=5000]",
                "description": "- How often in milliseconds to fetch statistics."
            },
            {
                "type": "param",
                "types": [
                    "respoke.MediaStatsParser.statsHandler"
                ],
                "name": "[params.onStats]",
                "description": "- An optional callback to receive the\nstats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\ncontain stats but the developer will not receive them on the client-side."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.statsSuccessHandler"
                ],
                "name": "[params.onSuccess]",
                "description": "- Success handler for this\ninvocation of this method only."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.errorHandler"
                ],
                "name": "[params.onError]",
                "description": "- Error handler for this invocation of\nthis method only."
            }
        ],
        "description": {
            "full": "<p>Return media stats. Since we have to wait for both the answer and offer to be available before starting\nstatistics, we&#39;ll return a promise for the stats object.</p>\n<pre><code>directConnection.getStats({\n    onStats: function (evt) {\n        console.log(&#39;Stats&#39;, evt.stats);\n    }\n}).done(function () {\n    console.log(&#39;Stats started.&#39;);\n}, function (err) {\n    console.log(&#39;Direct connection is already closed.&#39;);\n});\n</code></pre><p><strong>Using callbacks</strong> by passing <code>params.onSuccess</code> or <code>params.onError</code> will disable promises.</p>\n",
            "summary": "<p>Return media stats. Since we have to wait for both the answer and offer to be available before starting\nstatistics, we&#39;ll return a promise for the stats object.</p>\n",
            "body": "<pre><code>directConnection.getStats({\n    onStats: function (evt) {\n        console.log(&#39;Stats&#39;, evt.stats);\n    }\n}).done(function () {\n    console.log(&#39;Stats started.&#39;);\n}, function (err) {\n    console.log(&#39;Direct connection is already closed.&#39;);\n});\n</code></pre><p><strong>Using callbacks</strong> by passing <code>params.onSuccess</code> or <code>params.onError</code> will disable promises.</p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.getStats = function (params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            delete params.onStats;\n            return pc.getStats(params);\n        }\n        return null;\n    };\n\n    if (!respoke.MediaStats) {\n        delete that.getStats;\n    }",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "getStats",
            "string": "that.getStats()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.onDataChannelError"
            }
        ],
        "description": {
            "full": "<p>Detect datachannel errors for internal state.</p>\n",
            "summary": "<p>Detect datachannel errors for internal state.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "function onDataChannelError(error) {",
        "ctx": {
            "type": "function",
            "name": "onDataChannelError",
            "string": "onDataChannelError()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "object"
                ],
                "name": "error",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "directConnection",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.DirectConnection#error</p>\n",
            "summary": "<p>@event respoke.DirectConnection#error</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('error', {\n            error: error\n        });\n        that.close();\n    }",
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.onDataChannelMessage"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "param",
                "types": [
                    "MessageEvent"
                ],
                "name": "",
                "description": ""
            },
            {
                "type": "fires",
                "string": "respoke.DirectConnection#message"
            }
        ],
        "description": {
            "full": "<p>Receive and route messages to the Endpoint.</p>\n",
            "summary": "<p>Receive and route messages to the Endpoint.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [
            "respoke.DirectConnection#message"
        ],
        "ignore": false,
        "code": "function onDataChannelMessage(evt) {\n        var message;\n        try {\n            message = JSON.parse(evt.data);\n        } catch (e) {\n            message = evt.data;\n        }",
        "ctx": {
            "type": "function",
            "name": "onDataChannelMessage",
            "string": "onDataChannelMessage()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "object"
                ],
                "name": "message",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "directConnection",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.Call"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.Endpoint#message</p>\n",
            "summary": "<p>@event respoke.Endpoint#message</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.call.remoteEndpoint.fire('message', {\n            message: message,\n            directConnection: that\n        });",
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "object"
                ],
                "name": "message",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "respoke.Endpoint"
                ],
                "name": "endpoint",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.DirectConnection#message</p>\n",
            "summary": "<p>@event respoke.DirectConnection#message</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('message', {\n            message: message,\n            endpoint: that.call.remoteEndpoint\n        });\n    }",
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.onDataChannelOpen"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "param",
                "types": [
                    "MessageEvent"
                ],
                "name": "",
                "description": ""
            },
            {
                "type": "fires",
                "string": "respoke.DirectConnection#open"
            }
        ],
        "description": {
            "full": "<p>Detect when the channel is open.</p>\n",
            "summary": "<p>Detect when the channel is open.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [
            "respoke.DirectConnection#open"
        ],
        "ignore": false,
        "code": "function onDataChannelOpen(evt) {\n        //dataChannel = evt.target || evt.channel;",
        "ctx": {
            "type": "function",
            "name": "onDataChannelOpen",
            "string": "onDataChannelOpen()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.DirectConnection#open</p>\n",
            "summary": "<p>@event respoke.DirectConnection#open</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('open');\n    }",
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.onDataChannelClose"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "param",
                "types": [
                    "MessageEvent"
                ],
                "name": "",
                "description": ""
            },
            {
                "type": "fires",
                "string": "respoke.DirectConnection#close"
            }
        ],
        "description": {
            "full": "<p>Detect when the channel is closed.</p>\n",
            "summary": "<p>Detect when the channel is closed.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [
            "respoke.DirectConnection#close"
        ],
        "ignore": false,
        "code": "function onDataChannelClose(evt) {\n        //dataChannel = evt.target || evt.channel;",
        "ctx": {
            "type": "function",
            "name": "onDataChannelClose",
            "string": "onDataChannelClose()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.DirectConnection#close</p>\n",
            "summary": "<p>@event respoke.DirectConnection#close</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('close');\n    }",
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.createDataChannel"
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>Create the datachannel. For the caller, set up all the handlers we&#39;ll need to keep track of the\ndatachannel&#39;s state and to receive messages.</p>\n",
            "summary": "<p>Create the datachannel. For the caller, set up all the handlers we&#39;ll need to keep track of the\ndatachannel&#39;s state and to receive messages.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "function createDataChannel() {\n        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n        dataChannel.binaryType = 'arraybuffer';\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        dataChannel.onopen = onDataChannelOpen;",
        "ctx": {
            "type": "function",
            "name": "createDataChannel",
            "string": "createDataChannel()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.DirectConnection#start"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>The direct connection setup has begun. This does NOT mean it&#39;s ready to send messages yet. Listen to\nDirectConnection#open for that notification.</p>\n",
            "summary": "<p>The direct connection setup has begun. This does NOT mean it&#39;s ready to send messages yet. Listen to\nDirectConnection#open for that notification.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('start');\n    }",
        "ctx": {
            "type": "event",
            "name": "respoke.DirectConnection#start",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.accept"
            },
            {
                "type": "fires",
                "string": "respoke.DirectConnection#accept"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "params",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onOpen"
                ],
                "name": "[params.onOpen]",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onClose"
                ],
                "name": "[params.onClose]",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.onMessage"
                ],
                "name": "[params.onMessage]",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Start the process of obtaining media. saveParameters will only be meaningful for the callee,\nsince the library calls this method for the caller. Developers will use this method to pass in\ncallbacks for the callee.</p>\n<pre><code>directConnection.accept({\n    onOpen: function (evt) {}\n});\n</code></pre>",
            "summary": "<p>Start the process of obtaining media. saveParameters will only be meaningful for the callee,\nsince the library calls this method for the caller. Developers will use this method to pass in\ncallbacks for the callee.</p>\n",
            "body": "<pre><code>directConnection.accept({\n    onOpen: function (evt) {}\n});\n</code></pre>"
        },
        "isPrivate": false,
        "fires": [
            "respoke.DirectConnection#accept"
        ],
        "ignore": false,
        "code": "that.accept = function (params) {\n        params = params || {};\n        log.debug('DirectConnection.accept');\n        saveParameters(params);\n\n        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\n        if (pc.state.caller === true) {\n            createDataChannel();\n        }\n        that.call.answer();",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "accept",
            "string": "that.accept()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.DirectConnection#accept</p>\n",
            "summary": "<p>@event respoke.DirectConnection#accept</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('accept');\n    };",
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.close"
            },
            {
                "type": "fires",
                "string": "respoke.DirectConnection#close"
            }
        ],
        "description": {
            "full": "<p>Tear down the connection.</p>\n",
            "summary": "<p>Tear down the connection.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.DirectConnection#close"
        ],
        "ignore": false,
        "code": "that.close = function (params) {\n        params = params || {};\n        log.debug(\"DirectConnection.close\");\n        if (dataChannel) {\n            dataChannel.close();\n        }",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "close",
            "string": "that.close()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.DirectConnection#close</p>\n",
            "summary": "<p>@event respoke.DirectConnection#close</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('close');\n\n        that.ignore();\n\n        if (params.skipRemove !== true) {\n            that.call.removeDirectConnection();\n        }\n\n        dataChannel = null;\n        that.call.remoteEndpoint.directConnection = null;\n        that.call = null;\n        pc = null;\n    };",
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.sendMessage"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "params",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "[params.message]",
                "description": "- The message to send."
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "[params.object]",
                "description": "- An object to send."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.sendHandler"
                ],
                "name": "[params.onSuccess]",
                "description": "- Success handler for this invocation\nof this method only."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection.errorHandler"
                ],
                "name": "[params.onError]",
                "description": "- Error handler for this invocation\nof this method only."
            },
            {
                "type": "returns",
                "string": "{Promise|undefined}"
            }
        ],
        "description": {
            "full": "<p>Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\nattribute may be given: either a string &#39;message&#39; or an object &#39;object&#39;.\n<strong>Using callbacks</strong> by passing <code>params.onSuccess</code> or <code>params.onError</code> will disable promises.</p>\n<pre><code>directConnection.sendMessage({\n    message: &quot;And they say HTTP is stateless!&quot;\n});\n</code></pre>",
            "summary": "<p>Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\nattribute may be given: either a string &#39;message&#39; or an object &#39;object&#39;.\n<strong>Using callbacks</strong> by passing <code>params.onSuccess</code> or <code>params.onError</code> will disable promises.</p>\n",
            "body": "<pre><code>directConnection.sendMessage({\n    message: &quot;And they say HTTP is stateless!&quot;\n});\n</code></pre>"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.sendMessage = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        if (that.isActive()) {\n            dataChannel.send(JSON.stringify(params.object || {\n                message: params.message\n            }));\n            deferred.resolve();\n        } else {\n            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n        }\n        return retVal;\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "sendMessage",
            "string": "that.sendMessage()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.reject"
            },
            {
                "type": "param",
                "types": [
                    "boolean"
                ],
                "name": "signal",
                "description": "- Optional flag to indicate whether to send or suppress sending\na hangup signal to the remote side."
            }
        ],
        "description": {
            "full": "<p>Expose close as reject for approve/reject workflow.</p>\n<pre><code>client.listen(&#39;direct-connection, function (evt) {\n    if (iDontLikeThisPerson()) {\n        evt.directConnection.reject();\n    }\n});\n</code></pre>",
            "summary": "<p>Expose close as reject for approve/reject workflow.</p>\n",
            "body": "<pre><code>client.listen(&#39;direct-connection, function (evt) {\n    if (iDontLikeThisPerson()) {\n        evt.directConnection.reject();\n    }\n});\n</code></pre>"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.reject = that.close;",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "reject",
            "value": "that.close",
            "string": "that.reject",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.DirectConnection"
            },
            {
                "type": "method",
                "string": "respoke.DirectConnection.isActive"
            },
            {
                "type": "returns",
                "string": "{boolean}"
            }
        ],
        "description": {
            "full": "<p>Indicate whether a datachannel is being setup or is in progress.</p>\n",
            "summary": "<p>Indicate whether a datachannel is being setup or is in progress.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.isActive = function () {\n        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n        return (dataChannel && dataChannel.readyState === 'open');\n    };\n\n    return that;\n}; // End respoke.DirectConnection",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "isActive",
            "string": "that.isActive()",
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.onClose"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Event"
                ],
                "name": "evt",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "evt.name",
                "description": "- the event name."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "evt.target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\nfires.</p>\n",
            "summary": "<p>Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\nfires.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.onStart"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Event"
                ],
                "name": "evt",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "evt.name",
                "description": "- the event name."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "evt.target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\ncallback is called every time respoke.DirectConnection#start fires.</p>\n",
            "summary": "<p>Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\ncallback is called every time respoke.DirectConnection#start fires.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.onOpen"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Event"
                ],
                "name": "evt",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "evt.name",
                "description": "- the event name."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "evt.target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\nfires.</p>\n",
            "summary": "<p>Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\nfires.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.onMessage"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Event"
                ],
                "name": "evt",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "evt.message",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "respoke.Endpoint"
                ],
                "name": "evt.endpoint",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "evt.name",
                "description": "- the event name."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "evt.target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Called when a message is received over the direct connection.  This callback is called every time\nrespoke.DirectConnection#message fires.</p>\n",
            "summary": "<p>Called when a message is received over the direct connection.  This callback is called every time\nrespoke.DirectConnection#message fires.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.errorHandler"
            },
            {
                "type": "param",
                "types": [
                    "Error"
                ],
                "name": "err",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Handle an error that resulted from a specific method call. This handler will not fire more than once.</p>\n",
            "summary": "<p>Handle an error that resulted from a specific method call. This handler will not fire more than once.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.onError"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Event"
                ],
                "name": "evt",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "boolean"
                ],
                "name": "evt.reason",
                "description": "- A human-readable description of the error."
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "evt.name",
                "description": "- the event name."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "evt.target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>When a call is in setup or media renegotiation happens. This callback will be called every time\nrespoke.DirectConnection#error.</p>\n",
            "summary": "<p>When a call is in setup or media renegotiation happens. This callback will be called every time\nrespoke.DirectConnection#error.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.onAccept"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Event"
                ],
                "name": "evt",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "evt.target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Called when the callee accepts the direct connection. This callback is called every time\nrespoke.DirectConnection#accept is fired.</p>\n",
            "summary": "<p>Called when the callee accepts the direct connection. This callback is called every time\nrespoke.DirectConnection#accept is fired.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.statsSuccessHandler"
            },
            {
                "type": "param",
                "types": [
                    "respoke.Event"
                ],
                "name": "evt",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "evt.stats",
                "description": "- an object with stats in it."
            },
            {
                "type": "param",
                "types": [
                    "respoke.DirectConnection"
                ],
                "name": "evt.target",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "evt.name",
                "description": "- the event name."
            }
        ],
        "description": {
            "full": "<p>Handle the successful kick-off of stats on a call.</p>\n",
            "summary": "<p>Handle the successful kick-off of stats on a call.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "callback",
                "string": "respoke.DirectConnection.sendHandler"
            }
        ],
        "description": {
            "full": "<p>Handle sending successfully.</p>\n",
            "summary": "<p>Handle sending successfully.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "ctx": {
            "file": {
                "input": "respoke/directConnection.js",
                "output": ".docs/site/respoke/directConnection.js.json"
            }
        }
    }
]