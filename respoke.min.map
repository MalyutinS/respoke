{"version":3,"sources":["webpack/universalModuleDefinition","respoke.min.js","webpack/bootstrap d2f00b971688d43ad826","./index.js","./respoke/respoke.js","./respoke/event.js","./respoke/client.js","./respoke/presentable.js","./respoke/connection.js","./respoke/endpoint.js","./respoke/textMessage.js","./respoke/signalingMessage.js","./respoke/group.js","./respoke/signalingChannel.js","./respoke/directConnection.js","./respoke/peerConnection.js","./respoke/callState.js","./respoke/call.js","./respoke/localMedia.js","./respoke/remoteMedia.js","./respoke/deps/adapter.js","./~/q/q.js","./~/loglevel/lib/loglevel.js","./~/socket.io-client/dist/socket.io.js","./~/statechart/lib/statechart.js","(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","log","setLevel","Q","longStackSupport","stackJumpLimit","longStackJumpLimit","stopUnhandledRejectionTracking","respoke","buildNumber","streams","instances","version","EventEmitter","Client","Presentable","Connection","Endpoint","TextMessage","SignalingMessage","Group","SignalingChannel","DirectConnection","PeerConnection","CallState","Call","LocalMedia","RemoteMedia","window","skipBugsnag","airbrake","document","createElement","first","getElementsByTagName","parentNode","insertBefore","src","setAttribute","onerror","message","file","line","match","Airbrake","push","error","fileName","lineNumber","connect","params","client","getClient","undefined","debug","Error","stack","createClient","instanceId","once","func","called","apply","arguments","makeGUID","r","chars","split","uuid","Array","rnd","i","Math","random","join","handlePromise","promise","onSuccess","onError","returnUndef","done","Class","that","className","Object","keys","forEach","name","hasUserMedia","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","Function","hasRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","hasWebsocket","WebSocket","webkitWebSocket","MozWebSocket","sdpHasAudio","sdp","indexOf","sdpHasVideo","sdpHasDataChannel","constraintsHasAudio","constraints","audio","constraintsHasVideo","video","listenerBuilder","listener","evt","eventType","e","eventList","isInternal","listen","map","a","toString","warn","ignore","length","splice","fire","count","target","setTimeout","hasListeners","every","actuallyConnect","deferred","defer","clientSettings","token","appId","endpointId","developmentMode","signalingChannel","open","then","authenticate","presence","setPresence","onCall","onDirectConnection","onJoin","onLeave","onMessage","onConnect","onDisconnect","onReconnect","info","resolve","err","reject","addCall","calls","removeCall","checkEndpointForRemoval","all","groups","group","getMembers","connectionsByGroup","absent","connectionList","conn","endpoints","ept","index","connectTries","superClass","location","hostname","port","baseURL","reconnect","resolveEndpointPresence","enableCallDebugReport","callSettings","optional","mandatory","servers","iceServers","retVal","key","disconnect","verifyConnected","leaveGroups","leave","fin","close","sendPresence","getCall","endpoint","one","remoteEndpoint","create","fromType","startPhoneCall","number","caller","toType","getEndpoint","startCall","setOnline","sendMessage","recipient","combinedCallSettings","JSON","parse","stringify","signalOffer","signalParams","signalType","sendSDP","signalAnswer","hangup","signal","signalConnected","connectionId","sendConnected","signalModify","sendModify","signalCandidate","sendCandidate","signalHangup","sendHangup","signalReport","report","sendReport","isConnected","joinGroup","getGroup","addGroup","addMember","connection","getConnection","newGroup","removeMember","getGroups","grp","skipCreate","registerPresence","endpointList","onPresence","endpointsToSearch","connections","getEndpoints","resolvePresence","getPresence","startAudioCall","startVideoCall","startDirectConnection","clone","source","directConnection","sessionId","combinedConnectionSettings","needDirectConnection","offerOptions","OfferToReceiveAudio","presenceList","idList","options","sort","b","indexA","indexB","rawMessage","header","from","fromConnection","timestamp","body","channel","to","toConnection","requestConnectionReply","fromEndpoint","required","attr","allowed","validateConnection","validateMembership","isJoined","leaveGroup","skipEvent","publish","getGroupMembers","list","now","io","performance","bind","Date","getTime","PendingRequests","contents","counter","add","obj","remove","reset","fn","isConnecting","socket","connecting","doOpen","path","httpMethod","parameters","tokenId","response","code","appToken","result","firstUpper","str","toUpperCase","slice","type","reconnectTimeout","maxReconnectTimeout","wsCall","pendingRequestsKey","start","logRequest","toLowerCase","objectId","replace","method","pendingRequests","emit","url","data","headers","App-Token","durationMillis","paramString","uri","makeParamString","xhr","setRequestHeader","send","onreadystatechange","readyState","status","strings","value","callDebugReportEnabled","presenceRegistered","XMLHttpRequest","routingMethods","handlerQueue","connected","fcall","getToken","newToken","callParams","ttl","removeAllListeners","show","sendACK","sendSignal","signalId","ackedSignalType","debugData","action","routeSignal","doOffer","doConnected","doModify","doAnswer","doIceCandidates","doBye","doUnknown","addHandler","on","handler","onPubSub","groupMessage","generateConnectHandler","category","res","pieces","protocol","host","connectParams","connect timeout","force new connection","sync disconnect on unload","secure","query","knownSignals","pendingRequest","getTurnCredentials","creds","uris","cred","createIceServer","username","password","listenDataChannel","dataChannel","onDataChannelError","onmessage","onDataChannelMessage","onopen","onDataChannelOpen","saveParameters","onOpen","onClose","onStart","pc","stats","createDataChannel","binaryType","getStats","onStats","MediaStats","accept","state","answer","skipRemove","removeDirectConnection","isActive","object","iceCandidates","candidate","signalCandidateOrig","candidatesSent","initOffer","createOffer","saveOfferAndSend","MediaStatsParser","peerConnection","interval","stopStats","onIceCandidate","oCan","forceTurn","sentSDP","processedRemoteSDP","candidateSendingQueue","onNegotiationNeeded","processQueues","candidateReceivingQueue","addRemoteCandidate","processingQueue","oSession","sdpsSent","outgoingMedia","setSDP","incomingMedia","setLocalDescription","sessionDescription","saveAnswerAndSend","callerconnection","listenOffer","listenAnswer","sdpsReceived","lastSDPString","hasAudio","hasVideo","hasDataChannel","calleeconnection","setRemoteDescription","RTCSessionDescription","dispatch","newErr","callStoppedReason","listenConnected","listenModify","defModify","isPending","isState","toSendHangup","previewLocalMedia","pcOptions","DtlsSrtpKeyAgreement","RtpDataChannels","callStarted","callStopped","callerendpoint","calleeendpoint","candidatesReceived","userAgent","os","platform","processOffer","oOffer","createAnswer","init","disableTurn","onicecandidate","onnegotiationneeded","onaddstream","stream","onremovestream","ondatachannel","getRemoteStreams","prototype","getLocalStreams","addStream","sentSignal","iceConnectionState","startModify","hasOwnProperty","addIceCandidate","RTCIceCandidate","Statechart","assert","condition","rejectModify","modifyTimer","clear","clearReceiveAnswerTimer","receiveAnswerTimer","needToObtainMedia","receiveOnly","needToApproveDirectConnection","automaticDirectConnectionCaller","createTimer","time","timer","clearTimeout","allTimers","fsm","answerTimer","connectionTimer","oldRole","answerTimeout","receiveAnswerTimeout","connectionTimeout","modifyTimeout","nontransitionEvents","hasLocalMediaApproval","hasLocalMedia","receivedBye","isAnswered","receivedSDP","sendOnly","rejectEvent","guard","hasMedia","hangupReason","reason","hangupEvent","signalBye","stateParams","initialState","receiveLocalMedia","states","idle","exit","initiate","negotiatingContainer","modify","preparing","entry","isModifying","receiveOffer","approve","gettingMedia","approvingDeviceAccess","approvingContent","offeringContainer","sentOffer","offering","receiveRemoteMedia","receiveAnswer","connectingContainer","modifyingContainer","modifying","connectedContainer","receive","terminatedContainer","terminated","run","debugOff","args","getState","currentState","oldState","newState","modifyingStates","defMedia","actuallyAddDirectConnection","onLocalMedia","onHangup","onAllow","onAnswer","onApprove","onMute","onRequestingMedia","element","videoLocalElement","setConstraints","videoRemoteElement","onRemoteStreamRemoved","onRemoteStreamAdded","setStream","doAddVideo","skipModify","onModifyAccept","dc","onModifyReject","listenHangup","muted","videoIsMuted","audioIsMuted","getLocalElement","getRemoteElement","addVideo","isFulfilled","addAudio","getDirectConnection","addDirectConnection","closeDirectConnection","doHangup","stop","toggleVideo","unmuteVideo","muteVideo","toggleAudio","unmuteAudio","muteAudio","local","remote","onReceiveUserMedia","theStream","allowTimer","numPc","attachMediaStream","autoplay","requestMedia","onUserMediaError","getVideoTracks","track","enabled","getAudioTracks","play","maybeFixConfiguration","pcConfig","urls","reattachMediaStream","webrtcDetectedBrowser","webrtcDetectedVersion","console","parseInt","pcConstraints","mozRTCSessionDescription","mozRTCIceCandidate","iceServer","urlParts","turnUrlParts","credential","createIceServers","mozSrcObject","srcObject","URL","createObjectURL","definition","bootstrap","uncurryThis","f","isObject","isStopIteration","exception","object_toString","QReturnValue","makeStackTraceLong","hasStacks","STACK_JUMP_SEPARATOR","stacks","unshift","concatedStacks","filterStackString","stackString","lines","desiredLines","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","qFileName","qStartingLine","qEndingLine","captureLine","firstLine","deprecate","callback","alternative","isPromise","isPromiseAlike","coerce","fulfill","become","newPromise","resolvedPromise","array_reduce","messages","nextTick","promiseDispatch","progressListeners","object_create","Promise","op","operands","array_slice","valueOf","nearerValue","nearer","inspect","substring","notify","progress","progressListener","resolver","TypeError","race","answerPs","len","descriptor","fallback","inspected","when","fulfilled","rejected","progressed","isRejected","resetUnhandledRejections","unhandledReasons","unhandledRejections","trackUnhandledRejections","trackRejection","untrackRejection","at","array_indexOf","rejection","get","set","rhs","delete","post","thisp","object_keys","master","isDef","spread","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","_return","promised","self","promises","countDown","snapshot","allResolved","array_map","noop","allSettled","nodeify","nodeback","flush","head","next","task","domain","enter","isNodeJS","flushing","tail","requestTick","process","setImmediate","MessageChannel","port1","requestPortTick","port2","postMessage","reduce","basis","collect","Type","object_hasOwnProperty","ReturnValue","makeNodeResolver","passByCopy","x","y","makePromise","_fulfilled","_rejected","newException","_progressed","newValue","threw","thenResolve","thenReject","getUnhandledReasons","array","del","mapply","mcall","invoke","fapply","fbind","concat","regardless","fail","onUnhandledError","timeout","ms","timeoutId","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","undefinedType","realMethod","methodName","boundToConsole","clearMethods","ii","logMethods","cookiesAvailable","cookie","setLevelInCookie","levelNum","levelName","levels","loadLevelFromCookie","cookieLevel","cookieMatch","cookieRegex","WARN","TRACE","DEBUG","INFO","ERROR","SILENT","level","enableAll","disableAll","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","transports","j","sockets","details","uuri","util","parseUri","uniqueUri","merge","Socket","of","re","parts","base","addition","chunkQuery","components","part","qs","kv","l","pageLoaded","load","event","capture","attachEvent","addEventListener","request","xdomain","XDomainRequest","ua","hasCORS","webkit","importScripts","additional","deep","lastseen","prop","seen","depth","mixin","ctor","ctor2","inherit","isArray","intersect","arr","arr2","ret","longest","shortest","o","toArray","enu","withCredentials","test","iDevice","$events","addListener","removeListener","pos","listeners","parent","nativeJSON","n","date","d","isFinite","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","quote","string","escapable","lastIndex","meta","charCodeAt","holder","k","v","partial","mind","gap","rep","String","indent","cx","\b","\t","\n","\f","\r","\"","\\","replacer","space","text","reviver","walk","eval","SyntaxError","parser","packets","reasons","advice","encodePacket","packet","ack","adv","ev","ackId","encoded","encodePayload","decoded","regexp","decodePacket","opts","decodePayload","charAt","substr","Transport","sessid","heartbeats","onData","clearCloseTimeout","reconnecting","setCloseTimeout","msgs","onPacket","setHeartbeatTimeout","onHeartbeat","isOpen","closeTimeout","clearTimeouts","reopenTimeout","prepareUrl","scheme","resource","ready","try multiple transports","reconnection delay","reconnection limit","Infinity","reopen delay","max reconnection attempts","auto connect","flash policy port","manualFlush","namespaces","buffer","doBuffer","isXDomain","disconnectSync","empty","SocketNamespace","nsp","$emit","handshake","complete","insertAt","script","removeChild","responseText","getTransport","override","transport","check","xdomainCheck","sessionid","sid","heartbeat","connectTimeoutTimer","remaining","heartbeatTimeout","origTransports","heartbeatTimeoutTimer","setBuffer","flushBuffer","payload","wasConnected","wasConnecting","reconnectionAttempts","reconnectionTimer","maybeReconnect","reconnectionDelay","redoTransports","tryMultiple","maxAttempts","limit","flags","json","Flag","ackPackets","acks","namespace","lastArg","WS","websocket","onclose","Flashsocket","flashsocket","__addTask","__tasks","WEB_SOCKET_SWF_LOCATION","loadFlashPolicyFile","__initialize","swfobject","getFlashPlayerVersion","major","WEB_SOCKET_DISABLE_AUTO_INITIALIZATION","J","Z","appendChild","C","aa","X","U","Y","K","s","O","D","onload","h","T","V","H","q","GetVariable","ab","M","pv","callee","ag","af","callbackFn","success","ae","F","swfVersion","wk","expressInstall","A","ai","width","getAttribute","height","styleclass","align","ah","ac","ad","P","w","ref","z","SetVariable","nodeName","win","mac","E","B","g","R","title","ie","flashvars","style","display","u","replaceChild","innerHTML","childNodes","nodeType","cloneNode","movie","outerHTML","N","getElementById","I","G","styleSheets","addRule","createTextNode","visibility","L","encodeURIComponent","S","W","t","parseFloat","plugins","description","mimeTypes","enabledPlugin","w3","detachEvent","top","documentElement","doScroll","registerObject","getObjectById","embedSWF","aj","al","am","ak","an","switchOffAutoHideShow","minor","release","hasFlashPlayerVersion","createSWF","showExpressInstall","removeSWF","createCSS","addDomLoadEvent","addLoadEvent","getQueryParamValue","search","hash","expressInstallCallback","protocols","proxyHost","proxyPort","__id","__nextId","__instances","CONNECTING","bufferedAmount","__events","__flash","CLOSED","CLOSING","removeEventListener","events","dispatchEvent","__handleEvent","flashEvent","jsEvent","__createSimpleEvent","decodeURIComponent","__createMessageEvent","createEvent","Event","initEvent","bubbles","cancelable","MessageEvent","opera","initMessageEvent","OPEN","loadManualPolicyFile","__swfLocation","container","position","__isFlashLite","left","hasPriority","swliveconnect","allowScriptAccess","__onFlashInitialized","setCallerUrl","href","setDebug","WEB_SOCKET_DEBUG","__onFlashEvent","receiveEvents","webSocketId","__log","__error","mimeType","filename","XHR","sendBuffer","stateChange","posting","sendXHR","req","contentType","usesXDomReq","socketProtocol","isXProtocol","HTMLFile","htmlfile","doc","write","parentWindow","iframeC","iframe","destroy","_","CollectGarbage","XHRPolling","retryCounter","abort","JSONPPolling","msg","indicator","initIframe","form","iframeId","area","submit","QState","QEvent","assertion","opt","construct","myState","mySource","Initial","newInitialState","handled","TOP","flatten","anEventOrNull","trigger","equals","superstate","stateOrName","_topState","statesTable","_flatten","selectState","stateName","anEvent","act","handleUnhandledEvent","aStateName","transition","aStateOrName","enterVia","pop","lca","entryLength","idx","QEventEmpty","QEventEntry","QEventExit","QEventInit","webpackPolyfill","paths","children"],"mappings":";CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAAH,GACA,gBAAAC,SACAA,QAAA,QAAAD,IAEAD,EAAA,QAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GEtDhCL,EAAAD,QAAAM,EAAA,IF6DM,SAASL,EAAQD,EAASM,GGlDhC,GAAAS,GAAAT,EAAA,GACAS,GAAAC,SAAA,OAEA,IAAAC,GAAAX,EAAA,GACAW,GAAAC,kBAAA,EACAD,EAAAE,eAAA,EACAF,EAAAG,mBAAA,GACAH,EAAAI,iCAEAf,EAAA,GA8FA,IAAAgB,GAAArB,EAAAD,SACAuB,YAAA,kBACAC,WACAC,aA+BA,IApBAH,EAAAI,QAAAJ,EAAAC,YAAA,GAEAD,EAAAK,aAAArB,EAAA,GACAgB,EAAAM,OAAAtB,EAAA,GACAgB,EAAAO,YAAAvB,EAAA,GACAgB,EAAAQ,WAAAxB,EAAA,GACAgB,EAAAS,SAAAzB,EAAA,GACAgB,EAAAU,YAAA1B,EAAA,GACAgB,EAAAW,iBAAA3B,EAAA,GACAgB,EAAAY,MAAA5B,EAAA,GACAgB,EAAAa,iBAAA7B,EAAA,IACAgB,EAAAc,iBAAA9B,EAAA,IACAgB,EAAAe,eAAA/B,EAAA,IACAgB,EAAAgB,UAAAhC,EAAA,IACAgB,EAAAiB,KAAAjC,EAAA,IACAgB,EAAAkB,WAAAlC,EAAA,IACAgB,EAAAmB,YAAAnC,EAAA,IACAgB,EAAAP,MACAO,EAAAL,KAEAyB,OAAAC,YAAA,CAEA,GAAAC,GAAAC,SAAAC,cAAA,UACAC,EAAAF,SAAAG,qBAAA,YACAD,GAAAE,WAAAC,aAAAN,EAAAG,GAEAH,EAAAO,IAAA,mDACAP,EAAAQ,aAAA,iBACAR,EAAAQ,aAAA,oCACAR,EAAAQ,aAAA,gEACAR,EAAAQ,aAAA,uDAEAV,OAAAW,QAAA,SAAAC,EAAAC,EAAAC,GACA,YAEAD,GAAAE,MAAA,YACAC,SAAAC,MAA2BC,OAAQN,UAAAO,SAAAN,EAAAO,WAAAN,MA2CnClC,EAAAyC,QAAA,SAAAC,GACA,YACA,IAAAC,GAAA3C,EAAAM,OAAAoC,EAEA,OADAC,GAAAF,QAAAC,GACAC,GAaA3C,EAAA4C,UAAA,SAAAzD,GACA,YAOA,OANA0D,UAAA1D,GACAM,EAAAqD,MAAA,8CAAAC,QAAAC,OAEAhD,EAAAG,UAAAhB,IACAM,EAAAqD,MAAA,6BAAA3D,GAEAa,EAAAG,UAAAhB,IAiBAa,EAAAiD,aAAA,SAAAP,GACA,YACA,IAAAC,EAEA,OADAD,SACAA,EAAAQ,aACAP,EAAA3C,EAAA4C,UAAAF,EAAAQ,aAEAP,EAGA3C,EAAAM,OAAAoC,IAWA1C,EAAAmD,KAAA,SAAAC,GACA,YACA,mBACA,GAAAC,IAAA,CACA,mBACAA,KAAA,IACAD,EAAAE,MAAA,KAAAC,WACAF,GAAA,QAYArD,EAAAwD,SAAA,WACA,YAKA,QADAC,GAHAC,EAAA,iEAAAC,MAAA,IACAC,EAAA,GAAAC,OAAA,IACAC,EAAA,EAEAC,EAAA,EAAmB,GAAAA,EAAQA,GAAA,EAC3B,IAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,EACAH,EAAAG,GAAA,IACS,KAAAA,EACTH,EAAAG,GAAA,KAEA,GAAAD,IACAA,EAAA,kBAAAE,KAAAC,SAAA,GAEAR,EAAA,GAAAK,EACAA,IAAA,EACAF,EAAAG,GAAAL,EAAA,KAAAK,EAAA,EAAAN,EAAA,EAAAA,GAGA,OAAAG,GAAAM,KAAA,KAcAlE,EAAAmE,cAAA,SAAAC,EAAAC,EAAAC,GACA,YACA,IAAAC,IAAA,CAQA,QAPAF,GAAAC,KACAC,GAAA,GAGAF,EAAA,kBAAAA,KAAA,aACAC,EAAA,kBAAAA,KAAA,aACAF,EAAAI,KAAAH,EAAAC,GACAC,EAAA1B,OAAAuB,GAWApE,EAAAyE,MAAA,SAAA/B,GACA,YACAA,QACA,KAAAgC,GAAAhC,EAAAgC,QACAhC,GAAAC,OAUA,MARA+B,GAAAC,UAAA,sBACAjC,GAAAgC,WACAA,GAAA/B,OAEAiC,OAAAC,KAAAnC,GAAAoC,QAAA,SAAAC,GACAL,EAAAK,GAAArC,EAAAqC,KAGAL,GASA1E,EAAAgF,aAAA,WACA,YACA,QAAAC,UAAAC,cAAAD,UAAAE,oBAAAF,UAAAG,0BAAAC,WASArF,EAAAsF,qBAAA,WACA,YACA,QAAAlE,OAAAmE,mBAAAnE,OAAAoE,yBACApE,OAAAqE,+BAAAJ,WASArF,EAAA0F,aAAA,WACA,YACA,QAAAtE,OAAAuE,WAAAvE,OAAAwE,iBAAAxE,OAAAyE,uBAAAR,WAUArF,EAAA8F,YAAA,SAAAC,GACA,YACA,YAAAA,EAAAC,QAAA,YAUAhG,EAAAiG,YAAA,SAAAF,GACA,YACA,YAAAA,EAAAC,QAAA,YAUAhG,EAAAkG,kBAAA,SAAAH,GACA,YACA,YAAAA,EAAAC,QAAA,kBAUAhG,EAAAmG,oBAAA,SAAAC,GACA,YACA,OAAAA,GAAAC,SAAA,GAUArG,EAAAsG,oBAAA,SAAAF,GACA,YACA,OAAAA,GAAAG,SAAA,mBAAAH,GAAAG,QHsEM,SAAS5H,EAAQD,EAASM,GItgBhC,IAAAgB,GAAAhB,EAAA,GACAS,EAAAT,EAAA,GAYAL,GAAAD,QAAA,SAAAgE,GACA,YA6IA,SAAA8D,GAAAC,EAAAC,EAAAC,GACA,kBACA,IACAF,EAAApH,KAAAqF,EAAAgC,GACa,MAAAE,GACbnH,EAAA6C,MAAA,YAAAoC,EAAAC,UAAA,IAAAgC,EAAAC,EAAA5E,QAAA4E,EAAA5D,SAjJAN,OACA,IAAAgC,GAAA1E,EAAAyE,MAAA/B,EAQAgC,GAAAC,UAAA,sBAQA,IAAAkC,KA8JA,OA/IAnC,GAAAvB,KAAA,SAAAwD,EAAAF,EAAAK,GACAL,EAAAzG,EAAAmD,KAAAsD,GACAA,EAAAtD,MAAA,EACAuB,EAAAqC,OAAAJ,EAAAF,EAAAK,IAeApC,EAAAqC,OAAA,SAAAJ,EAAAF,EAAAK,GACAjE,SAAA4D,IAIAI,EAAAF,GAAAE,EAAAF,OACAF,EAAAK,eAEA,kBAAAL,IAES,KAFTI,EAAAF,GAAAK,IAAA,SAAAC,GACA,MAAAA,GAAAC,aACSlB,QAAAS,EAAAS,YACTL,EAAAF,GAAAtE,KAAAoE,GACS,KAAAI,EAAAF,GAAAX,QAAAS,IACThH,EAAA0H,KAAA,oCAcAzC,EAAA0C,OAAA,SAAAT,EAAAF,GAEA,GAAA5D,SAAA8D,EAEA,MADAE,MACA,MAIA,IAAAhE,SAAA4D,IAAAI,EAAAF,GAEA,MADAE,GAAAF,MACA,MAIA,QAAA5C,GAAA8C,EAAAF,GAAAU,OAAA,EAAqDtD,GAAA,EAAQA,GAAA,EAC7D,GAAA0C,IAAAI,EAAAF,GAAA5C,GAEA,MADA8C,GAAAF,GAAAW,OAAAvD,EAAA,GACA,QAeAW,EAAA6C,KAAA,SAAAZ,EAAAD,GACA,GACAc,GAAA,CAMA,IAJAd,QACAA,EAAA3B,KAAA4B,EACAD,EAAAe,OAAA/C,EAEAiC,EAAA,CAIA,IAAAE,EAAAF,GAEA,MADAlH,GAAAqD,MAAA,SAAA4B,EAAAC,UAAA,IAAAgC,EAAA,kCAAAD,GACA,MAGA,QAAA3C,GAAA8C,EAAAF,GAAAU,OAAiDtD,EAAA,GAAQA,GAAA,GACzD,GAAA0C,GAAAI,EAAAF,GAAA5C,EACA,mBAAA0C,KACAiB,WAAAlB,EAAAC,EAAAC,EAAAC,IAEAa,GAAA,EACAf,EAAAtD,MACA0D,EAAAF,GAAAW,OAAAvD,EAAA,IAIAtE,EAAAqD,MAAA,SAAA4B,EAAAC,UAAA,IAAAgC,EAAA,IAAAa,EAAA,gCAAAd,KAwBAhC,EAAAiD,aAAA,SAAAhB,GACA,GAAA9D,SAAA8D,EACA,SAAA5D,OAAA,yCAGA,OAAA8D,GAAAF,IAIAE,EAAAF,GAAAiB,MAAA,SAAAnB,GACA,MAAAA,GAAAK,cAJA,GAQApC,KJshBM,SAAS/F,EAAQD,EAASM,GKptBhC,GAAAS,GAAAT,EAAA,IACAW,EAAAX,EAAA,IACAgB,EAAAhB,EAAA,EA6DAL,GAAAD,QAAA,SAAAgE,GACA,YA8SA,SAAAmF,GAAAnF,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OAEA,OAAAC,GAAAC,OACAD,EAAAE,OAAAF,EAAAG,YAAAH,EAAAI,mBAAA,GAMAC,EAAAC,MACAT,kBACAM,WAAAzD,EAAAyD,WACAF,MAAAD,EAAAC,QACSM,KAAA,WACT,MAAAF,GAAAG,iBACShE,KAAA,WAETwD,EAAAS,UACA/D,EAAAgE,aAAkCD,SAAAT,EAAAS,WAkBlC/D,EAAAqC,OAAA,OAAAiB,EAAAW,QAWAjE,EAAAqC,OAAA,oBAAAiB,EAAAY,oBACAlE,EAAAqC,OAAA,OAAAiB,EAAAa,QAQAnE,EAAAqC,OAAA,QAAAiB,EAAAc,SAeApE,EAAAqC,OAAA,UAAAiB,EAAAe,WACArE,EAAAqC,OAAA,UAAAiB,EAAAgB,WASAtE,EAAAqC,OAAA,aAAAiB,EAAAiB,cASAvE,EAAAqC,OAAA,YAAAiB,EAAAkB,aAEAzJ,EAAA0J,KAAA,gBAAAzE,EAAAyD,WAAAzD,GACAoD,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAA,gCACA7J,EAAA6C,MAAA+G,EAAArH,QAAAqH,EAAArG,SAGA8E,EAAA1D,UA/FA0D,EAAAwB,OAAA,GAAAvG,OAAA,iGAEA+E,EAAA1D,SA4QA,QAAAmF,GAAA7C,GAEA,GADAjH,EAAAqD,MAAA,YACA4D,EAAArH,KACA,SAAA0D,OAAA,2CAEA,MAAA2B,EAAA8E,MAAAxD,QAAAU,EAAArH,OACAqF,EAAA8E,MAAAnH,KAAAqE,EAAArH,MAGAqH,EAAArH,KAAA0H,OAAA,oBACA0C,GAAwBpK,KAAAqH,EAAArH,SAYxB,QAAAoK,GAAA/C,GACA,GAAAvE,GAAA,CACA,KAAAuE,EAAArH,KACA,SAAA0D,OAAA,8CAIA,QAAAgB,GAAAW,EAAA8E,MAAAnC,OAAA,EAA2CtD,GAAA,EAAQA,GAAA,EACnDW,EAAA8E,MAAAzF,GAAA5E,KAAAuH,EAAArH,KAAAF,KACAuF,EAAA8E,MAAAlC,OAAAvD,EAAA,GACA5B,GAAA,EAIA,KAAAA,GACA1C,EAAA0H,KAAA,wBAAAhF,EAAA,uBA+eA,QAAAuH,GAAAhH,GAEA,GADAA,SACAA,EAAAvD,GACA,SAAA4D,OAAA,iEAGApD,GAAAgK,IAAAC,EAAA5C,IAAA,SAAA6C,GACA,MAAAA,GAAAC,gBACStF,KAAA,SAAAuF,GAGT,GAAAC,GAAAD,EAAAnC,MAAA,SAAAqC,GACA,MAAAA,GAAArC,MAAA,SAAAsC,GACA,MAAAA,GAAA/B,aAAAzF,EAAAvD,MAGA6K,IACAG,EAAAvC,MAAA,SAAAwC,EAAAC,GACA,MAAAD,GAAAjL,KAAAuD,EAAAvD,IACAgL,EAAA7C,OAAA+C,EAAA,IACA,IAEA,MA3mCA3H,OAOA,IAAAQ,GAAAR,EAAAQ,YAAAlD,EAAAwD,UACAd,GAAAQ,YACA,IAAAwB,GAAA1E,EAAAO,YAAAmC,EACA1C,GAAAG,UAAA+C,GAAAwB,QACAA,GAAAxB,WACAwB,EAAA4F,aAAA,EAOA5F,EAAAC,UAAA,gBAOA,IAeA4F,IAfAnJ,OAAAoJ,SAAAC,SAOArJ,OAAAoJ,SAAAE,MASAhC,YAAAhE,EAAAgE,cA+BAV,GACA2C,QAAAjI,EAAAiI,QACA1C,MAAAvF,EAAAuF,MACAC,MAAAxF,EAAAwF,MACAE,gBAAA,iBAAA1F,GAAA0F,gBAAA1F,EAAA0F,iBAAA,EACAwC,UAAA,iBAAAlI,GAAA0F,gBAAA1F,EAAA0F,iBAAA,EACAD,WAAAzF,EAAAyF,WACAU,OAAAnG,EAAAmG,OACAC,QAAApG,EAAAoG,QACAC,UAAArG,EAAAqG,UACAC,UAAAtG,EAAAsG,UACAC,aAAAvG,EAAAuG,aACAC,YAAAxG,EAAAwG,YACAP,OAAAjG,EAAAiG,OACAC,mBAAAlG,EAAAkG,mBACAiC,wBAAAnI,EAAAmI,wBACAC,sBAAA,iBAAApI,GAAAoI,sBAAApI,EAAAoI,uBAAA,SAEApG,GAAAwD,YACAxD,GAAAiG,cACAjG,GAAA0D,sBACA1D,GAAAuD,YACAvD,GAAAmG,uBASA,IAAAjB,MAQAO,IASAzF,GAAA8E,SACA/J,EAAAqD,MAAA,gBAAAI,GAmBAwB,EAAAqG,cACA3E,YAAA1D,EAAA0D,cACAG,OAAA,EACAF,OAAA,EACA2E,YACAC,cAEAC,QAAAxI,EAAAwI,UACAC,eAUA,IAAA9C,GAAArI,EAAAa,kBACAqC,aACA8E,kBA+lCA,OA1gCAtD,GAAAjC,QAAA,SAAAC,GACA,GAAA0B,GACAgH,CAmCA,OAlCA1I,SACAjD,EAAAqD,MAAA,kBACA4B,EAAA4F,cAAA,EAEA1F,OAAAC,KAAAnC,GAAAoC,QAAA,SAAAuG,GACA,6BAAArF,QAAAqF,IAAAxI,SAAAH,EAAA2I,KACArD,EAAAqD,GAAA3I,EAAA2I,MAGA3G,EAAAyD,WAAAH,EAAAG,WACA/D,EAAAyD,EAAAnF,GACA0I,EAAApL,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,SACAF,EAAAmE,KAAA,WAQA7D,EAAA6C,KAAA,aAcA6D,GAsIA1G,EAAA4G,WAAA,SAAA5I,GAEAA,OACA,IAAAoF,GAAAnI,EAAAoI,QACAqD,EAAApL,EAAAmE,cAAA2D,EAAA1D,QAAA1B,EAAA2B,UAAA3B,EAAA4B,QAEA,KACAI,EAAA6G,kBACS,MAAA3E,GAET,MADAkB,GAAAwB,OAAA1C,GACAwE,EAGA,GAAAI,GAAA5B,EAAA5C,IAAA,SAAA6C,GACAA,EAAA4B,SAmBA,OAhBA9L,GAAAgK,IAAA6B,GAAAE,IAAA,WACA,MAAArD,GAAAsD,UACSD,IAAA,WACThH,EAAA+D,SAAA,cACA0B,KACAP,KAOAlF,EAAA6C,KAAA,cACAO,EAAAsB,YACS5E,OAET4G,GAmCA1G,EAAAgE,YAAA,SAAAhG,GACA,GAAA0B,GACAgH,CACA1I,QAEA,KACAgC,EAAA6G,kBACS,MAAA3E,GAET,MADAxC,GAAAzE,EAAA2J,OAAA1C,GACA5G,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,SAcA,MAXA7E,GAAA0J,KAAA,8BAAAzG,EAAA+F,UAEArE,EAAAiE,EAAAuD,cACAnD,SAAA/F,EAAA+F,WAGArE,EAAAmE,KAAA,WACAgC,EAAA7B,YAAAhG,GACAsF,EAAAS,SAAA/F,EAAA+F,WAEA2C,EAAApL,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,UAgBAI,EAAAmH,QAAA,SAAAnJ,GACA,GAAArD,GAAA,KACAyM,EAAA,IAeA,IAbApH,EAAA8E,MAAA5B,MAAA,SAAAmE,GACA,MAAArJ,GAAAvD,IAAA4M,EAAA5M,KAAAuD,EAAAvD,IACAE,EAAA0M,GACA,IAGArJ,EAAAvD,IAAAuD,EAAAyF,YAAA4D,EAAAC,eAAA7M,KAAAuD,EAAAyF,YACA9I,EAAA0M,GACA,IAEA,IAGA,OAAA1M,GAAAqD,EAAAuJ,UAAA,EACA,WAAAvJ,EAAAwJ,SACA,IACA7M,EAAAqF,EAAAyH,gBACAhN,GAAAuD,EAAAvD,GACAiN,OAAA1J,EAAAyF,WACAkE,QAAA,EACAH,SAAA,MACAI,OAAA,QAEiB,MAAA1F,GACjBnH,EAAA6C,MAAA,wBAAAsE,EAAA5E,QAAA4E,EAAA5D,WAEa,CACb8I,EAAApH,EAAA6H,aAA6CpN,GAAAuD,EAAAyF,YAC7C,KACA9I,EAAAyM,EAAAU,WACArN,GAAAuD,EAAAvD,GACAkN,QAAA,IAEiB,MAAAzF,GACjBnH,EAAA6C,MAAA,wBAAAsE,EAAA5E,QAAA4E,EAAA5D,QAIA,MAAA3D,IAqEAqF,EAAA+H,UAAA,SAAA/J,GACA,GAAA0B,EAEA1B,SACAA,EAAA+F,SAAA/F,EAAA+F,UAAA,WAEA,KACA/D,EAAA6G,kBACS,MAAA3E,GAET,MADAxC,GAAAzE,EAAA2J,OAAA1C,GACA5G,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,SAGA,MAAAI,GAAAgE,YAAAhG,IAkBAgC,EAAAgI,YAAA,SAAAhK,GACA,GAAA0B,GACAgH,EACAU,CACA,KACApH,EAAA6G,kBACS,MAAA3E,GAGT,MAFAxC,GAAAzE,EAAA2J,OAAA1C,GACAwE,EAAApL,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,SAKA,MAFAwH,GAAApH,EAAA6H,aAAqCpN,GAAAuD,EAAAyF,mBACrCzF,GAAAyF,WACA2D,EAAAY,YAAAhK,IAuDAgC,EAAA8H,UAAA,SAAA9J,GACA,GAAA0B,GACAgH,EACAU,CAEA,KACApH,EAAA6G,kBACS,MAAA3E,GAGT,MAFAxC,GAAAzE,EAAA2J,OAAA1C,GACAwE,EAAApL,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,SAMA,MAFAwH,GAAApH,EAAA6H,aAAqCpN,GAAAuD,EAAAyF,mBACrCzF,GAAAyF,WACA2D,EAAAU,UAAA9J,IAwCAgC,EAAAyH,eAAA,SAAAzJ,GACA,GAAA0B,GACAgH,EACA/L,EAAA,KACAsN,KACAC,EAAAC,KAAAC,MAAAD,KAAAE,UAAArI,EAAAqG,cACArI,QAEA,KACAgC,EAAA6G,kBACS,MAAA3E,GAGT,MAFAxC,GAAAzE,EAAA2J,OAAA1C,GACAwE,EAAApL,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,SAQA,MAJAzB,UAAAH,EAAA2J,SACA3J,EAAA2J,QAAA,GAGA3J,EAAA0J,QAOAO,EAAAxN,GAAAuD,EAAA0J,OAGAQ,EAAAxG,YAAA1D,EAAA0D,aAAAwG,EAAAxG,YACAwG,EAAA1B,QAAAxI,EAAAwI,SAAA0B,EAAA1B,QAEA0B,EAAAxG,YAAAC,OAAA,EACAuG,EAAAxG,YAAAG,OAAA,EACA9G,EAAAqD,MAAA,wBAAA8J,GAEAlK,EAAAqI,aAAA6B,EACAlK,EAAAQ,aACAR,EAAAsJ,eAAAW,EAEAjK,EAAA4J,OAAA5J,EAAA4J,QAAA,MACA5J,EAAAwJ,SAAAxJ,EAAAwJ,UAAA,MAEAxJ,EAAAsK,YAAA,SAAAC,GACA,GAAA5I,GAAA4I,EAAA5I,UACAC,EAAA2I,EAAA3I,cACA2I,GAAA5I,gBACA4I,GAAA3I,QAEA2I,EAAAC,WAAA,QACAD,EAAAxF,OAAA,OACAwF,EAAAN,YACAM,EAAAX,OAAA5J,EAAA4J,OACAW,EAAAf,SAAAxJ,EAAAwJ,SACA7D,EAAA8E,QAAAF,GAAAzI,KAAAH,EAAAC,IAEA5B,EAAA0K,aAAA,SAAAH,GACAA,EAAAC,WAAA,SACAD,EAAAxF,OAAA,OACAwF,EAAAN,YACAM,EAAAX,OAAA5J,EAAA4J,OACAW,EAAAf,SAAAxJ,EAAAwJ,SACA7D,EAAA8E,QAAAF,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,4BAAA+G,EAAArH,QAAAqH,EAAArG,OACAiK,EAAA5N,KAAAgO,QAA0CC,QAAA,OAG1C5K,EAAA6K,gBAAA,SAAAN,GACAA,EAAAxF,OAAA,OACAwF,EAAAO,aAAAP,EAAAO,aACAP,EAAAN,YACAM,EAAAX,OAAA5J,EAAA4J,OACAW,EAAAf,SAAAxJ,EAAAwJ,SACA7D,EAAAoF,cAAAR,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,2BAAA+G,EAAArH,QAAAqH,EAAArG,OACAiK,EAAA5N,KAAAgO,YAGA3K,EAAAgL,aAAA,SAAAT,GACAA,EAAAxF,OAAA,OACAwF,EAAAN,YACAM,EAAAX,OAAA5J,EAAA4J,OACAW,EAAAf,SAAAxJ,EAAAwJ,SACA7D,EAAAsF,WAAAV,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,wBAAA+G,EAAArH,QAAAqH,EAAArG,UAGAN,EAAAkL,gBAAA,SAAAX,GACAA,EAAAxF,OAAA,OACAwF,EAAAN,YACAM,EAAAX,OAAA5J,EAAA4J,OACAW,EAAAf,SAAAxJ,EAAAwJ,SACA7D,EAAAwF,cAAAZ,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,2BAAA+G,EAAArH,QAAAqH,EAAArG,UAGAN,EAAAoL,aAAA,SAAAb,GACAA,EAAAxF,OAAA,OACAwF,EAAAN,YACAM,EAAAX,OAAA5J,EAAA4J,OACAW,EAAAf,SAAAxJ,EAAAwJ,SACA7D,EAAA0F,WAAAd,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,wBAAA+G,EAAArH,QAAAqH,EAAArG,UAGAN,EAAAsL,aAAA,SAAAf,GACAxN,EAAAqD,MAAA,uBAAAmK,EAAAgB,QACA5F,EAAA6F,WAAAjB,IAGAvK,EAAA2F,mBACAhJ,EAAAW,EAAAiB,KAAAyB,GACA6G,GAAiBlK,SACjBA,IA7FAI,EAAA6C,MAAA,8CACA8B,EAAAzE,EAAA2J,OAAA,GAAAvG,OAAA,+CACAqI,EAAApL,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,WAqGAI,EAAA6G,gBAAA,WACA,IAAAlD,EAAA8F,cACA,SAAApL,OAAA,iEAUA2B,EAAAyJ,YAAA,WACA,MAAA9F,GAAA8F,eAiDAzJ,EAAAR,KAAA,SAAAxB,GACA,GAAAoF,GAAAnI,EAAAoI,QACAqD,EAAApL,EAAAmE,cAAA2D,EAAA1D,QAAA1B,EAAA2B,UAAA3B,EAAA4B,QACA,KACAI,EAAA6G,kBACS,MAAA3E,GAET,MADAkB,GAAAwB,OAAA1C,GACAwE,EAGA,MAAA1I,GAAAvD,IAKAkJ,EAAA+F,WACAjP,GAAAuD,EAAAvD,KACSqF,KAAA,WACT,GAAAqF,EACAnH,GAAA2F,mBACA3F,EAAAQ,aAEA2G,EAAAnF,EAAA2J,UAAmClP,GAAAuD,EAAAvD,KAEnC0K,IACAA,EAAA7J,EAAAY,MAAA8B,GACAgC,EAAA4J,SAAAzE,IAGAA,EAAA9C,OAAA,OAAArE,EAAAmG,QACAgB,EAAA9C,OAAA,QAAArE,EAAAoG,SACAe,EAAA9C,OAAA,UAAArE,EAAAqG,WAEAc,EAAA0E,WACAC,WAAA9J,EAAA+J,eACAtG,WAAAzD,EAAAyD,WACAqF,aAAA9I,EAAA8I,iBAYA9I,EAAA6C,KAAA,QACAsC,UAEA/B,EAAAsB,QAAAS,IACS,SAAAR,GACTvB,EAAAwB,OAAAD,KAEA+B,IA5CAtD,EAAAwB,OAAA,GAAAvG,OAAA,yCACAqI,IAqDA1G,EAAA4J,SAAA,SAAAI,GACA,IAAAA,GAAA,kBAAAA,EAAA/J,UACA,SAAA5B,OAAA,wDAGA2L,GAAA3H,OAAA,iBAAAL,GACAgI,EAAAC,cAAmCnB,aAAA9G,EAAA8H,WAAArP,KACnCuK,EAAAhD,EAAA8H,WAAAjC,iBACS,GAET3C,EAAAvH,KAAAqM,IASAhK,EAAAkK,UAAA,WACA,MAAAhF,IAeAlF,EAAA2J,SAAA,SAAA3L,GACA,GAAAmH,EACA,KAAAnH,MAAAvD,GACA,SAAA4D,OAAA,sCAiBA,OAdA6G,GAAAhC,MAAA,SAAAiH,GACA,MAAAA,GAAA1P,KAAAuD,EAAAvD,IACA0K,EAAAgF,GACA,IAEA,IAGAhF,IACAA,EAAA9C,OAAA,OAAArE,EAAAmG,QACAgB,EAAA9C,OAAA,QAAArE,EAAAoG,SACAe,EAAA9C,OAAA,UAAArE,EAAAqG,YAGAc,GAgEAnF,EAAA6H,YAAA,SAAA7J,GACA,GAAAoJ,EACA,KAAApJ,MAAAvD,GACA,SAAA4D,OAAA,6CA+BA,OA5BAoH,GAAAvC,MAAA,SAAAwC,GACA,MAAAA,GAAAjL,KAAAuD,EAAAvD,IACA2M,EAAA1B,GACA,IAEA,IAGA0B,IAAApJ,KAAAoM,aACApM,EAAAQ,aACAR,EAAA2F,mBACA3F,EAAAmI,wBAAA7C,EAAA6C,wBACAnI,EAAA6G,UAEAuC,EAAA9L,EAAAS,SAAAiC,GACA2F,EAAA0G,kBACAC,cAAAlD,EAAA3M,MACaqF,KAAA,cAAA6E,GACb5J,EAAA6C,MAAA,oCAAAwJ,EAAA3M,GAAAkK,EAAArH,WAEAmI,EAAA9H,KAAAyJ,IAGAA,IACAA,EAAA/E,OAAA,WAAArE,EAAAuM,YACAnD,EAAA/E,OAAA,UAAArE,EAAAqG,YAGA+C,GAqBApH,EAAA+J,cAAA,SAAA/L,GACA,GAAA8L,GACA1C,EACAoD,EAAA/E,CAGA,IADAzH,SACAA,EAAA8K,aACA,SAAAzK,OAAA,gDAEA,KAAAL,EAAAyF,aAAAzF,EAAAoM,WACA,SAAA/L,OAAA,iDA0BA,OAvBAL,GAAAyF,aACA2D,EAAApH,EAAA6H,aACApN,GAAAuD,EAAAyF,WACA2G,WAAApM,EAAAoM,aAGAI,KACApD,IACAoD,GAAApD,KAIAoD,EAAAtH,MAAA,SAAAwC,GAEA,MADAoE,GAAApE,EAAAqE,cAAA/L,IACA8L,IAGAA,GAAA9L,EAAAoM,aACApM,EAAAQ,aACAsL,EAAAxO,EAAAQ,WAAAkC,GACAoJ,EAAAqD,YAAA9M,KAAAmM,IAGAA,GA2BA9J,EAAA0K,aAAA,WACA,MAAAjF,IAGAzF,IL+zBM,SAAS/F,EAAQD,EAASM,GM/nEhC,GAAAgB,GAAAhB,EAAA,EAeAL,GAAAD,QAAA,SAAAgE,GACA,YACAA,QAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAK,aAAAqC,SACAgC,GAAAxB,WAOAwB,EAAAC,UAAA,sBAYAD,EAAA+D,SAAA,aAQA,IAAA9F,GAAA3C,EAAA4C,UAAAM,EAmEA,OAtDAwB,GAAAgE,YAAA,SAAAhG,GACA,GAAA8L,EAKA,IAJA9L,QACAA,EAAA+F,SAAA/F,EAAA+F,UAAA,YACA/F,EAAA8K,aAAA9K,EAAA8K,cAAA9I,EAAA8I,aAEA,mBAAA9I,EAAAC,WAAA,uBAAAD,EAAAC,UACAD,EAAA+D,SAAA/F,EAAA+F,SACA,uBAAA/D,EAAAC,WACAD,EAAA6H,cAAA8C,sBAES,yBAAA3K,EAAAC,UAAA,CACT,IAAAjC,EAAA8K,aACA,SAAAzK,OAAA,sDAGAyL,GAAA9J,EAAA+J,eAA6CjB,aAAA9K,EAAA8K,gBAAkC7K,EAAA8L,eAC/EjB,aAAA9K,EAAA8K,aACAsB,YAAA,EACA3G,WAAAzD,EAAAvF,KAGAqP,EAAA/F,SAAA/F,EAAA+F,SACA/D,EAAA2K,kBAWA3K,EAAA6C,KAAA,YACAkB,SAAA/D,EAAA+D,YAeA/D,EAAA4K,YAAA,WACA,MAAA5K,GAAA+D,UAGA/D,IN4oEM,SAAS/F,EAAQD,EAASM,GOpwEhC,GAAAgB,GAAAhB,EAAA,EAgBAL,GAAAD,QAAA,SAAAgE,GACA,YACAA,QAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAO,YAAAmC,GAOAC,EAAA3C,EAAA4C,UAAAM,EASA,IADAwB,EAAAvF,GAAAuF,EAAAvF,IAAAuF,EAAA8I,cACA9I,EAAAvF,GACA,SAAA4D,OAAA,yCA0NA,cAxNA2B,GAAAxB,iBACAwB,GAAA8I,aAQA9I,EAAAC,UAAA,qBAiBAD,EAAAgI,YAAA,SAAAhK,GAGA,MAFAA,SACAA,EAAA8K,aAAA9I,EAAAvF,GACAuF,EAAA6H,cAAAG,YAAAhK,IA6CAgC,EAAA8H,UAAA,SAAA9J,GAGA,MAFAA,SACAA,EAAA8K,aAAA9I,EAAAvF,GACAuF,EAAA6H,cAAAC,UAAA9J,IAyCAgC,EAAA6K,eAAA,SAAA7M,GASA,MARAA,SACAA,EAAA8K,aAAA9I,EAAAvF,GACAuD,EAAA0D,aACAG,OAAA,EACAF,OAAA,EACA2E,YACAC,cAEAvG,EAAA8H,UAAA9J,IAuCAgC,EAAA8K,eAAA,SAAA9M,GAGA,MAFAA,SACAA,EAAA8K,aAAA9I,EAAAvF,GACAuF,EAAA6H,cAAAC,UAAA9J,IA+BAgC,EAAA+K,sBAAA,SAAA/M,GAGA,MAFAA,SACAA,EAAA8K,aAAA9I,EAAAvF,GACAuF,EAAA6H,cAAAkD,sBAAA/M,IASAgC,EAAA6H,YAAA,WACA,MAAA5J,GAAA4J,aAAmCpN,GAAAuF,EAAAyD,cAGnCzD,IPixEM,SAAS/F,EAAQD,EAASM,GQthFhC,GAAAS,GAAAT,EAAA,IACAW,EAAAX,EAAA,IACAgB,EAAAhB,EAAA,EAsBAL,GAAAD,QAAA,SAAAgE,GACA,YACAA,QAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAO,YAAAmC,GAOAC,EAAA3C,EAAA4C,UAAAM,GAOAmF,EAAA3F,EAAA2F,iBAEAqH,EAAA,SAAAC,GACA,MAAA9C,MAAAC,MAAAD,KAAAE,UAAA4C,KAGApG,EAAA7G,EAAA6G,cAEA7E,GAAA2D,uBACA3D,GAAAxB,iBACAwB,GAAA8I,mBACA9I,GAAA6E,QAOA7E,EAAAC,UAAA,mBAOAD,EAAAkL,iBAAA,KAQAlL,EAAAyK,eACAxM,EAAAoE,OAAA,wBACArC,EAAAyK,gBAIA,IAAAtE,GAAAnI,EAAAmI,uBAifA,cAhfAnG,GAAAmG,wBAiBAnG,EAAAgI,YAAA,SAAAhK,GACA,GAAA0B,GACAgH,CAUA,OATA1I,SAEA0B,EAAAiE,EAAAqE,aACAc,aAAA9K,EAAA8K,aACAxL,QAAAU,EAAAV,QACA2K,UAAAjI,IAGA0G,EAAApL,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,UA4CAI,EAAA6K,eAAA,SAAA7M,GAQA,MAPAA,SACAA,EAAA0D,aACAG,OAAA,EACAF,OAAA,EACA2E,YACAC,cAEAvG,EAAA8H,UAAA9J,IA2CAgC,EAAA8K,eAAA,SAAA9M,GAQA,MAPAA,SACAA,EAAA0D,aACAG,OAAA,EACAF,OAAA,EACA2E,YACAC,cAEAvG,EAAA8H,UAAA9J,IA8CAgC,EAAA8H,UAAA,SAAA9J,GACA,GAAArD,GAAA,KACAuN,EAAA8C,EAAA/M,EAAAoI,aAUA,OATArI,SAEAjD,EAAAqD,MAAA,iBACAH,EAAA4I,kBACA9L,EAAAqD,MAAA,0BAAA8J,GACA/J,SAAAH,EAAA2J,SACA3J,EAAA2J,QAAA,GAGA3H,EAAAvF,IAMAyN,EAAAxG,YAAA1D,EAAA0D,aAAAwG,EAAAxG,YACAwG,EAAA1B,QAAAxI,EAAAwI,SAAA0B,EAAA1B,QACAzL,EAAAqD,MAAA,wBAAA8J,GAEAlK,EAAAqI,aAAA6B,EACAlK,EAAAQ,aACAR,EAAAsJ,eAAAtH,EAEAhC,EAAAsK,YAAA,SAAAC,GACA,GAAA5I,GAAA4I,EAAA5I,UACAC,EAAA2I,EAAA3I,cACA2I,GAAA5I,gBACA4I,GAAA3I,QAEA2I,EAAAC,WAAA,QACAD,EAAAxF,OAAA,OACAwF,EAAAN,UAAAjI,EAEA2D,EAAA8E,QAAAF,GAAAzI,KAAAH,EAAAC,IAEA5B,EAAA0K,aAAA,SAAAH,GACAA,EAAAC,WAAA,SACAD,EAAAxF,OAAA,OACAwF,EAAAN,UAAAjI,EACAuI,EAAA4C,UAAA5C,EAAA5N,KAAAwQ,UACAxH,EAAA8E,QAAAF,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,4BAAA+G,EAAArH,QAAAqH,EAAArG,OACAiK,EAAA5N,KAAAgO,QAA0CC,QAAA,OAG1C5K,EAAA6K,gBAAA,SAAAN,GACAA,EAAAxF,OAAA,OACAwF,EAAAO,aAAAP,EAAA5N,KAAAmO,aACAP,EAAA4C,UAAA5C,EAAA5N,KAAAwQ,UACA5C,EAAAN,UAAAjI,EACA2D,EAAAoF,cAAAR,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,2BAAA+G,EAAArH,QAAAqH,EAAArG,OACAiK,EAAA5N,KAAAgO,YAGA3K,EAAAgL,aAAA,SAAAT,GACAA,EAAAxF,OAAA,OACAwF,EAAAN,UAAAjI,EACAuI,EAAA4C,UAAA5C,EAAA5N,KAAAwQ,UACAxH,EAAAsF,WAAAV,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,wBAAA+G,EAAArH,QAAAqH,EAAArG,UAGAN,EAAAkL,gBAAA,SAAAX,GACAA,EAAAxF,OAAA,OACAwF,EAAAN,UAAAjI,EACAuI,EAAA4C,UAAA5C,EAAA5N,KAAAwQ,UACAxH,EAAAwF,cAAAZ,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA0H,KAAA,2BAAAkC,EAAArH,QAAAqH,EAAArG,UAGAN,EAAAoL,aAAA,SAAAb,GACAA,EAAAxF,OAAA,OACAwF,EAAAN,UAAAjI,EACAuI,EAAA4C,UAAA5C,EAAA5N,KAAAwQ,UACAxH,EAAA0F,WAAAd,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,wBAAA+G,EAAArH,QAAAqH,EAAArG,UAGAN,EAAAsL,aAAA,SAAAf,GACAxN,EAAAqD,MAAA,uBAAAmK,EAAAgB,QACA5F,EAAA6F,WAAAjB,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA0H,KAAA,yBAAAkC,EAAArH,QAAAqH,EAAArG,UAIAN,EAAA2F,mBACAhJ,EAAAW,EAAAiB,KAAAyB,GACA6G,GAAiBlK,SACjBA,IA/EAI,EAAA6C,MAAA,2CACA,SAiHAoC,EAAA+K,sBAAA,SAAA/M,GACAA,OACA,IAGArD,GAHAyQ,EAAAJ,EAAA/M,EAAAoI,cACAjD,EAAAnI,EAAAoI,QACAqD,EAAApL,EAAAmE,cAAA2D,EAAA1D,QAAA1B,EAAA2B,UAAA3B,EAAA4B,QAGA,KACA3B,EAAA4I,kBACS,MAAAlC,GAET,MADAvB,GAAAwB,OAAAD,GACA+B,EAGA,MAAA1G,GAAAkL,kBAAAlN,EAAAuJ,UAAA,GACAnE,EAAAsB,QAAA1E,EAAAkL,kBACAxE,IAGA3L,EAAAqD,MAAA,iCAAAJ,GACAG,SAAAH,EAAA2J,SACA3J,EAAA2J,QAAA,GAGA3H,EAAAvF,IAMA2Q,EAAA1J,YAAA1D,EAAA0D,aAAA0J,EAAA1J,YACA0J,EAAA5E,QAAAxI,EAAAwI,SAAA4E,EAAA5E,QAEAxI,EAAAqI,aAAA+E,EACApN,EAAAQ,aACAR,EAAAsJ,eAAAtH,EAEAhC,EAAAsK,YAAA,SAAAC,GACA,GAAA5I,GAAA4I,EAAA5I,UACAC,EAAA2I,EAAA3I,cACA2I,GAAA5I,gBACA4I,GAAA3I,QAEA2I,EAAAC,WAAA,QACAD,EAAAxF,OAAA,mBACAwF,EAAAN,UAAAjI,EAEA2D,EAAA8E,QAAAF,GAAAzI,KAAAH,EAAAC,IAEA5B,EAAA6K,gBAAA,SAAAN,GACAA,EAAAxF,OAAA,mBACAwF,EAAAN,UAAAjI,EACA2D,EAAAoF,cAAAR,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,2BAAA+G,EAAArH,QAAAqH,EAAArG,OACAiK,EAAA5N,KAAAgO,YAGA3K,EAAA0K,aAAA,SAAAH,GACAA,EAAAxF,OAAA,mBACAwF,EAAAN,UAAAjI,EACAuI,EAAAC,WAAA,SACA7E,EAAA8E,QAAAF,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,4BAAA+G,EAAArH,QAAAqH,EAAArG,OACAiK,EAAA5N,KAAAgO,QAA0CC,QAAA,OAG1C5K,EAAAkL,gBAAA,SAAAX,GACAA,EAAAxF,OAAA,mBACAwF,EAAAN,UAAAjI,EACA2D,EAAAwF,cAAAZ,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,2BAAA+G,EAAArH,QAAAqH,EAAArG,UAGAN,EAAAoL,aAAA,SAAAb,GACAA,EAAAxF,OAAA,mBACAwF,EAAAN,UAAAjI,EACA2D,EAAA0F,WAAAd,GAAAzI,KAAA,cAAA6E,GACA5J,EAAA6C,MAAA,wBAAA+G,EAAArH,QAAAqH,EAAArG,UAGAN,EAAAsL,aAAA,SAAAf,GACAA,EAAAgB,OAAAxG,OAAA,mBACAhI,EAAAqD,MAAA,sBACArD,EAAAqD,MAAAmK,EAAAgB,SAEAvL,EAAAqN,sBAAA,EAEArN,EAAAsN,cACA/E,WACAgF,qBAAA,IAIAvN,EAAA2F,mBACAhJ,EAAAW,EAAAiB,KAAAyB,GACA6G,GAAiBlK,SACjBA,EAAA0H,OAAA,6BAAAL,GAEA,GADAhC,EAAAkL,iBAAAlJ,EAAAkJ,iBACAlN,EAAA2J,UAAA,GACA,IAAA1J,EAAAgF,aAAA,uBACAhF,EAAAgF,aAAA,uBACAtI,EAAAsI,aAAA,qBAGA,MAFAjD,GAAAkL,iBAAAtG,SACAxB,EAAAwB,OAAA,GAAAvG,OAAA,qEACA,MAGA+E,GAAAsB,QAAA1E,EAAAkL,kBACAlL,EAAAkL,iBAAA7I,OAAA,mBACArC,EAAAkL,iBAAA/M,SACiB,MAER,GAETuI,IAzFAtD,EAAAwB,OAAA,GAAAvG,OAAA,yDACAqI,KAkGA1G,EAAA2K,gBAAA,WAEA,GAAAa,GAAAxL,EAAAyK,YAAAnI,IAAA,SAAAwH,GACA,MAAAA,GAAA/F,UAGA,IAAA5F,SAAAgI,EACAnG,EAAA+D,SAAAoC,EAAAqF,OACS,CACT,GACAC,GADAC,GAAA,mDAUAD,GAAAzL,EAAAyK,YAAAkB,KAAA,SAAApJ,EAAAqJ,GACA,GAAAC,GAAAH,EAAApK,QAAAiB,EAAAwB,UACA+H,EAAAJ,EAAApK,QAAAsK,EAAA7H,SAIA,OAFA8H,GAAA,KAAAA,EAAA,IAAAA,EACAC,EAAA,KAAAA,EAAA,IAAAA,EACAA,EAAAD,EAAA,GAAAA,EAAAC,EAAA,MAIA9L,EAAA+D,SADA0H,EAAA,GACAA,EAAA,GAAA1H,SAEA,gBAcA/D,EAAA+J,cAAA,SAAA/L,GACA,GAAA8L,GAAA,IAEA,IADA9L,QACA,IAAAgC,EAAAyK,YAAA9H,UACA3E,EAAA8K,cAAA9I,EAAAyK,YAAA,KAAAzM,EAAA8K,cACA,MAAA9I,GAAAyK,YAAA,EAGA,KAAAzM,MAAA8K,aACA,SAAAzK,OAAA,oDAWA,OARA2B,GAAAyK,YAAAvH,MAAA,SAAAsC,GACA,MAAAA,GAAA/K,KAAAuD,EAAA8K,cACAgB,EAAAtE,GACA,IAEA,IAGAsE,GAGA9J,IR2jFM,SAAS/F,GSvnGfA,EAAAD,QAAA,SAAAgE,GACA,YAUA,SAAAoK,KACA,GAAApK,EAAA+N,WAAA,CACA,IACA/L,EAAAyD,WAAAzF,EAAA+N,WAAAC,OAAAC,KACAjM,EAAA8I,aAAA9K,EAAA+N,WAAAC,OAAAE,eACAlM,EAAAmM,UAAAnO,EAAA+N,WAAAC,OAAAG,UACa,MAAAjK,GACb,SAAA7D,OAAA6D,GAEAlC,EAAA1C,QAAAU,EAAA+N,WAAAzO,SAAAU,EAAA+N,WAAAK,KACApO,EAAA+N,WAAAC,OAAAK,UACArM,EAAAiI,UAAAjK,EAAA+N,WAAAC,OAAAK,aAES,CACT,IACArM,EAAAsM,GAAAtO,EAAAyF,WACAzD,EAAAuM,aAAAvO,EAAA8K,aACA9I,EAAAwM,uBAAAxO,EAAAwO,0BAAA,EACa,MAAAtK,GACb,SAAA7D,OAAA6D,GAEAlC,EAAA1C,QAAAU,EAAAV,SA9BAU,OACA,IAAAgC,KAkCA,OADAoI,KACApI,ITgpGM,SAAS/F,GUrqGfA,EAAAD,QAAA,SAAAgE,GACA,YA+BA,SAAAoK,KACA,GAAApK,EAAA+N,WAAA,CACA,IACA/L,EAAAmI,KAAAC,MAAApK,EAAA+N,WAAAK,MACa,MAAAlK,GACblC,EAAAhC,EAAA+N,WAAAK,KAEApM,EAAAwH,SAAAxJ,EAAA+N,WAAAC,OAAAxE,SACAxH,EAAAyM,aAAAzO,EAAA+N,WAAAC,OAAAC,KACAjM,EAAAkM,eAAAlO,EAAA+N,WAAAC,OAAAE,eACAlM,EAAAmM,UAAAnO,EAAA+N,WAAAC,OAAAG,UAEAnM,EAAA+C,SACA/C,EAAA+C,OAAA,YAGA2J,GAAAtM,QAAA,SAAAuM,GACA,OAAA3O,EAAA2O,KAAA3O,EAAA2O,GACA,SAAAtO,OAAA,mCAAAsO,KAIAC,EAAAxM,QAAA,SAAAuM,IACA,IAAA3O,EAAA2O,IAAA3O,EAAA2O,MACA3M,EAAA2M,GAAA3O,EAAA2O,MAtDA3O,OACA,IAAAgC,MAQA0M,GAAA,0DAQAE,GACA,wGACA,gEA0CA,OAvCA5O,GAAAtC,QAAA,MAsCA0M,IACApI,IV8sGM,SAAS/F,EAAQD,EAASM,GWzyGhC,GAAAW,GAAAX,EAAA,IACAgB,EAAAhB,EAAA,EAqBAL,GAAAD,QAAA,SAAAgE,GACA,YA+PA,SAAA6O,KACA,IAAAlJ,MAAA8F,cACA,SAAApL,OAAA,gEAUA,QAAAyO,KACA,IAAA9M,EAAA+M,WACA,SAAA1O,OAAA,uCA5QAL,OAEA,IAAAgC,GAAA1E,EAAAK,aAAAqC,GAOAQ,EAAAR,EAAAQ,WACAP,EAAA3C,EAAA4C,UAAAM,EAEA,KAAAwB,EAAAvF,GACA,SAAA4D,OAAA,sCAUA,IAAAsF,GAAA3F,EAAA2F,gBA2VA,cA1VA3F,GAAA2F,iBAQA3D,EAAAyK,eAOAzK,EAAAC,UAAA,gBACAD,EAAAqC,OAAA,OAAArE,EAAAmG,QAUAnE,EAAAqC,OAAA,UAAArE,EAAAqG,WACArE,EAAAqC,OAAA,QAAArE,EAAAoG,SACAnG,EAAAoE,OAAA,wBACArC,EAAAyK,uBAGAzK,GAAAxB,iBACAwB,GAAAqE,gBACArE,GAAAuK,iBACAvK,GAAAmE,aACAnE,GAAAoE,QAeApE,EAAAR,KAAA,WACA,GAGAE,GACA0D,EACAsD,EALA1I,GACAvD,GAAAuF,EAAAvF,GAMA,KACAoS,IACS,MAAAlI,GAIT,MAHAvB,GAAAnI,EAAAoI,QACAqD,EAAApL,EAAAmE,cAAA2D,EAAA1D,QAAA1B,EAAA2B,UAAA3B,EAAA4B,SACAwD,EAAAwB,OAAAD,GACA+B,EAKA,MAFAhH,GAAAzB,EAAAuB,KAAAxB,GACA0I,EAAApL,EAAAmE,cAAAC,EAAA1B,EAAA2B,UAAA3B,EAAA4B,UAgBAI,EAAA+G,MAAA,SAAA/I,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,QACAqD,EAAApL,EAAAmE,cAAA2D,EAAA1D,QAAA1B,EAAA2B,UAAA3B,EAAA4B,QAEA,KACAiN,IACAC,IACS,MAAAnI,GAET,MADAvB,GAAAwB,OAAAD,GACA+B,EAuBA,MApBA/C,GAAAqJ,YACAvS,GAAAuF,EAAAvF,KACSqF,KAAA,WAUT7B,EAAA4E,KAAA,SACAsC,MAAAnF,IAEAA,EAAAyK,eACArH,EAAAsB,WACS,WACTtB,EAAAwB,WAEA8B,GAaA1G,EAAAiK,aAAA,SAAAjM,GACAA,OAEA,KACA6O,IACAC,IACS,MAAAnI,GACT,OAGA,IAAA3G,EAAA8K,aACA,SAAAzK,OAAA,iEAGA2B,GAAAyK,YAAAvH,MAAA,SAAAsC,EAAAG,GACA,MAAAH,GAAA/K,KAAAuD,EAAA8K,cACA9I,EAAAyK,YAAA7H,OAAA+C,EAAA,GAUA3F,EAAA6C,KAAA,SACAiH,WAAAtE,KAEA,IAEA,KAUAxF,EAAA+M,SAAA,WAEA,MAAA/M,GAAAyK,YAAA9H,OAAA,IAAA3C,EAAAyK,YAAAvH,MAAA,SAAAsC,GACA,MAAAA,GAAA/K,KAAAwD,EAAA6K,gBAcA9I,EAAA6J,UAAA,SAAA7L,GACAA,OACA,IAAAsH,EAIA,IAFAuH,KAEA7O,EAAA8L,WACA,SAAAzL,OAAA,kEAOA,IAJAiH,EAAAtF,EAAAyK,YAAAvH,MAAA,SAAAsC,GACA,MAAAA,GAAA/K,KAAAuD,EAAA8L,WAAArP,KAGA,CAEA,GADAuF,EAAAyK,YAAA9M,KAAAK,EAAA8L,YACA9L,EAAAiP,UACA,MAYAjN,GAAA6C,KAAA,QACAiH,WAAA9L,EAAA8L,eAkDA9J,EAAAgI,YAAA,SAAAhK,GACAA,QACAA,EAAAvD,GAAAuF,EAAAvF,EACA,IAAAiF,EAEA,KACAmN,IACAC,IACS,MAAAnI,GACTjF,EAAAzE,EAAA2J,OAAAD,GAGA,MAAArJ,GAAAmE,cAAAC,IAAAiE,EAAAuJ,QAAAlP,GACAA,EAAA2B,UAAA3B,EAAA4B,UAgBAI,EAAAoF,WAAA,SAAApH,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,QACAqD,EAAApL,EAAAmE,cAAA2D,EAAA1D,QAAA1B,EAAA2B,UAAA3B,EAAA4B,QAEA,KACAiN,IACAC,IACS,MAAAnI,GAET,MADAvB,GAAAwB,OAAAD,GACA+B,EAmCA,MAhCA/C,GAAAwJ,iBACA1S,GAAAuF,EAAAvF,KACSqF,KAAA,SAAAsN,GACT,GAAA9C,KACA8C,GAAAhN,QAAA,SAAApC,GACA,GAAA8L,GAAA7L,EAAA8L,eACAtG,WAAAzF,EAAAyF,WACAqF,aAAA9K,EAAA8K,aACAsB,YAAA,GAGAN,KAEAA,EAAA7L,EAAA8L,eACAtG,WAAAzF,EAAAyF,WACAqF,aAAA9K,EAAA8K,gBAIA,KAAAwB,EAAAhJ,QAAAtD,EAAAyF,aACA6G,EAAA3M,KAAAK,EAAAyF,YAEAzD,EAAA6J,WACAC,aACAmD,WAAA,MAIA7J,EAAAsB,QAAA1E,EAAAyK,cACS,SAAA9F,GACTvB,EAAAwB,OAAAD,KAEA+B,GAGA1G,IXs1GM,SAAS/F,EAAQD,EAASM,GYhuHhC,GAcA+S,GAdAtS,EAAAT,EAAA,IACAW,EAAAX,EAAA,IACAgT,EAAAhT,EAAA,IACAgB,EAAAhB,EAAA,EAcA+S,GADAE,yBAAAF,IACAE,YAAAF,IAAAG,KAAAD,aACCE,KAAAJ,IACDI,KAAAJ,IAAAG,KAAAC,MAEA,WACA,UAAAA,OAAAC,UAUA,IAAAC,GAAA,WAMA,GAAAC,MAMAC,EAAA,EACA7N,IAoCA,OA3BAA,GAAA8N,IAAA,SAAAC,GAEA,MADAH,GAAAC,GAAAE,EACAF,KAQA7N,EAAAgO,OAAA,SAAArH,SACAiH,GAAAjH,IASA3G,EAAAiO,MAAA,SAAAC,GACAA,GACAN,EAAAxN,QAAA8N,GAEAN,MAGA5N,EAeA/F,GAAAD,QAAA,SAAAgE,GACA,YA+KA,SAAAmQ,KACA,SAAAC,aAAAC,YA0FA,QAAAC,GAAAtQ,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OAGA,OAFAtI,GAAAqD,MAAA,0BAAAJ,GAEAA,EAAAuF,OAKA5I,GACA4T,KAAA,qBACAC,WAAA,OACAC,YACAC,QAAA1Q,EAAAuF,SAESzD,KAAA,SAAA6O,GACT,MAAAA,EAAAC,MACAC,EAAAF,EAAAG,OAAAvL,MACAH,EAAAsB,UACA3J,EAAAqD,MAAA,+BAAAkF,EAAA2C,UAEA7C,EAAAwB,OAAA,GAAAvG,OAAA,gCAES,SAAAsG,GACT5J,EAAA6C,MAAA,uBAAA+G,EAAArH,SACA8F,EAAAwB,OAAA,GAAAvG,OAAA,iCAGA+E,EAAA1D,UAvBA0D,EAAAwB,OAAA,GAAAvG,OAAA,sDACA+E,EAAA1D,SA0kBA,QAAAqP,GAAAC,GACA,MAAAA,GAAA,GAAAC,cAAAD,EAAAE,MAAA,GA2eA,QAAA3E,GAAAjN,GACA,GAAA8J,GACAlC,CAEA,IAAA5H,EAAA0O,OAAAC,OAAAhO,EAAAwF,aAIA1I,EAAAqD,MAAA,qBAAAd,GAEA8J,EAAAnJ,EAAA4J,aACApN,GAAA6C,EAAA0O,OAAAC,KACAzN,aACA6B,KAAA/C,EAAA0O,OAAAC,KACAnC,WAAAxM,EAAA0O,OAAAE,iBAGA9E,EAAApD,aACA8E,aAAAxL,EAAA0O,OAAAE,eACAnI,SAAAzG,EAAA6R,OAGA,gBAAA/H,EAAAwD,eAAA,CACA,GAAA1F,GAAAjH,EAAAiM,WACAhF,IACAA,EAAA9E,QAAA,SAAA+E,GACAA,EAAA8E,cAAwCnB,aAAAxL,EAAA0O,OAAAE,oBAaxC,QAAAhG,KACA2I,EAAA1Q,OACAoF,EAAApF,OACAiR,EAAA,OAAAA,EAAA,OAAAA,EAEAA,EAAA,IACAA,EAAAC,GAGArM,WAAA,WACAG,IAAAU,KAAA,WAGA,MAFAuL,GAAA,KACArU,EAAAqD,MAAA,sBACAnD,EAAAgK,IAAAhH,EAAAiM,YAAA5H,IAAA,SAAA6C,GACAlH,EAAAuB,MACA/E,GAAA0K,EAAA1K,GACA4J,UAAAf,EAAAe,UACAF,OAAAb,EAAAa,OACAC,QAAAd,EAAAc,eAGatE,KAAA,WAMb7B,EAAA4E,KAAA,cACa,SAAA8B,GACb5J,EAAA6C,MAAA,mCAAA+G,EAAArH,QAAAqH,EAAArG,OACA4H,OAESkJ,GA2LT,QAAAE,GAAAtR,GACAA,OACA,IAIAuR,GAJAnM,EAAAnI,EAAAoI,QACAmM,EAAAnC,IAEAoC,EAAA,KAAAzR,EAAAuQ,KAAAjN,QAAA,kBAAAtD,EAAAuQ,KAAAjN,QAAA,YAGA,OAAAtB,GAAAyJ,cAKAzL,EAKAA,EAAAuQ,MAKAvQ,EAAAwQ,YAAAxQ,EAAAwQ,YAAA,OAAAkB,cAEA1R,EAAA2R,WACA3R,EAAAuQ,KAAAvQ,EAAAuQ,KAAAqB,QAAA,QAAA5R,EAAA2R,WAGAF,GACA1U,EAAAqD,MAAA,kBACAyR,OAAA7R,EAAAwQ,WACAD,KAAAvQ,EAAAuQ,KACAE,WAAAzQ,EAAAyQ,aAIAc,EAAAO,EAAAhC,IAAA1K,GACAgL,EAAA2B,KAAA/R,EAAAwQ,WAAArG,KAAAE,WACA2H,IAAAhS,EAAAuQ,KACA0B,KAAAjS,EAAAyQ,WACAyB,SAAsBC,YAAAtB,KACb,SAAAF,GACT,GAAAyB,GAAA/C,IAAAmC,CACAM,GAAA9B,OAAAuB,EAEA,KACAZ,EAAAxG,KAAAC,MAAAuG,GACa,MAAAzM,GAEb,MADAkB,GAAAwB,OAAA,GAAAvG,OAAA,yCACA,OAGAoR,GACA1U,EAAAqD,MAAA,mBACAyR,OAAA7R,EAAAwQ,WACAD,KAAAvQ,EAAAuQ,KACA6B,iBACAzB,aAIAA,KAAA/Q,MACAwF,EAAAwB,OAAA,GAAAvG,OAAAsQ,EAAA/Q,MAAA,IAAAI,EAAAwQ,WAAA,IAAAxQ,EAAAuQ,KAAA,MAEAnL,EAAAsB,QAAAiK,KAIAvL,EAAA1D,UAlDA0D,EAAAwB,OAAA,GAAAvG,OAAA,qBACA+E,EAAA1D,UANA0D,EAAAwB,OAAA,GAAAvG,OAAA,eACA+E,EAAA1D,UANA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,SA8EA,QAAA/E,GAAAqD,GAIA,GAAAoF,GAAAnI,EAAAoI,QACAgN,EAAA,KACAC,EAAA,KACA3B,GACAG,OAAA,KACAF,KAAA,MAEAY,EAAAnC,GAIA,IAFAiD,EAAAhN,EAAA2C,QAAAjI,EAAAuQ,MAEAvQ,EAEA,MADAoF,GAAAwB,OAAA,GAAAvG,OAAA,eACA,MAGA,KAAAL,EAAAwQ,WAEA,MADApL,GAAAwB,OAAA,GAAAvG,OAAA,oBACA,MAGA,KAAAL,EAAAuQ,KAEA,MADAnL,GAAAwB,OAAA,GAAAvG,OAAA,qBACA,MAeA,IAZAL,EAAA2R,WACA3R,EAAAuQ,KAAAvQ,EAAAuQ,KAAAqB,QAAA,QAAA5R,EAAA2R,YAGA,gBAAArO,QAAAtD,EAAAwQ,YAAA,KACA8B,GAAAC,EAAAvS,EAAAyQ,aAGA+B,EAAA5M,KAAA5F,EAAAwQ,WAAA8B,GACAzB,GACA2B,EAAAC,iBAAA,YAAA5B,IAEA,cAAAvN,QAAAtD,EAAAwQ,YAAA,GACA6B,EAAAlI,KAAAE,UAAArK,EAAAyQ,YACA+B,EAAAC,iBAAA,qDACS,0BAAAnP,QAAAtD,EAAAwQ,YAET,MADApL,GAAAwB,OAAA,GAAAvG,OAAA,+BAAAL,EAAAwQ,aACA,MAEAzT,GAAAqD,MAAA,WACAyR,OAAA7R,EAAAwQ,WACA8B,MACAtS,OAAAqS,GAGA,KACAG,EAAAE,KAAAL,GACS,MAAA1L,GAET,MADAvB,GAAAwB,OAAAD,GACA,OAmCA,MAhCA6L,GAAAG,mBAAA,WACA,GAAAP,GAAA/C,IAAAmC,CACA,QAAApV,KAAAwW,WAAA,CAGA,OAAAxW,KAAAyW,OAEA,MADAzN,GAAAwB,OAAA,GAAAvG,OAAA,+DACA,MAEA,wCAAAiD,QAAAlH,KAAAyW,QAAA,IAmBA,MADAzN,GAAAwB,OAAA,GAAAvG,OAAA,uBAAAjE,KAAAyW,SACA,MAfA,IAHAlC,EAAAC,KAAAxU,KAAAyW,OACAlC,EAAA2B,MACA3B,EAAA3Q,SAAAyQ,WACArU,KAAAuU,SACA,IACAA,EAAAG,OAAA3G,KAAAC,MAAAhO,KAAAuU,UACqB,MAAAzM,GACrByM,EAAAG,OAAA1U,KAAAuU,SACAA,EAAA/Q,MAAA,gBAGA7C,EAAAqD,MAAA,YACAyR,OAAA7R,EAAAwQ,WACA4B,iBACAzB,aACAvL,EAAAsB,QAAAiK,KAOAvL,EAAA1D,QAYA,QAAA6Q,GAAAvS,GACA,GAAA8S,KACA,OAAA9S,IAIAkC,OAAAC,KAAAnC,GAAAoC,QAAA,SAAAC,GACA,GAAA0Q,GAAA/S,EAAAqC,EAEA0Q,aAAA5R,OACA2R,EAAAnT,MAAA0C,EAAA0Q,EAAAvR,KAAA,MAAAA,KAAA,MACa,gBAAAuR,IAAA,kBAAAA,IACbD,EAAAnT,MAAA0C,EAAA0Q,GAAAvR,KAAA,QAIAsR,EAAAnO,OAAA,EACA,IAAAmO,EAAAtR,KAAA,KAEA,IAhBA,GA7wDAxB,OAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAK,aAAAqC,SACAgC,GAAAxB,WAOAwB,EAAAC,UAAA,0BAQA,IAAAhC,GAAA3C,EAAA4C,UAAAM,GAOA4P,EAAA,KAOA9K,EAAAtF,EAAAsF,qBACAtD,GAAAsD,eACAA,EAAA2C,QAAA3C,EAAA2C,SAAA,yBAQAjG,EAAAgR,uBAAA1N,EAAA8C,qBAQA,IAAA6K,MASA9N,EAAA,KAMA2M,EAAAnC,IAOAyB,EAAA,KAOAC,EAAA,IAqBA9L,EAAA,KAOAsL,EAAA,KAOA2B,EAAA,GAAAU,gBASAC,KAOAC,GACA9T,WACAsL,UACA7E,YAwBA/D,GAAAyJ,YAAA,WACA,SAAA2E,aAAAiD,YAyBArR,EAAA4D,KAAA,SAAA5F,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OAuBA,OAtBAtI,GAAAqD,MAAA,wBAAAJ,EAAAsF,GACAC,EAAAvF,EAAAuF,SACAJ,EAAA,kBAAAnF,GAAAmF,gBAAAnF,EAAAmF,kBAEAlI,EAAAqW,MAAA,WACA,MAAAhO,GAAAI,mBAAA,GAAAJ,EAAAE,OAAAxF,EAAAyF,WACAzD,EAAAuR,UACA/N,MAAAF,EAAAE,MACAC,WAAAzF,EAAAyF,aAGA,OACSI,KAAA,SAAA2N,GAET,MADAjO,GAAAiO,GAAAjO,EACA+K,GAA2B/K,YAClBzD,KAAA,WACTsD,EAAAsB,UACA3J,EAAAqD,MAAA,SAAAH,IACS,SAAA0G,GACTvB,EAAAwB,OAAAD,KAGAvB,EAAA1D,SAaAM,EAAAuR,SAAA,SAAAvT,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OACAtI,GAAAqD,MAAA,4BAAAJ,EAEA,IAAAyT,IACAlD,KAAA,aACAC,WAAA,OACAC,YACAjL,MAAAF,EAAAE,MACAC,WAAAzF,EAAAyF,WACAiO,IAAA,OAeA,OAXA/W,GAAA8W,GAAA3R,KAAA,SAAA6O,GACA,aAAAA,EAAAC,MAAAD,EAAAG,QAAAH,EAAAG,OAAAJ,SACAnL,EAAAoL,EAAAG,OAAAJ,QACAtL,EAAAsB,QAAAiK,EAAAG,OAAAJ,SACA,SAEAtL,EAAAwB,OAAA,GAAAvG,OAAA,yCAAA+E,SACS,SAAAuB,GACT5J,EAAA6C,MAAA,uBAAA+G,EAAArH,SACA8F,EAAAwB,OAAA,GAAAvG,OAAA,2CAEA+E,EAAA1D,SAoDAM,EAAAiH,MAAA,SAAAjJ,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OAmBA,OAjBAiM,IACAf,KAAA,sBACAC,WAAA,SACAmB,SAAA1R,EAAAwF,aACSuD,IAAA,WACT,MAAArM,IACA4T,KAAA,qBACAC,WAAA,aAESxH,IAAA,WACToH,IACAA,EAAAuD,qBACAvD,EAAAxH,cAEAxD,EAAAsB,YACS5E,OAETsD,EAAA1D,SAeAM,EAAAkH,aAAA,SAAAlJ,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OAGA,OAFAtI,GAAAqD,MAAA,0BAEA4B,EAAAyJ,eAKA6F,GACAf,KAAA,eACAC,WAAA,OACAC,YACA1K,UACA6N,KAAA5T,EAAA4T,KACAf,OAAA7S,EAAA6S,OACA1B,KAAAnR,EAAA+F,UAAA,gBAGSjE,KAAA,WACTsD,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAAD,KAEAvB,EAAA1D,UAnBA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D;EA8BAM,EAAA2J,SAAA,SAAA3L,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OAGA,OAFAtI,GAAAqD,MAAA,6BAEA4B,EAAAyJ,eAKA6F,GACAd,WAAA,OACAD,KAAA,gBACAE,YACApO,KAAArC,EAAAqC,QAESwD,KAAA,SAAAsB,GACT/B,EAAAsB,QAAAS,IACS,WAET/B,EAAAsB,SAA8BjK,GAAAuD,EAAAqC,SAG9B+C,EAAA1D,UAjBA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,UA4BAM,EAAAgN,WAAA,SAAAhP,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OAEA,OAAArD,GAAAyJ,eAKA6F,GACAf,KAAA,+BACAoB,SAAA3R,EAAAvD,GACA+T,WAAA,WACS1O,KAAA,WACTsD,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAAD,KAGAvB,EAAA1D,UAdA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,UAyBAM,EAAA0J,UAAA,SAAA1L,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,OAEA,OAAArD,GAAAyJ,eAKA6F,GACAf,KAAA,+BACAoB,SAAA3R,EAAAvD,GACA+T,WAAA,SACS1O,KAAA,WACTsD,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAAD,KAGAvB,EAAA1D,UAdA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,UA0BAM,EAAAkN,QAAA,SAAAlP,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,QACA/F,EAAAhC,EAAAU,aACAyH,WAAAzF,EAAAvD,GACA6C,QAAAU,EAAAV,SAGA,OAAA0C,GAAAyJ,eAKA6F,GACAf,KAAA,2BACAoB,SAAA3R,EAAAvD,GACA+T,WAAA,OACAC,WAAAnR,IACSwC,KAAA,WACTsD,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAAD,KAEAvB,EAAA1D,UAdA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,UAwBAM,EAAAqK,iBAAA,SAAArM,GACA,MAAAgC,GAAAyJ,cAIA6F,GACAd,WAAA,OACAD,KAAA,wBACAE,YACAnE,aAAAtM,EAAAsM,gBAESzG,KAAA,WACT7F,EAAAsM,aAAAlK,QAAA,SAAA3F,GACAwW,EAAAxW,IAAA,MAXAQ,EAAA2J,OAAA,GAAAvG,OAAA,kEAyBA2B,EAAAmN,gBAAA,SAAAnP,GACA,GACA0B,GADA0D,EAAAnI,EAAAoI,OAGA,OAAArD,GAAAyJ,cAKAzL,EAAAvD,IAKAiF,EAAA4P,GACAf,KAAA,+BACAoB,SAAA3R,EAAAvD,GACA+T,WAAA,QAGA9O,EAAAI,KAAA,SAAAsN,GACAA,EAAAhN,QAAA,SAAApC,GACAiT,EAAAjT,EAAAyF,aAAA,MAGA/D,IAfA0D,EAAAwB,OAAA,GAAAvG,OAAA,kDACA+E,EAAA1D,UANA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,UAiCAM,EAAAgI,YAAA,SAAAhK,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,QACA/F,EAAAhC,EAAAU,aACAyH,WAAAzF,EAAAiK,UAAAxN,GACAqO,aAAA9K,EAAA8K,aACAxL,QAAAU,EAAAV,SAGA,OAAA0C,GAAAyJ,eAKA6F,GACAf,KAAA,eACAC,WAAA,OACAC,WAAAnR,IACSwC,KAAA,WACTsD,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAAD,KAEAvB,EAAA1D,UAbA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,UAwBAM,EAAA6R,QAAA,SAAA7T,GACA,GAAAoJ,EAGA,OAFApJ,SAEAgC,EAAAyJ,cAIAzL,EAAA4K,QAIAxB,EAAAnJ,EAAA4J,aAAuCpN,GAAAuD,EAAA4K,OAAA6D,eACvCrF,EAIApH,EAAA8R,YACA7J,UAAAb,EACAoB,WAAA,MACAuJ,SAAA/T,EAAA4K,OAAAmJ,SACA5G,UAAAnN,EAAA4K,OAAAuC,UACApI,OAAA/E,EAAA4K,OAAA7F,OACAiP,gBAAAhU,EAAA4K,OAAAJ,aATAvN,EAAA2J,OAAA,GAAAvG,OAAA,yCALApD,EAAA2J,OAAA,GAAAvG,OAAA,yCAJApD,EAAA2J,OAAA,GAAAvG,OAAA,kEA+BA2B,EAAA8R,WAAA,SAAA9T,GACAA,OACA,IACA4K,GACA0D,EACAC,EACA3E,EAJAxE,EAAAnI,EAAAoI,OAMA,KAAArD,EAAAyJ,cAEA,MADArG,GAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,OAGA1B,GAAArD,OACAqD,EAAAmN,UAAAnN,EAAArD,KAAAF,GACAuD,EAAArD,KAAAmO,eACA9K,EAAA8K,aAAA9K,EAAArD,KAAAmO,eAIAwD,EAAAtO,EAAAiK,UAAAxN,GACA8R,EAAAvO,EAAA8K,aACAlB,EAAA5J,EAAA4J,QAAA,KAEA,KACA5J,EAAA+T,SAAAzW,EAAAwD,WAEA8J,EAAAtN,EAAAW,iBAAA+B,GACS,MAAAkE,GAET,MADAkB,GAAAwB,OAAA1C,GACAkB,EAAA1D,QAkBA,MAfA4P,IACAf,KAAA,gBACAC,WAAA,OACAC,YACA7F,OAAAT,KAAAE,UAAAO,GACA0D,KACAC,eACA3E,YAES9H,KAAA,WACTsD,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAAD,KAGAvB,EAAA1D,SAcAM,EAAAmJ,cAAA,SAAAnL,GAIA,MAHAA,SACAA,EAAAwK,WAAA,gBAEAxI,EAAAyJ,cAIAzJ,EAAA8R,WAAA9T,GAHA/C,EAAA2J,OAAA,GAAAvG,OAAA,kEAiBA2B,EAAAyI,QAAA,SAAAzK,GAGA,MAFAA,SAEAgC,EAAAyJ,cAIA,wBAAAnI,QAAAtD,EAAAwK,YACAvN,EAAA2J,OAAA,2BAGA5E,EAAA8R,WAAA9T,GAPA/C,EAAA2J,OAAA,GAAAvG,OAAA,kEAmBA2B,EAAAwJ,WAAA,SAAAxL,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,QACA/F,GACA2U,UAAAjU,EAGA,OAAAsF,GAAA8C,sBAMApG,EAAAyJ,eAKA6F,GACAf,KAAA,kBACAC,WAAA,OACAC,WAAAnR,IACSwC,KAAA,WACTsD,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAAD,KAGAvB,EAAA1D,UAdA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,UAPA3E,EAAAqD,MAAA,sCACAgF,EAAAsB,UACAtB,EAAA1D,UAgCAM,EAAAqJ,WAAA,SAAArL,GAIA,MAHAA,SACAA,EAAAwK,WAAA,MAEAxI,EAAAyJ,cAIAzJ,EAAA8R,WAAA9T,GAHA/C,EAAA2J,OAAA,GAAAvG,OAAA,kEAeA2B,EAAA+I,cAAA,SAAA/K,GAIA,MAHAA,SACAA,EAAAwK,WAAA,YAEAxI,EAAAyJ,cAIAzJ,EAAA8R,WAAA9T,GAHA/C,EAAA2J,OAAA,GAAAvG,OAAA,kEAgBA2B,EAAAiJ,WAAA,SAAAjL,GAIA,MAHAA,SACAA,EAAAwK,WAAA,SAEA,oCAAAlH,QAAAtD,EAAAkU,QACAjX,EAAA2J,OAAA,qCAGA5E,EAAAyJ,cAIAzJ,EAAA8R,WAAA9T,GAHA/C,EAAA2J,OAAA,GAAAvG,OAAA,kEAiCA2B,EAAAmS,YAAA,SAAAvJ,GACA,GAAA7F,GAAA,KACA8M,EAAA,IAMA,IAJA,kBAAAjH,EAAAJ,YACAzN,EAAAqD,MAAAwK,EAAAJ,WAAAI,GAGAzK,SAAAyK,EAAA7F,OACA,SAAA1E,OAAA,mBAIApD,GAAAqW,MAAA,WACA,GAAAlK,EAaA,OANArE,GAAA9E,EAAAkJ,SACA1M,GAAAmO,EAAAuC,UACA1H,WAAAmF,EAAA6D,aACAjF,SAAAoB,EAAApB,SACAD,OAAA,SAAAqB,EAAA7F,QAAA,UAAA6F,EAAAJ,aAEAzF,EACAA,EAGA,qBAAA6F,EAAA7F,QAEAqE,EAAAnJ,EAAA4J,aACApN,GAAAmO,EAAA6D,eAGArF,EAAA8D,kBAAA9D,EAAA8D,iBAAAvQ,KAAAF,KAAAmO,EAAAuC,UACA/D,EAAA8D,iBAGA9D,EAAA2D,uBACAtQ,GAAAmO,EAAAuC,UACA5D,OAAA,UAAAqB,EAAAJ,WACAb,OAAA,UAAAiB,EAAAJ,cAbA,SAgBS1I,KAAA,SAAAiD,GAKT,MAHAA,KACAA,IAAApI,MAAAoI,GAEAA,KAAAtI,KAAAmO,EAAAuC,WAMA0E,GAAAd,EAAAnG,EAAAJ,YACA2I,EAAAtB,IACAlV,KAAAoI,EACA6F,WAHAiH,SAJA9U,EAAA0H,KAAA,yCAAAmG,GACA,SAQS,OAWTuI,EAAAiB,QAAA,SAAApU,GACAA,EAAArD,KAAAmO,aAAA9K,EAAA4K,OAAAsD,eAQAlO,EAAArD,KAAAkI,KAAA,gBACA+F,OAAA5K,EAAA4K,UAYAuI,EAAAkB,YAAA,SAAArU,GAQAA,EAAArD,KAAAkI,KAAA,oBACA+F,OAAA5K,EAAA4K,UAYAuI,EAAAmB,SAAA,SAAAtU,GAQAA,EAAArD,KAAAkI,KAAA,iBACA+F,OAAA5K,EAAA4K,UAYAuI,EAAAoB,SAAA,SAAAvU,GACAA,EAAArD,KAAAmO,aAAA9K,EAAA4K,OAAAsD,eAQAlO,EAAArD,KAAAkI,KAAA,iBACA+F,OAAA5K,EAAA4K,UAYAuI,EAAAqB,gBAAA,SAAAxU,GAQAA,EAAArD,KAAAkI,KAAA,wBACA+F,OAAA5K,EAAA4K,UAYAuI,EAAAsB,MAAA,SAAAzU,GAMAA,EAAArD,KAAAmO,cAAA9K,EAAArD,KAAAmO,eAAA9K,EAAA4K,OAAAsD,gBAUAlO,EAAArD,KAAAkI,KAAA,iBACA+F,OAAA5K,EAAA4K,UAWAuI,EAAAuB,UAAA,SAAA1U,GACAjD,EAAA6C,MAAA,6BAAAI,EAAA4K,OAAA7F,OAAA,sBAAA/E,EAAA4K,OAAAJ,aAaAxI,EAAA2S,WAAA,SAAA3U,GACAoQ,mBAAAxK,KACAwK,EAAAwE,GAAA5U,EAAAmR,KAAAnR,EAAA6U,SAEAzB,EAAApT,EAAAmR,MAAAxR,KAAAK,EAAA6U,SAaA,IAAAC,GAAA,SAAAxV,GACA,GAAA6H,GACA4N,CAEAzV,GAAA0O,OAAAC,OAAAhO,EAAAwF,aAIAsP,EAAAzX,EAAAU,aACA+P,WAAAzO,IAGA6H,EAAAlH,EAAA0L,UAAiClP,GAAA6C,EAAA0O,OAAAK,UACjClH,GAQAA,EAAAtC,KAAA,WACAvF,QAAAyV,IAcA9U,EAAA4E,KAAA,WACAvF,QAAAyV,EACA5N,SAAA,SAWAhB,EAAA,SAAA7G,GACA,GAAA6H,GAEAiC,EACA0C,CAEA,IAAAxM,EAAAwL,eAAA7K,EAAA6K,aACAgB,EAAA7L,EAAA8L,eAA+CjB,aAAAxL,EAAAwL,aAAArF,WAAAnG,EAAAmG,aAC/C0B,EAAAlH,EAAA0L,UAAqClP,GAAA6C,EAAA0O,OAAAK,UACrClH,IACAA,EAAA7J,EAAAY,OACAzB,GAAA6C,EAAA0O,OAAAK,QACA7N,aACAmF,iBAAA3D,IAEA/B,EAAA2L,SAAAzE,IAEAA,EAAA4H,aACA5H,EAAA0E,WAAiCC,eACjC7L,EAAA4E,KAAA,QACAsC,eAGS,CAUT,GARAiC,EAAAnJ,EAAA4J,aACApN,GAAA6C,EAAAmG,WACAjF,aACA6B,KAAA/C,EAAAmG,cAKAnG,EAAA0O,OAAAK,QAAA/K,QAAA,eAAAwI,KACA1C,EAAApD,aACA8E,aAAAxL,EAAAwL,eAEAgB,EAAA7L,EAAA8L,eACAjB,aAAAxL,EAAAwL,aACArF,WAAAnG,EAAAmG,aAEAnG,EAAA0O,OAAAK,QAAA/K,QAAA,cAEA,MADAvG,GAAA6C,MAAA,oDAAAN,GACA,MAIA6H,GAAAlH,EAAA0L,UAAqClP,GAAA6C,EAAA0O,OAAAK,UAErClH,GAAA2E,EACA3E,EAAA0E,WAAiCC,eAEjC/O,EAAA6C,MAAA,+BAAAN,EAAA6H,EAAAiC,EAAA0C,KAYA1F,EAAA,SAAA9G,GACA,GAAA6H,GAEAiC,CACA9J,GAAAwL,eAAA7K,EAAA6K,cACA3D,EAAAlH,EAAA0L,UAAqClP,GAAA6C,EAAA0O,OAAAK,UACrCpO,EAAA4E,KAAA,SACAsC,YAIAiC,EAAAnJ,EAAA4J,aACApN,GAAA6C,EAAAmG,aAGA2D,EAAAqD,YAAAvH,MAAA,SAAAsC,EAAAG,GACA,MAAAH,GAAA/K,KAAA6C,EAAAwL,cACA1B,EAAAqD,YAAA7H,OAAA+C,EAAA,IACA,IAEA,IAGAR,EAAAlH,EAAA0L,UAAqClP,GAAA6C,EAAA0O,OAAAK,UACrClH,EAAA8E,cAAgCnB,aAAAxL,EAAAwL,iBAahCzE,EAAA,SAAA/G,GACA,GAAA8J,EACA9J,GAAAhC,EAAAU,aAAuC+P,WAAAzO,IACvCA,EAAAmG,aACA2D,EAAAnJ,EAAA4J,aACApN,GAAA6C,EAAAmG,WACA2G,YAAA,KAGAhD,GAQAA,EAAAvE,KAAA,WACAvF,YAaAW,EAAA4E,KAAA,WACAuE,YAAA,KACA9J,aAcA0V,EAAA,SAAArT,EAAAC,GAGA,MAFAD,MAAA,aACAC,KAAA,aACA,WACAM,OAAAC,KAAAiR,GAAAhR,QAAA,SAAA6S,GACA7B,EAAA6B,KAIA7B,EAAA6B,GAAA7S,QAAA,SAAAyS,GACAzE,EAAAwE,GAAAK,EAAAJ,KAEAzB,EAAA6B,SAGA3D,GACAf,KAAA,kBACAC,WAAA,SACa1O,KAAA,SAAAoT,GACbnY,EAAAqD,MAAA,qBAAA8U,GACAjV,EAAAwF,WAAAyP,EAAAzP,WACAxF,EAAA6K,aAAAoK,EAAAzY,GACAkF,KACaC,IAseb,OAzYAI,GAAA8D,aAAA,SAAA9F,GACAA,OACA,IAAAoF,GAAAnI,EAAAoI,QACA8P,KACAC,EAAA,KACAC,EAAA,KACArN,EAAA,IAEA6I,IACAzL,EAAAwB,OAAA,GAAAvG,OAAA,iDAGA8U,EAAA7P,EAAA2C,QAAAhH,MAAA,SACAmU,EAAAD,EAAA,GACAA,IAAA,GAAAlU,MAAA,KACAoU,EAAAF,EAAA,GACAnN,EAAAmN,EAAA,EAMA,IAAAG,IACAC,kBAAA,IACAC,wBAAA,EACAC,6BAAA,EACAvN,WAAA,EACAmN,OACArN,QAAA,MACAoN,WACAM,OAAA,UAAAN,EACAO,MAAA,aAAA9E,EAGA,OAAA7O,GAAAyJ,eAAA0E,IAAA,QAGAC,EAAAd,EAAAvP,QAAAuF,EAAA2C,QAAA,cAAA4I,EAAAyE,GAEAlF,EAAAwE,GAAA,UAAAI,EAAA,WACA5P,EAAAsB,WACS,SAAAC,GACTvB,EAAAwB,OAAAD,MAGAyJ,EAAAwE,GAAA,OAAAzO,GACAiK,EAAAwE,GAAA,QAAAxO,GACAgK,EAAAwE,GAAA,SAAAE,GACA1E,EAAAwE,GAAA,UAAAvO,GACA+J,EAAAwE,GAAA,WAAArI,GAGA6D,EAAAwE,GAAA,0BAAAM,GACA9P,EAAAwB,OAAA,GAAAvG,OAAA,iCACAtD,EAAA6C,MAAA,6BAAAsV,GAAA,IACAhN,MAIAkI,EAAAwE,GAAA,iBAAAM,GACAnY,EAAAqD,MAAA,4BAAA8U,GAAA,IACAhN,MAGAlG,EAAA2S,YACAxD,KAAA,SACA0D,QAAA,SAAAvV,GACA,GAAAsW,IAAA,6DACAhL,EAAAtN,EAAAW,kBACA8P,WAAAzO,GAGA,YAAAsL,EAAAJ,WAAA,CAIA,IAAAI,EAAA7F,SAAA6F,EAAAJ,YAAA,KAAAoL,EAAAtS,QAAAsH,EAAAJ,YAEA,KADAzN,GAAA6C,MAAA,wBAAAgL,GACA,GAAAvK,OAAA,6CAGA2B,GAAAmS,YAAAvJ,OAIAwF,EAAAwE,GAAA,wBAaA,MAZA9C,GAAA7B,MAAA,SAAA4F,GACA9Y,EAAAqD,MAAA,4BACAyV,EAAAjP,OAAA,GAAAvG,OAAA,6BAQAJ,EAAA4E,KAAA,cAEAS,EAAA4C,aAAA,GACAkI,EAAA,KACA,SAEAlI,cAGA9C,EAAA1D,UAYAM,EAAA8T,mBAAA,WACA,GAAA1Q,GAAAnI,EAAAoI,OAEA,OAAArD,GAAAyJ,eAKA6F,GACAd,WAAA,MACAD,KAAA,aACSzO,KAAA,SAAAiU,GACT,GAAAjF,KAEA,OAAAiF,MAAAC,MAKAD,EAAAC,KAAA5T,QAAA,SAAAkQ,GACA,GAAA2D,GAAA,IAEA3D,KAIA2D,EAAAC,gBAAA5D,EAAAyD,EAAAI,SAAAJ,EAAAK,UACAtF,EAAAnR,KAAAsW,MAGA,IAAAnF,EAAAnM,QACAS,EAAAwB,OAAA,GAAAvG,OAAA,6BAGAtD,EAAAqD,MAAA,aAAA0Q,GACA1L,EAAAsB,QAAAoK,GAhBAiF,SAJA3Q,EAAAwB,OAAA,GAAAvG,OAAA,4BACA,SAoBS,SAAAsG,GACTvB,EAAAwB,OAAAD,KAGAvB,EAAA1D,UApCA0D,EAAAwB,OAAA,GAAAvG,OAAA,iEACA+E,EAAA1D,UA+QAM,IZqwHM,SAAS/F,EAAQD,EAASM,GaxoLhC,GAAAS,GAAAT,EAAA,IACAW,EAAAX,EAAA,IACAgB,EAAAhB,EAAA,EA+BAL,GAAAD,QAAA,SAAAgE,GACA,YAqEA,SAAAqW,GAAArS,GACAsS,EAAAtS,EAAAqK,QACAiI,EAAAjX,QAAAkX,EACAD,EAAAE,UAAAC,EACA,SAAAH,EAAA1D,YACA0D,EAAAI,OAAA,KACAC,KAEAL,EAAAI,OAAAC,EAwBA,QAAAC,GAAA5W,GAQAgC,EAAAqC,OAAA,OAAArE,EAAA6W,QAQA7U,EAAAqC,OAAA,QAAArE,EAAA8W,SAUA9U,EAAAqC,OAAA,UAAArE,EAAAqG,WAEArE,EAAAqC,OAAA,QAAArE,EAAA+W,SASA/U,EAAAqC,OAAA,QAAArE,EAAA4B,SACAoV,EAAA3S,OAAA,oBAAAgS,GAAA,GACAW,EAAA3S,OAAA,iBAAAL,GAUAhC,EAAA6C,KAAA,SAAgCoS,MAAAjT,EAAAiT,UACvB,GA6CT,QAAAV,GAAA3W,GASAoC,EAAA6C,KAAA,SACAjF,UAEAoC,EAAAiH,QAWA,QAAAwN,GAAAzS,GACA,GAAA1E,EACA,KACAA,EAAA6K,KAAAC,MAAApG,EAAAiO,MACS,MAAA/N,GACT5E,EAAA0E,EAAAiO,KAUAjQ,EAAArF,KAAA2M,eAAAzE,KAAA,WACAvF,UACA4N,iBAAAlL,IAUAA,EAAA6C,KAAA,WACAvF,UACA8J,SAAApH,EAAArF,KAAA2M,iBAYA,QAAAqN,KAQA3U,EAAA6C,KAAA,QA6BA,QAAAqS,KACAZ,EAAAU,EAAAE,kBAAA,sBACAZ,EAAAa,WAAA,cACAb,EAAAjX,QAAAkX,EACAD,EAAAE,UAAAC,EACAH,EAAAI,OAAAC,EAUA3U,EAAA6C,KAAA,SAvTA7E,OAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAK,aAAAqC,SACAgC,GAAAxB,WAQAwB,EAAAC,UAAA,2BAQAD,EAAAvF,GAAAa,EAAAwD,WAOAkB,EAAArF,KAAAgN,SACA3H,EAAArF,KAAAgN,QAAA,EASA,IAAA2M,GAAA,KAeAU,GARA1Z,EAAA4C,UAAAM,GAQAR,EAAAgX,GAsXA,cArXAhX,GAAAgX,GA+FAJ,EAAA5W,SAEAgC,GAAA6U,aACA7U,GAAA8U,cACA9U,GAAAqE,UAmBArE,EAAAoV,SAAA,SAAApX,GACA,MAAAgX,MAAAI,UACApV,EAAAqC,OAAA,QAAArE,EAAAqX,eACArX,GAAAqX,QACAL,EAAAI,SAAApX,IAEA,MAGA1C,EAAAga,kBACAtV,GAAAoV,SA6IApV,EAAAuV,OAAA,SAAAvX,GACAA,QACAjD,EAAAqD,MAAA,2BACAwW,EAAA5W,GAEAjD,EAAAqD,MAAA,SAAA4W,EAAAQ,MAAA7N,OAAA,0BAEAqN,EAAAQ,MAAA7N,UAAA,GACAuN,IAEAlV,EAAArF,KAAA8a,SAQAzV,EAAA6C,KAAA,WASA7C,EAAAiH,MAAA,SAAAjJ,GACAA,QACAjD,EAAAqD,MAAA,0BACAkW,GACAA,EAAArN,QASAjH,EAAA6C,KAAA,SAEA7C,EAAA0C,SAEA1E,EAAA0X,cAAA,GACA1V,EAAArF,KAAAgb,yBAGArB,EAAA,KACAtU,EAAArF,KAAA2M,eAAA4D,iBAAA,KACAlL,EAAArF,KAAA,KACAqa,EAAA,MAkBAhV,EAAAgI,YAAA,SAAAhK,GACA,GAAAoF,GAAAnI,EAAAoI,QACAqD,EAAApL,EAAAmE,cAAA2D,EAAA1D,QAAA1B,EAAA2B,UAAA3B,EAAA4B,QASA,OARAI,GAAA4V,YACAtB,EAAA5D,KAAAvI,KAAAE,UAAArK,EAAA6X,SACAvY,QAAAU,EAAAV,WAEA8F,EAAAsB,WAEAtB,EAAAwB,OAAA,GAAAvG,OAAA,sCAEAqI,GAUA1G,EAAA4E,OAAA5E,EAAAiH,MAQAjH,EAAA4V,SAAA,WAGA,MAAAtB,IAAA,SAAAA,EAAA1D,YAGA5Q,IbytLM,SAAS/F,EAAQD,EAASM,Gc3qMhC,GAAAS,GAAAT,EAAA,IACAW,EAAAX,EAAA,IACAgB,EAAAhB,EAAA,EA+BAL,GAAAD,QAAA,SAAAgE,GACA,YAoJA,SAAAkL,GAAAlL,GACAgX,IAIAhX,EAAA8X,eAAA9X,EAAA+X,WACAC,EAAAhY,GACAgC,EAAAuJ,OAAA0M,eAAAtY,MAAyCoY,UAAA/X,EAAA+X,aAqDzC,QAAAG,KACAlB,IAIAja,EAAA0J,KAAA,iBAAA6G,GACA0J,EAAAmB,YAAAC,EAAA,WACArb,EAAA6C,MAAA,uBACS0N,IAuGT,QAAA8J,GAAApX,GASA,QAAAsG,KACA,GAAA2Q,GAAA3Z,EAAA+a,kBACAC,eAAAtB,EACAuB,SAAAvY,EAAAuY,SACAlB,QAAA,SAAAJ,GACAD,IAWAhV,EAAA6C,KAAA,SACAoS,UAEAjV,EAAAuJ,OAAA0L,MAAAtX,KAAAsX,MAGAjV,GAAAqC,OAAA,mBACA4S,EAAAuB,cACa,GACbpT,EAAAsB,UAjCA,GAAAtB,GAAAnI,EAAAoI,QACAqD,EAAApL,EAAAmE,cAAA2D,EAAA1D,QAAA1B,EAAA2B,UAAA3B,EAAA4B,QAEA,OAAAtE,GAAAga,YAiCAN,EAGA1Q,IAFAtE,EAAAvB,KAAA,kBAAA6F,GAKAoC,IAtCAtD,EAAAwB,OAAA,GAAAvG,OAAA,qCACAqI,GAmLA,QAAA+P,GAAAC,GACA,GAAAX,GAAAW,EAAAX,SACA,IAAAA,eAIA,MAAA/V,GAAA2W,aAAA,QAAAZ,YAAAzU,QAAA,cACAvG,EAAAqD,MAAA,+CACA,SAGA4B,EAAAwV,MAAAoB,SAAA5W,EAAAwV,MAAAqB,mBAGA3N,GACA6M,YACApb,KAAAqF,EAAArF,OAJAmc,EAAAnZ,KAAAoY,GADA,QAgBA,QAAAgB,KACAhc,EAAA0H,KAAA,uBAUA,QAAAuU,KAMA,OAAA3X,GAAA,EAAuBA,EAAAyX,EAAAnU,OAAkCtD,GAAA,EACzD6J,GACA6M,UAAAe,EAAAzX,GACA1E,KAAAqF,EAAArF,MAGAmc,KACA,QAAAzX,GAAA,EAAuBA,EAAA4X,EAAAtU,OAAoCtD,GAAA,EAC3DW,EAAAkX,oBACAnB,UAAAkB,EAAA5X,GACA8X,iBAAA,GAGAF,MAWA,QAAAb,GAAAgB,GACAA,EAAAjI,KAAA,QACA6F,IAGAja,EAAAqD,MAAA,4BAAAgZ,GACApX,EAAAuJ,OAAA8N,SAAA1Z,KAAAyZ,GACApX,EAAArF,KAAA2c,cAAAC,OAAAH,GACApX,EAAArF,KAAA6c,cAAAD,OAAAH,GACApC,EAAAyC,oBAAAL,EAAA,WACAA,EAAAjI,KAAA,QACA7G,GACA3N,KAAAqF,EAAArF,KACA+c,mBAAAN,EACAzX,UAAA,WACAK,EAAAwV,MAAAoB,SAAA,EACA5T,WAAAgU,IAEApX,QAAA,WACAtE,EAAAP,IAAA6C,MAAA,2BACAoC,EAAArF,KAAAgO,QAAsCC,QAAA,QAG7B,WACT,GAAAjE,GAAA,GAAAtG,OAAA,wDASA2B,GAAArF,KAAAkI,KAAA,SACAvF,QAAAqH,EAAArH,aAaA,QAAAqa,GAAAP,GACApC,IAIAhV,EAAAwV,MAAA7N,SACA3H,EAAAuJ,OAAAqO,iBAAA5X,EAAArF,KAAAmO,cAGAsO,EAAAjI,KAAA,SACApU,EAAAqD,MAAA,6BAAAgZ,GACApX,EAAAuJ,OAAA8N,SAAA1Z,KAAAyZ,GAEApC,EAAAyC,oBAAAL,EAAA,WACAA,EAAAjI,KAAA,SACAzG,GACAgP,mBAAAN,EACAzc,KAAAqF,EAAArF,OAEAqF,EAAAwV,MAAAoB,SAAA,EACAI,KACS,WACT,GAAArS,GAAA,GAAAtG,OAAA,yDASA2B,GAAArF,KAAAkI,KAAA,SACAvF,QAAAqH,EAAArH,aAmFA,QAAAua,GAAA7V,GACAhC,EAAArF,KAAA6c,cAAAD,OAAAvV,EAAA4G,OAAA8O,oBACA1X,EAAArF,KAAA2c,cAAAC,OAAAvV,EAAA4G,OAAA8O,oBAYA,QAAAI,GAAA9V,GACAgT,IAGAja,EAAAqD,MAAA,aAAA4D,EAAA4G,QAEA5I,EAAAuJ,OAAAwO,aAAApa,KAAAqE,EAAA4G,OAAA8O,oBACA1X,EAAAuJ,OAAAyO,cAAAhW,EAAA4G,OAAA8O,mBAAArW,IAEArB,EAAArF,KAAAsd,SAAA3c,EAAA8F,YAAAY,EAAA4G,OAAA8O,mBAAArW,KACArB,EAAArF,KAAAud,SAAA5c,EAAAiG,YAAAS,EAAA4G,OAAA8O,mBAAArW,KACArB,EAAArF,KAAAwd,eAAA7c,EAAAkG,kBAAAQ,EAAA4G,OAAA8O,mBAAArW,KACArB,EAAAwV,MAAA7N,SACA3H,EAAAuJ,OAAA6O,iBAAApW,EAAA4G,OAAAsD,gBAEAlM,EAAArF,KAAAmO,aAAA9G,EAAA4G,OAAAsD,eAEArD,GACAlO,KAAAqF,EAAArF,OAGAqa,EAAAqD,qBACA,GAAAC,uBAAAtW,EAAA4G,OAAA8O,oBACA,WACA1X,EAAArF,KAAA6c,cAAAD,OAAAvV,EAAA4G,OAAA8O,oBACA1X,EAAAwV,MAAA+C,SAAA,kBACa,WACb,GAAAC,GAAA,GAAAna,OAAA,+DACA2B,GAAAuJ,OAAAkP,kBAAAD,EAAAlb,QASA0C,EAAArF,KAAAkI,KAAA,SACAvF,QAAAkb,EAAAlb,UAEAvC,EAAA6C,MAAA,mCAAAoE,EAAA4G,OAAA8O,oBACA1X,EAAAuJ,OAAAkP,kBAAA,yCACAzY,EAAAiH,WAYA,QAAAyR,GAAA1W,GACAA,EAAA4G,OAAAE,eAAA7K,EAAA6K,eACA/N,EAAAqD,MAAA,4CAAA4D,EAAA4G,OAAA3K,GACA+B,EAAArF,KAAAgO,QAA8BC,QAAA,KA+B9B,QAAA+P,GAAA3W,GACA,GAAA2C,EAGA,OAFA5J,GAAAqD,MAAA,kBAAA4D,EAAA4G,QAEA,WAAA5G,EAAA4G,OAAAsJ,QACA0G,EAAAlZ,QAAAmZ,cACAD,EAAAlU,UAOA1E,EAAA6C,KAAA,iBAA4C+F,OAAA5G,EAAA4G,UAE5C,QACS,WAAA5G,EAAA4G,OAAAsJ,QACT0G,EAAAlZ,QAAAmZ,cACAlU,EAAA,GAAAtG,OAAA,kCACAtD,EAAAqD,MAAAuG,EAAArH,SACAsb,EAAAhU,OAAAD,GAQA3E,EAAA6C,KAAA,iBAA4C8B,SAE5C,QAIAiU,KAAAlZ,QAAAmZ,aAGAlU,EAAA,GAAAtG,OAAA,sCACAtD,EAAAqD,MAAAuG,EAAArH,SACAsb,EAAAhU,OAAAD,GAQA3E,EAAA6C,KAAA,iBAAwC8B,QACxCqE,GACAkJ,OAAA,SACAvX,KAAAqF,EAAArF,OAEA,SAGAie,EAAA3d,EAAAoI,SAEArD,EAAAwV,MAAAoB,SAAA5W,EAAAwV,MAAAsD,QAAA,SACAnU,EAAA,GAAAtG,OAAA,kCAQA2B,EAAA6C,KAAA,iBAAwC8B,QACxCqE,GACAkJ,OAAA,SACAvX,KAAAqF,EAAArF,OAEAie,EAAAhU,OAAAD,GACA,SAUA3E,EAAA6C,KAAA,iBAAoC+F,OAAA5G,EAAA4G,SACpCI,GACAkJ,OAAA,SACAvX,KAAAqF,EAAArF,OAEAie,EAAAlU,UALA1E,SAr5BAhC,OAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAK,aAAAqC,SACAgC,GAAAxB,WAMAwB,EAAAC,UAAA,wBAQA,IAAA8Y,GAmBAH,EATA5D,EAAA,KA0BA8B,GARA,kBAAA9Y,GAAAgb,kBAAAhb,EAAAgb,kBAAA7a,WAgBA8Y,KAOAhZ,EAAA3C,EAAA4C,UAAAM,GAQA6H,EAAArI,EAAAqI,iBAQAiC,EAAAtK,EAAAsK,YAQAO,EAAA7K,EAAA6K,gBAQAG,EAAAhL,EAAAgL,aAQAN,EAAA1K,EAAA0K,aAQAU,EAAA9N,EAAAmD,KAAAT,EAAAoL,cAQAE,EAAAtL,EAAAsL,aAQA0M,EAAAhY,EAAAkL,gBAyBAoC,EAAAtN,EAAAsN,cAAA,KAOA2N,EAAAjb,EAAAib,YACA3S,WACa4S,sBAAA,IACAC,iBAAA,IA8xBb,OArxBAnZ,GAAAuJ,QACA6P,YAAA,EACAC,YAAA,EACAC,eAAAtZ,EAAArF,KAAAgN,OAAA1J,EAAAoC,KAAAL,EAAArF,KAAA2M,eAAA7M,GACAmd,iBAAA5X,EAAArF,KAAAgN,OAAA1J,EAAAxD,GAAAuF,EAAArF,KAAAmO,aACAyQ,eAAAvZ,EAAArF,KAAAgN,OAAA3H,EAAArF,KAAA2M,eAAA7M,GAAAwD,EAAAxD,GACA2d,iBAAApY,EAAArF,KAAAgN,OAAA3H,EAAArF,KAAAmO,aAAA7K,EAAA6K,aACAqC,UAAAnL,EAAArF,KAAAF,GACAud,cAAA,GACAX,YACAU,gBACA9B,kBACAuD,sBACAvE,SACAwE,UAAAlZ,UAAAkZ,UACAC,GAAAnZ,UAAAoZ,UA6BA3Z,EAAA4Z,aAAA,SAAAC,GACA,GAAA7E,EAAA,CAGAja,EAAAqD,MAAA,eAAAyb,GAEA7Z,EAAAuJ,OAAAwO,aAAApa,KAAAkc,GACA7Z,EAAAuJ,OAAAyO,cAAA6B,EAAAxY,IAGArB,EAAArF,KAAAsd,SAAA3c,EAAA8F,YAAAyY,EAAAxY,KACArB,EAAArF,KAAAud,SAAA5c,EAAAiG,YAAAsY,EAAAxY,KACArB,EAAArF,KAAAwd,eAAA7c,EAAAkG,kBAAAqY,EAAAxY,IAEA,KACA2T,EAAAqD,qBAAA,GAAAC,uBAAAuB,GACA,WACA7E,IAIAja,EAAAqD,MAAA,sCACA4B,EAAArF,KAAA6c,cAAAD,OAAAsC,GACA7E,EAAA8E,aAAA,SAAA1C,GACApX,EAAAwV,MAAAqB,oBAAA,EACA7W,EAAArF,KAAA2c,cAAAC,OAAAH,GACAO,EAAAP,IACqB,SAAAzS,GACrBA,EAAA,GAAAtG,OAAA,6BAAAsG,EAAArH,SACA0C,EAAAuJ,OAAAkP,kBAAA9T,EAAArH,QASA0C,EAAArF,KAAAkI,KAAA,SACAvF,QAAAqH,EAAArH,UAEAvC,EAAA6C,MAAA,wBACAoC,EAAAuJ,OAAAkP,kBAAA,yCACAzY,EAAAiH,YAEiB,SAAAtC,GACjBA,EAAA,GAAAtG,OAAA,0DAAAsG,EAAArH,SACA0C,EAAAuJ,OAAAkP,kBAAA9T,EAAArH,QASA0C,EAAArF,KAAAkI,KAAA,SACAvF,QAAAqH,EAAArH,YAIS,MAAAqH,GACT,GAAA6T,GAAA,GAAAna,OAAA,8DAAAsG,EAAArH,QACA0C,GAAAuJ,OAAAkP,kBAAAD,EAAAlb,QASA0C,EAAArF,KAAAkI,KAAA,SACAvF,QAAAkb,EAAAlb,aAiEAhC,EAAAga,aACAtV,EAAAoV,YAYApV,EAAA+Z,KAAA,SAAA/b,GACAA,QACAqI,EAAAG,QAAAxI,EAAAwI,SAAAH,EAAAG,QACAH,EAAA2T,YAAAhc,EAAAgc,aAAA3T,EAAA2T,YAEAjf,EAAAqD,MAAA,WAEA4W,IAIAhV,EAAAuJ,OAAA6P,aAAA,GAAA3L,OAAAC,UAEAsH,EAAA,GAAAnU,mBAAAwF,EAAAG,QAAAyS,GACAjE,EAAAiF,eAAAxD,EACAzB,EAAAkF,oBAAAnD,EACA/B,EAAAmF,YAAA,SAAAnY,GAOAhC,EAAA6C,KAAA,WACAuX,OAAApY,EAAAoY,UAGApF,EAAAqF,eAAA,SAAArY,GAOAhC,EAAA6C,KAAA,yBACAuX,OAAApY,EAAAoY,UAGApF,EAAAsF,cAAA,SAAAtY,GASAhC,EAAA6C,KAAA,qBACAwJ,QAAArK,EAAAqK,WAIArM,EAAAwV,MAAAnT,OAAA,4BACArC,EAAAwV,MAAA7N,QACAuO,QAUAlW,EAAAua,iBAAA,WACA,MAAAvF,GAGAA,EAAAuF,iBAAA3b,MAAAoW,EAAA7V,MAAAqb,UAAAtL,MAAAvU,KAAAkE,gBAQAmB,EAAAya,gBAAA,WACA,MAAAzF,GAGAA,EAAAyF,gBAAA7b,MAAAoW,EAAA7V,MAAAqb,UAAAtL,MAAAvU,KAAAkE,gBAQAmB,EAAAkV,kBAAA,WACA,MAAAF,GAGAA,EAAAE,kBAAAtW,MAAAoW,EAAA7V,MAAAqb,UAAAtL,MAAAvU,KAAAkE,YAHA,QAYAmB,EAAA0a,UAAA,SAAAN,GACA,MAAApF,IAcAA,EAAA0F,UAAAN,GAAApF,SALAhV,EAAArF,KAAAkI,KAAA,SACAvF,QAAA,yCAEA,SAgLA0C,EAAAiH,MAAA,SAAAjJ,GACAA,QACA+a,GAAA,EAEA/Y,EAAAwV,MAAA7N,UAAA,IACA3H,EAAAwV,MAAAoB,UAEAmC,GAAA,IAIAA,EAAA,iBAAA/a,GAAA4K,OAAA5K,EAAA4K,OAAAmQ,EACAA,IACAhe,EAAA0J,KAAA,kBACA2E,GACAzO,KAAAqF,EAAArF,QAIAqF,EAAAuJ,OAAA8P,aAAA,GAAA5L,OAAAC,UASA1N,EAAA6C,KAAA,SACA8X,WAAA5B,IAEA/Y,EAAA0C,SAEAsS,GAAAhV,EAAAuJ,QACAyL,EAAA/N,QAEA+N,EAAA,KAEAhV,EAAArF,KAAAqW,wBACA1H,GACAC,OAAAvJ,EAAAuJ,SAGAvJ,EAAAuJ,OAAA,MAEAvJ,EAAAiH,MAAA3L,EAAAmD,KAAAuB,EAAAiH,OAQAjH,EAAA4V,SAAA,WACA,SAAAZ,IAAA,0CAAA1T,QAAA0T,EAAA4F,oBAAA,KAgGA5a,EAAA6a,YAAA,SAAA7c,GACA4a,EAAA3d,EAAAoI,QACA2F,GACAkJ,OAAA,WACAvX,KAAAqF,EAAArF,KACA+G,YAAA1D,EAAA0D,YACAwJ,iBAAAlN,EAAAkN,oBA8GAlL,EAAAkX,mBAAA,SAAAlZ,GAGA,GAFAA,QAEAgX,IAAAhX,EAAAmZ,gBAAA,CAIA,IAAAnZ,EAAA+X,YAAA/X,EAAA+X,UAAA+E,eAAA,iBAEA,MADA/f,GAAA0H,KAAA,uCAAAzE,GACA,MAGA,KAAAgX,EAGA,MAFAiC,GAAAtZ,KAAAK,EAAA+X,WACAhb,EAAAqD,MAAA,4CACA,MAGA,IAAA4B,EAAAwV,MAAAoB,SAAA5W,EAAAwV,MAAAqB,mBACA,IACA7B,EAAA+F,gBAAA,GAAAC,iBAAAhd,EAAA+X,YACAhb,EAAAqD,MAAA,0BAAAJ,EAAA+X,WACA/V,EAAAuJ,OAAAiQ,mBAAA7b,KAAAK,EAAA+X,WACa,MAAA7T,GAEb,MADAnH,GAAA6C,MAAA,+BAAAsE,EAAA5E,QAAAU,EAAA+X,WACA,WAES/X,GAAAmZ,kBACTF,EAAAtZ,KAAAK,EAAA+X,WACAhb,EAAAqD,MAAA,iDAIA4B,EAAArF,KAAA0H,OAAA,eAAAwV,GAAA,GACA7X,EAAArF,KAAA0H,OAAA,gBAAAyV,GAAA,GACA9X,EAAArF,KAAA0H,OAAA,mBAAAqW,GAAA,GACA1Y,EAAArF,KAAA0H,OAAA,gBAAAsW,GAAA,GAEA3Y,IdwrMM,SAAS/F,EAAQD,EAASM,GetqOhC,IACAgB,IADAhB,EAAA,IACAA,EAAA,IACA2gB,EAAA3gB,EAAA,GACAA,GAAA,IAcAL,EAAAD,QAAA,SAAAgE,GACA,YAyBA,SAAAkd,GAAAC,GACA,IAAAA,EACA,SAAA9c,OAAA,qBA0CA,QAAA+c,KAEAC,GACAA,EAAAC,QAKA,QAAAC,KACAvb,EAAA6W,oBAAA,EACA2E,GACAA,EAAAF,QAcA,QAAAG,KACA,MAAAzb,GAAAqL,wBAAA,GAAArL,EAAA0b,eAAA,EAGA,QAAAC,GAAA3d,GACA,MAAAgC,GAAAqL,wBAAA,qBAAArN,GAAAgb,kBAGA,QAAA4C,GAAA5d,GACA,MAAAgC,GAAAqL,wBAAA,qBAAArN,GAAAgb,mBACAhZ,EAAA2H,UAAA,EAGA,QAAAkU,GAAAnd,EAAA2B,EAAAyb,GACA,GAAArhB,GAAAuI,WAAA,WACAvI,EAAA,KACAa,EAAAP,IAAA6C,MAAAyC,EAAA,kBACA3B,KACSod,EACTxgB,GAAAP,IAAAqD,MAAA,gBAAAiC,EAAA,MAAAyb,EAAA,WACA,IAAAC,IACA1b,OACAib,MAAA,WACA,OAAA7gB,IAGAa,EAAAP,IAAAqD,MAAA,iBAAAiC,GACA2b,aAAAvhB,GACAA,EAAA,OAIA,OADAwhB,GAAAte,KAAAoe,GACAA,EA7HA/d,OACA,IAAAke,GACAlc,EAAA1E,EAAAK,aAAAqC,EACAgC,GAAAC,UAAA,mBAEA,IACAkc,GAEAX,EAEAY,EAEAf,EAEAgB,EATAJ,KAEAK,EAAAte,EAAAse,eAAA,IAEAC,EAAAve,EAAAue,sBAAA,IAEAC,EAAAxe,EAAAwe,mBAAA,IAEAC,EAAAze,EAAAye,eAAA,IAQAC,GAAA,wEACA,gBAQA1c,GAAA2c,uBAAA,EACA3c,EAAA4c,eAAA,EACA5c,EAAA6c,aAAA,EACA7c,EAAA8c,YAAA,EACA9c,EAAA4W,SAAA,EACA5W,EAAA+c,aAAA,EACA/c,EAAA6W,oBAAA,EACA7W,EAAAqL,uBAAArL,EAAAqL,qBACArL,EAAAgd,WAAAhd,EAAAgd,SACAhd,EAAA0b,cAAA1b,EAAA0b,WAGA,IAAAuB,KACAla,OAAA,YACAma,MAAA,WAWA,MATA,iBAAAb,KAEArc,EAAA2H,OAAA0U,GAGAhB,GACAA,EAAAC,QAGAtb,EAAAmd,cAGApa,OAAA,aACAma,MAAA,SAAAlf,GAIA,MAHAA,SAEAgC,EAAAod,aAAApf,EAAAqf,QAAA,YACArd,EAAAmd,cAqBAG,GACAva,OAAA,aACAmP,OAAA,SAAAlU,GACAA,QACAgC,EAAAud,UAAAvf,EAAA4K,OACA5I,EAAAod,aAAApd,EAAAod,cAAApf,EAAAqf,QAAA,SAuCAG,GACAC,aAAA,OACAC,kBAAA,WACA1d,EAAA4c,eAAA,GAEAe,QAEAC,MAEAC,KAAA,WACA7d,EAAA6C,KAAA,cAGAib,WACA/a,OAAA,uBACAma,MAAA,SAAAlf,GAGA,MAFAkd,GAAA,gBAAAld,GAAAC,QACAid,EAAA,iBAAAld,GAAA2J,QACA3J,EAAA2J,UAAA,GAAA3J,EAAAC,OAAAgF,aAAA,WAGAF,OAAA,aACAma,MAAA,SAAAlf,GACA,MAAAA,GAAA2J,UAAA,GAAA3J,EAAAC,OAAAgF,aAAA,SAKA,GAJAjD,EAAAod,aAAA,mBACApd,EAAAud,WAAA,GACA,MAMA5U,OAAA2U,GAGAS,sBACAhE,KAAA,YAEApR,OAAA2U,EAEAU,OAAA5C,EACAuC,QACAM,WAEAC,OACAhM,OAAA,WACAlS,EAAA2c,uBAAA,EACA3c,EAAA4c,eAAA,EACA5c,EAAA4W,SAAA,EACA5W,EAAA+c,aAAA,EACA/c,EAAA6W,oBAAA,EACA7W,EAAA8c,YAAA,EACA9c,EAAAme,gBACAhC,EAAAN,EAAA,WACA7b,EAAAuY,SAAA,UAAiE8E,OAAA,yBAAArd,EAAA2H,UAC5B,kBAAA2U,IAErCtc,EAAA6C,KAAA,qBAIAgb,KAAA,WACA7d,EAAA6C,KAAA,kBACAsZ,GACAA,EAAAb,SAIA1W,OAAAqY,EAEAmB,cACAlM,OAAA,SAAAlU,GACAgC,EAAA+c,aAAA,EACA/c,EAAA8c,YAGA9Z,WAAA,WACAhD,EAAAuY,SAAA,SAAAva,OAMAyX,SACAvD,OAAA,SAAAlU,GACAkd,GAAAld,EAAAgb,mBAAA,kBAAAhb,GAAAgb,mBACAhZ,EAAA8c,YAAA,EACA,kBAAA9e,GAAAgb,oBACAhZ,EAAA2c,uBAAA,MAKA5Z,OAAA,wBACAma,MAAAzB,IAGA1Y,OAAA,mBACAma,MAAAvB,IAEA5Y,OAAA,WACAma,MAAAtB,IAGA7Y,OAAA,aACAma,MAAA,SAAAlf,GAGA,MAAAgC,GAAA+c,YAIAtB,EAAAzd,IAAA2d,EAAA3d,IACA4d,EAAA5d,IACA,KAGAA,EAAAgb,mBAAAhZ,EAAA0b,cACA1Y,WAAA,WACAhF,EAAAqgB,YAGAre,EAAA0b,eAAA,GAAA1b,EAAAqL,wBAAA,IAbA,MAkBAiT,cACA1Z,OAAAqY,EAEAS,oBACAxL,OAAA,WACAlS,EAAA4c,eAAA,KAGA7Z,OAAA,WACAma,MAAA,WACA,MAAAld,GAAA2H,UAAA,GAAA3H,EAAA2c,yBAAA,GACA3c,EAAA4c,iBAAA,KAGA7Z,OAAA,aACAma,MAAA,WACA,MAAAld,GAAA2H,UAAA,GAAA3H,EAAA2c,yBAAA,GACA3c,EAAA4c,iBAAA,KAGAe,QAEAY,uBAEAL,MAAA,WACAle,EAAA6C,KAAA,kCAGAwb,UACAtb,OAAA,mBACAma,MAAA,SAAAlf,GACA,wBAAAA,GAAAgb,qBAGAjW,OAAA,aACAma,MAAA,SAAAlf,GACA,MAAAgC,GAAA2H,UAAA,IACA3H,EAAA4c,iBAAA,GAAA5c,EAAAqL,wBAAA,IACA,kBAAArN,GAAAgb,qBAGAjW,OAAA,WACAma,MAAA,SAAAlf,GACA,MAAAgC,GAAA2H,UAAA,GAAA3H,EAAA4c,iBAAA,GACA,kBAAA5e,GAAAgb,sBAKAwF,kBAEAN,MAAA,WACAle,EAAA6C,KAAA,4BAGAgb,KAAA,WACA7d,EAAA6C,KAAA,2BAGAwb,SAAA,WACAre,EAAA2c,uBAAA,IAEA5Z,OAAA,WACAma,MAAA,WACA,MAAAld,GAAA2H,UAAA,GAAA3H,EAAA4c,iBAAA,KAGA7Z,OAAA,aACAma,MAAA,WACA,MAAAld,GAAA2H,UAAA,GAAA3H,EAAA4c,iBAAA,QAOA6B,mBACA1E,KAAA,WACAnV,OAAAqY,EACAyB,UAAA,WAEAlD,EAAAK,EAAA,WACA7b,EAAAuY,SAAA,UAAyD8E,OAAA,0BAC5B,iBAAAd,IAE7BoB,QACAgB,UAEAT,MAAA,WACAle,EAAA6C,KAAA,mBAGAgb,KAAA,WACA7d,EAAA6C,KAAA,kBAGA6a,mBAAA,WACA1d,EAAA4c,eAAA,IAEA7Z,OAAA,YACAma,MAAA,WAEA,MAAAld,GAAAqL,wBAAA,KAIAuT,oBACA7b,OAAA,aAGA8b,eAAAtD,GACAxY,OAAA,kBAMA+b,qBACA/E,KAAA,aACAnV,OAAAqY,EACA4B,cAAAtD,EACAoC,QACAtP,YAEA6P,MAAA,WACAle,EAAA6C,KAAA,oBAGAuZ,EAAAP,EAAA,WACA7b,EAAAuY,SAAA,UAAiE8E,OAAA,sBAC5B,aAAAb,IAGrCqB,KAAA,WACAzB,GACAA,EAAAd,QAEAD,GACAA,EAAAC,QAEAtb,EAAA6C,KAAA,oBAGA6a,oBACAxL,OAAA,WACAlS,EAAA4c,eAAA,KAGA7Z,OAAA,YACAma,MAAA,WAEA,MAAAld,GAAAqL,wBAAA,GAAArL,EAAA2H,UAAA,KAIAiX,oBACA7b,OAAA,kBAWAgc,oBACAhF,KAAA,YACAnV,OAAAqY,EAEAe,OAAA5C,EAEAzS,OAAA2U,EACAK,QACAqB,WAEAd,MAAA,WACA7C,EAAAQ,EAAA,WACA7b,EAAAuY,SAAA,UAAyD8E,OAAA,kBAC5B,oBAAAZ,GAC7Bzc,EAAA6C,KAAA,oBAGA0S,QAAA,WACAvV,EAAA2H,QAAA,IAEA5E,OAAA,cAGA8a,KAAA,WACA7d,EAAA6C,KAAA,sBAMAoc,oBACAlF,KAAA,YACAnV,QACA7B,OAAA,aACAmP,OAAA,SAAAlU,GACAgC,EAAAod,aAAApf,EAAAqf,QAAA,+BAGAwB,cAAAtD,EAEA5S,OAAA2U,EACAK,QACAtM,WAEA6M,MAAA,WACA7B,EAAArc,EAAA2H,OACA3H,EAAAqL,sBAAA,EACArL,EAAA6C,KAAA,oBAGAgb,KAAA,WACA7d,EAAA6C,KAAA,mBAGAmb,SAEAjb,OAAA,YACAma,MAAA,SAAAlf,GAEA,MADAA,SACAA,EAAAkhB,WAAA,GACAlf,EAAA2H,QAAA,EACA0T,EAAAQ,EAAA,WAEA7b,EAAAuY,SAAA,UAAiE8E,OAAA,kBAC5B,SAAAZ,IACrC,GANA,UAWA1Z,OAAA,YACAma,MAAA,SAAAlf,GAEA,MADAA,SACAA,EAAAkhB,WAAA,QAOAC,qBACApF,KAAA,aACA4D,QACAyB,YAEAlB,OACAhM,OAAA,WACAlS,EAAA6C,KAAA,oBACAoZ,EAAA7b,QAAA,SAAA2b,GACAA,EAAAT,UAEAtY,WAAA,WACAkZ,EAAA,KACAlc,EAAA0C,iBAsFA,OA5EA8a,GAAAxd,KAAAE,OAAAqH,OAAA0T,GACAiB,EAAA5gB,EAAAyE,MAAAyd,GACAtB,EAAAmD,KAEAC,SAAA,WAEA,GAAAC,GAAApgB,MAAAqb,UAAAtL,MAAAvU,KAAAkE,UACA0gB,GAAA3c,OAAA,IAAA5C,EAAA2H,QACArM,EAAAP,IAAAqD,MAAAQ,MAAAtD,EAAAP,IAAAwkB,MAUAvf,EAAAwf,SAAA,WACA,MAAAtD,GAGAA,EAAAuD,eAAApf,KAFA,cAUAL,EAAAuY,SAAA,SAAAvW,EAAAud,GACA,GAAAG,GACAC,CAEA,IAAAzD,EAAA,CAIAwD,EAAA1f,EAAAwf,UACA,KACAtD,EAAA3D,SAAAvW,EAAAud,GACS,MAAA5a,GAET,KADArJ,GAAAP,IAAAqD,MAAA,oBAAA4D,EAAA,OAAA0d,EAAA,OAAAH,EAAA5a,GACAA,EAEAgb,EAAA3f,EAAAwf,WACAE,IAAAC,GAAA,KAAAjD,EAAApb,QAAAU,IACA1G,EAAAP,IAAAqD,MAAA4B,EAAA2H,OAAA,sBAAA3F,EAAA,4BAEA1G,EAAAP,IAAAqD,MAAA4B,EAAA2H,OAAA,cAAA3F,EAAA,eAAA0d,EAAA,KAAAC,EAAAJ,KASAvf,EAAAme,YAAA,WACA,GAAAyB,IAAA,4EACA,OAAAA,GAAAte,QAAAtB,EAAAwf,YAAA,IAAAxf,EAAAmd,YAUAnd,EAAA8Y,QAAA,SAAAzY,GACA,MAAAL,GAAAwf,aAAAnf,GAGA6a,EAAA,kBAAAlb,GAAAmd,UACAjC,EAAA,iBAAAlb,GAAA2H,QACA3H,IfmrOM,SAAS/F,EAAQD,EAASM,GgB/xPhC,GAAAW,GAAAX,EAAA,IACAS,EAAAT,EAAA,IACAgB,EAAAhB,EAAA,EAsDAL,GAAAD,QAAA,SAAAgE,GACA,YAmOA,SAAA+b,KACAhf,EAAAqD,MAAA,aAEAD,SAAAya,IACAiH,EAAA5kB,EAAAoI,SAGA2R,EAAA+E,KAAA1T,GACAlI,SAAAya,GAAA5D,EAAAQ,MAAAnK,wBAAA,GACAyU,EAAA9hB,GAqCA,QAAA4W,GAAA5W,GAMAgX,IAIAhV,EAAAqC,OAAA,wBAAArE,EAAA+hB,cACA/f,EAAAqC,OAAA,UAAArE,EAAAsG,WACAtE,EAAAqC,OAAA,SAAArE,EAAAgiB,UACAhgB,EAAAqC,OAAA,QAAArE,EAAAiiB,SACAjgB,EAAAqC,OAAA,SAAArE,EAAAkiB,UACAlgB,EAAAqC,OAAA,UAAArE,EAAAmiB,WACAngB,EAAAqC,OAAA,OAAArE,EAAAoiB,QACApgB,EAAAqC,OAAA,mBAAArE,EAAAqiB,mBAEArL,EAAAQ,MAAAkG,YAAA,iBAAA1d,GAAA0d,YAAA1d,EAAA0d,YAAA1G,EAAAQ,MAAAkG,YACA1G,EAAAQ,MAAAwH,SAAA,iBAAAhf,GAAAgf,SAAAhf,EAAAgf,SAAAhI,EAAAQ,MAAAwH,SACAhI,EAAAQ,MAAAnK,qBAAA,iBAAArN,GAAAqN,qBAAArN,EAAAqN,qBAAA2J,EAAAQ,MAAAnK,qBACA2N,EAAA,kBAAAhb,GAAAgb,kBACAhb,EAAAgb,oBAEA3S,EAAArI,EAAAqI,oBACAA,EAAAG,QAAAxI,EAAAwI,SAAAH,EAAAG,QACAH,EAAA3E,YAAA1D,EAAA0D,aAAA2E,EAAA3E,YACA2E,EAAA2T,YAAAhc,EAAAgc,aAAA3T,EAAA2T,YAEAha,EAAAsX,cAAAgJ,QAAAtiB,EAAAuiB,mBAAAvgB,EAAAsX,cAAAgJ,QACAtgB,EAAAsX,cAAAkJ,eAAAna,EAAA3E,aACAsT,EAAAQ,MAAA7N,UAAA,GAGA3H,EAAAwX,cAAAgJ,eAAAna,EAAA3E,aAEA1B,EAAAwX,cAAA8I,QAAAtiB,EAAAyiB,oBAAAzgB,EAAAwX,cAAA8I,QAGAtL,EAAA3O,eACA2O,EAAA2B,UAAA,iBAAA3Y,GAAA2Y,UAAA3Y,EAAA2Y,UAAA3B,EAAA2B,UACA3B,EAAA3S,OAAA,iBAAAL,GAUAhC,EAAA6C,KAAA,SAAgCoS,MAAAjT,EAAAiT,UACvB,SAETjV,GAAAsI,kBACAtI,GAAA6I,sBACA7I,GAAA0I,mBACA1I,GAAAoJ,mBACApJ,GAAAsJ,mBACAtJ,GAAAkJ,iBA8HA,QAAAwX,KACA3lB,EAAAqD,MAAA,mCAWA,QAAAuiB,GAAA3e,GACAgT,IAGAja,EAAAqD,MAAA,wBAAA4D,GAEAhC,EAAAwX,cAAAoJ,UAAA5e,EAAAoY,QAaApF,EAAAQ,MAAA+C,SAAA,sBACAvY,EAAA6C,KAAA,WACAuX,OAAApY,EAAAoY,OACAkG,QAAAtgB,EAAAwX,cAAA8I,WAyBA,QAAAlL,GAAApX,GACA,MAAAgX,MAAAI,UACApV,EAAAqC,OAAA,QAAArE,EAAAqX,SACAL,EAAAI,SAAApX,IAEA,KA2CA,QAAA6iB,GAAA7iB,GAiFA,MAhFAjD,GAAAqD,MAAA,mBACAwW,EAAA5W,GACAgC,EAAAsX,cAAAjV,OAAA,8BACA2S,GAaAhV,EAAA6C,KAAA,sBACS,GACT7C,EAAAsX,cAAAjV,OAAA,mBACA2S,IAcAhV,EAAA6C,KAAA,SACAmS,EAAAQ,MAAA+C,SAAA,WACAS,yBAES,GACThZ,EAAAsX,cAAAjV,OAAA,2BAAAL,GACAgT,IAIA6K,EAAAnb,QAAA1E,EAAAsX,eACAtC,EAAA0F,UAAA1Y,EAAAoY,QACApF,EAAAQ,MAAA+C,SAAA,qBACA,kBAAAS,IACAA,EAAAhX,EAAAse,QAAAtgB,GAWAA,EAAA6C,KAAA,yBACAyd,QAAAte,EAAAse,QACAlG,OAAApa,EAAAsX,mBAES,GACTtX,EAAAsX,cAAAjV,OAAA,iBAAAL,GACAgT,EAAAQ,MAAA+C,SAAA,UAAyC8E,OAAA,uBACzCrI,EAAAzL,OAAAkP,kBAAAzW,EAAAqb,OASArd,EAAA6C,KAAA,SACAwa,OAAArb,EAAAqb,WAIArd,EAAAsX,cAAA9H,QACAxP,EAAAsX,cAqKA,QAAAwI,GAAA9hB,GAKA,MAJAjD,GAAAqD,MAAA,mCAAAJ,GACAA,QACA6hB,EAAAngB,QAAAmE,KAAA7F,EAAA2B,UAAA3B,EAAA4B,SAEAsL,KAAA0K,YACAiK,EAAAngB,QAAAmZ,YACAgH,EAAAnb,QAAAwG,GAEAnQ,EAAA0H,KAAA,yCAEAod,EAAAngB,UAGA1B,EAAAQ,aACAR,EAAAgX,KACAhX,EAAArD,KAAAqF,EAEAkL,EAAA5P,EAAAc,iBAAA4B,GAEAkN,EAAA7I,OAAA,mBACArC,EAAAmd,WAIAjS,KAAA0K,YACA5V,EAAA2V,wBAAiDmL,YAAA,KAJjD/lB,EAAAqD,MAAA,kDACA4B,EAAA2I,YAMS,GAETuC,EAAA7I,OAAA,oBACA2S,EAAAQ,MAAA7N,UAAA,EACA5M,EAAAqD,MAAA,sCAEAyhB,EAAAnb,QAAAwG,KAES,GAETA,EAAA7I,OAAA,kBACA2S,EAAAQ,MAAA+C,SAAA,wBACS,GAETrN,EAAA7I,OAAA,iBAAAsC,GACAkb,EAAAjb,OAAA,GAAAvG,OAAAsG,MACS,GAET3E,EAAAsH,eAAA4D,mBAYAlL,EAAA6C,KAAA,qBACAqI,mBACA9D,SAAApH,EAAAsH,iBAeArJ,EAAA4E,KAAA,qBACAqI,mBACA9D,SAAApH,EAAAsH,iBAGA0N,EAAAQ,MAAA7N,UAAA,GACAuD,EAAAqK,SAGAsK,EAAAngB,SAoHA,QAAAmY,GAAA7V,GACAjH,EAAAqD,MAAA,cAAA4D,EAAA4G,OACA,IAAAnE,KAEAzE,GAAAmL,UAAAnJ,EAAA4G,OAAAuC,UACA6J,EAAAQ,MAAAnT,OAAA,8BACA2S,EAAAQ,MAAA7N,QACAqN,EAAA4E,aAAA5X,EAAA4G,OAAA8O,sBAIA1C,EAAAQ,MAAA2I,gBACAnJ,EAAAQ,MAAAnK,wBAAA,EACA5G,EAAAyG,mBACa8J,EAAAQ,MAAAnK,wBAAA,IAGb5G,EAAA9J,KAAAqF,EACAyE,EAAA/C,YAAA2E,EAAA3E,aAgBA1B,EAAA6C,KAAA,SAAA4B,IAGAuQ,EAAAQ,MAAA+C,SAAA,gBACAS,oBACAqF,QAAAre,EAAAqe,UAUA,QAAA1F,GAAA3W,GACAjH,EAAAqD,MAAA,oBAAA4D,GACA,aAAAA,EAAA4G,OAAAsJ,SACA0G,EAAA3d,EAAAoI,QACA2R,EAAAQ,MAAA+C,SAAA,UAAyC2G,SAAA;CAWzC,QAAA6B,GAAA/e,GAGA,MAFAgT,GAAAQ,MAAA+C,SAAA,UAEA,aAAAvW,EAAA4G,OAAAsJ,QACA0G,EAAAlU,UACAkU,EAAAza,OACA,SAOA6D,EAAA4G,OAAAsC,oBAAA,EACA4U,IAAAhgB,KAAA,SAAAkhB,GACA9V,EAAA8V,EACA9V,EAAAqK,WAESvT,EAAA4G,OAAAsC,oBAAA,GACTA,IACAlL,EAAA2V,wBAA6CmL,YAAA,IAC7CjB,EAAAnb,SAAA,IAGAsQ,EAAAQ,MAAAnK,qBAAA,iBAAArJ,GAAA4G,OAAAsC,iBAAAlJ,EAAA4G,OAAAsC,iBAAA,KACA7E,EAAA3E,YAAAM,EAAA4G,OAAAlH,aAAA2E,EAAA3E,YAZA,QAuBA,QAAAuf,GAAAjf,GACA,aAAAA,EAAA4G,OAAAsJ,SACA2N,EAAAjb,OAAA5C,EAAA2C,KACAiU,EAAAhU,OAAA5C,EAAA2C,KACAiU,EAAAza,QA8HA,QAAA+iB,GAAAlf,GACAgT,IAGAA,EAAAzL,OAAAkP,kBAAAzW,EAAA4G,OAAAyU,QAAA,sBACArI,EAAAQ,MAAAqH,aAAA,EACA7H,EAAAQ,MAAA+C,SAAA,UAAqC3P,QAAA,EAAAyU,OAAArI,EAAAzL,OAAAkP,qBAhuCrCza,OAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAK,aAAAqC,EA0BA,UAzBAgC,GAAAxB,WAOAwB,EAAAC,UAAA,eAQAD,EAAA2H,SAAA3H,EAAA2H,OAQA3H,EAAAvF,GAAAuF,EAAA2H,OAAArM,EAAAwD,WAAAkB,EAAAvF,IAEAuF,EAAAvF,GACA,SAAA4D,OAAA,4CAUA,IAWAua,GAXAiH,EAAA5kB,EAAAoI,QAkBA2V,EAAAhb,EAAAgb,kBAOA/a,EAAA3C,EAAA4C,UAAAM,GAOAmF,EAAA3F,EAAA2F,gBAOA3D,GAAAgR,yBAAAhT,EAAA2F,iBAAAqN,uBASAhR,EAAAiY,SAAA9Z,OASA6B,EAAAkY,SAAA/Z,OAOA6B,EAAAsX,cAAAhc,EAAAkB,WAAAwB,GAOAgC,EAAAwX,cAAAlc,EAAAmB,YAAAuB,GAWAgC,EAAAsX,cAAAjV,OAAA,gBAAAL,GACAhC,EAAA6C,KAAA,QACAsM,KAAAnN,EAAAmN,KACAgS,MAAAnf,EAAAmf,gBAIAnjB,GAAA2F,uBACA3D,GAAA2D,gBAQA,IAAAyd,IAAA,EAOAC,GAAA,EAOAhb,EAAArI,EAAAqI,aAOA6E,EAAA,KAeA8J,EAAA1Z,EAAAe,gBACAmC,aACAgX,MAAAla,EAAAgB,WACAqL,OAAA3H,EAAA2H,OACA0D,qBAAArN,EAAAqN,qBACA2R,SAAAhf,EAAAgf,SACAtB,YAAA1d,EAAA0d,YAEAyB,SAAA,WACA,MAAAnd,GAAAmd,cAGAxG,YAAA3Y,EAAA2Y,UACAhc,KAAAqF,EACAqG,eACA4S,WACA3S,WACiB4S,sBAAA,IACAC,iBAAA,KAGjB7N,aAAAtN,EAAAsN,cAAA,KACAhD,YAAA,SAAAiX,GACAvK,IAIAhX,EAAAsK,YAAAiX,GACAvK,EAAAQ,MAAA+C,SAAA,eAEA1P,gBAAA7K,EAAA6K,gBACAH,aAAA1K,EAAA0K,aACAM,aAAAhL,EAAAgL,aACAI,aAAApL,EAAAoL,aACAE,aAAAtL,EAAAsL,aACAJ,gBAAAlL,EAAAkL,iBA6JAlJ,GAAAyV,OAAA,SAAAzX,GACAA,QACAjD,EAAAqD,MAAA,eAEAwW,EAAA5W,GAEAgX,EAAA3S,OAAA,UAAAse,GAAA,GACA3L,EAAA3S,OAAA,wBAAAqe,GAAA,GAEA1L,EAAAQ,MAAA/W,KAAA,2CACAoiB,EAAA7iB,KAEAgX,EAAAQ,MAAA+C,SAAA,UACAS,oBACAqF,QAAAre,EAAAqe,UAQAre,EAAA6C,KAAA,WAyBA7C,EAAAuV,OAAAvV,EAAAyV,OAYAzV,EAAAqe,QAAA,WACAtjB,EAAAqD,MAAA,gBASA4B,EAAA6C,KAAA,WACAmS,EAAAQ,MAAA+C,SAAA,WACAS,sBAGAJ,KAAAlZ,QAAAmZ,cACAD,EAAAlU,SAAA,GACAkU,EAAAza,SA6EA7C,EAAAga,aACAtV,EAAAoV,YASApV,EAAAshB,gBAAA,WACA,MAAAthB,GAAAsX,cAAAgJ,SASAtgB,EAAAuhB,iBAAA,WACA,MAAAvhB,GAAAwX,cAAA8I,SA2HAtgB,EAAAwhB,SAAA,SAAAxjB,GAmBA,MAlBAjD,GAAAqD,MAAA,iBACAJ,QACAA,EAAA0D,YAAA1D,EAAA0D,cAAoDG,OAAA,EAAAF,OAAA,GACpD3D,EAAA0D,YAAAC,MAAA,iBAAA3D,GAAA2D,MAAA3D,EAAA2D,MAAA3D,EAAA0D,YAAAC,MACA3D,EAAA0D,YAAAG,MAAA,iBAAA7D,GAAA6D,MAAA7D,EAAA6D,MAAA7D,EAAA0D,YAAAG,MACA7D,EAAAQ,aAEAqhB,EAAAngB,QAAA+hB,eAGAzM,EAAA6F,aACAnZ,YAAA1D,EAAA0D,cAEAkX,EAAA3d,EAAAoI,QACAuV,EAAAlZ,QAAAmE,KAAA,WACAgd,EAAA7iB,MAPA6iB,EAAA7iB,GAUA4a,EAAAlZ,SAqBAM,EAAA0hB,SAAA,SAAA1jB,GAOA,MANAA,SACAA,EAAA0D,YAAA1D,EAAA0D,cAAoDG,OAAA,EAAAF,OAAA,GACpD3D,EAAA0D,YAAAG,MAAA,iBAAA7D,GAAA0D,YAAAG,MACA7D,EAAA0D,YAAAG,OAAA,EACA7D,EAAA0D,YAAAC,MAAA,iBAAA3D,GAAA2D,MAAA3D,EAAA2D,MAAA3D,EAAA0D,YAAAC,MACA3D,EAAA0D,YAAAG,MAAA,iBAAA7D,GAAA6D,MAAA7D,EAAA6D,MAAA7D,EAAA0D,YAAAG,MACA7B,EAAAwhB,SAAAxjB,IAQAgC,EAAA2hB,oBAAA,WACA,MAAAzW,IAAA,MAUAlL,EAAA2V,uBAAA,SAAA3X,GAQA,MAPAA,SACAjD,EAAAqD,MAAA,+BAEA8M,KAAA0K,YACA1K,EAAAjE,OAAoCyO,YAAA,IAGpC1V,EAAAmd,YAMAnf,EAAA8iB,cAAA,IAIA9L,EAAA6F,aACA3P,kBAAA,IAEA0N,EAAA3d,EAAAoI,QACAuV,EAAAlZ,QAAAI,KAAA,WACA+f,EAAAnb,UACAkU,EAAAza,UAVA,SALApD,EAAAqD,MAAA,kDACA4B,EAAA2I,SACA,SAkCA3I,EAAA4hB,oBAAA,SAAA5jB,GAMA,MALAjD,GAAAqD,MAAA,4BACA4W,EAAA6F,aACA3P,kBAAA,IAEA0N,EAAA3d,EAAAoI,QACAuV,EAAAlZ,QAAAmE,KAAA,WACA,MAAAic,GAAA9hB,IACS,SAAA2G,GACT,KAAAA,MAqHA3E,EAAA6hB,sBAAA,WACA3W,IACAA,EAAAjE,QACAiE,EAAA,OAcAlL,EAAA2I,OAAA,SAAA3K,GACAgX,IAGAhX,QACAA,EAAAqf,OAAArf,EAAAqf,QAAA,wBACArI,EAAAQ,MAAA+C,SAAA,SAAAva,KAEAgC,EAAA2I,OAAArN,EAAAmD,KAAAuB,EAAA2I,OAWA,IAAAmZ,GAAA,WACA/mB,EAAAqD,MAAA,SAAA4B,EAAA2H,QAEA3H,EAAAsX,cAAAyK,OAEA7W,KAAA0K,aACA1K,EAAAjE,QACAjH,EAAAsH,eAAA4D,iBAAA,KACAA,EAAAxI,SACAwI,EAAA,MAGA8J,GACAA,EAAA/N,OAAsB2B,OAAAoM,EAAAQ,MAAAqH,aAAA,EAAA7H,EAAAQ,MAAA+H,YAWtBvd,EAAA6C,KAAA,UACAwa,OAAArI,EAAAQ,MAAA4H,cAAA,yBAGApI,EAAAQ,MAAA9S,SACAsS,EAAAtS,SACA1C,EAAA0C,SACAsS,EAAA,KA8VA,OA5VA8M,GAAAxmB,EAAAmD,KAAAqjB,GAQA9hB,EAAA4E,OAAA,WACAoQ,GAGAA,EAAAQ,MAAA+C,SAAA,UAAqC8E,OAAA,0BASrCrd,EAAA4V,SAAA,WAEA,SAAAZ,KAAAY,aACA5V,EAAAsX,cAAA6F,YACAjS,KAAA0K,cA+HA5V,EAAAgiB,YAAA,WACAhiB,EAAA4V,aACAwL,EAGAphB,EAAAiiB,cAFAjiB,EAAAkiB,cAaAliB,EAAAmiB,YAAA,WACAniB,EAAA4V,aACAyL,EAGArhB,EAAAoiB,cAFApiB,EAAAqiB,cAaAriB,EAAAmd,SAAA,WACA,GAAAmF,GACAC,CAEA,OAAAvN,MAAAyF,iBAKA6H,EAAAtN,EAAAyF,kBACA8H,EAAAvN,EAAAuF,mBAEArP,KAAA0K,YACA,EAGA0M,EAAA3f,OAAA,GAAA4f,EAAA5f,OAAA,IAVA,GAmBA3C,EAAAkiB,UAAA,WACAd,IAGAphB,EAAAsX,cAAA4K,YACAd,GAAA,IASAphB,EAAAiiB,YAAA,WACAb,IAGAphB,EAAAsX,cAAA2K,cACAb,GAAA,IASAphB,EAAAqiB,UAAA,WACAhB,IAGArhB,EAAAsX,cAAA+K,YACAhB,GAAA,IASArhB,EAAAoiB,YAAA,WACAf,IAIArhB,EAAAsX,cAAA8K,cACAf,GAAA,IAoBArM,EAAAQ,MAAA/W,KAAA,8BACAqjB,MACK,GAEL9hB,EAAAqC,OAAA,eAAAwV,GAAA,GACA7X,EAAAqC,OAAA,gBAAA6e,GAAA,GACAlhB,EAAAqC,OAAA,gBAAAsW,GAAA,GACA3D,EAAA3S,OAAA,gBAAA4e,GAAA,GACAjM,EAAA3S,OAAA,gBAAA0e,GAAA,GACA/gB,EAAAqC,OAAA,gCAAAL,GACAgT,GAAAhT,EAAA4G,OAAAkN,eAAA9T,EAAA4G,OAAAkN,cAAAnT,QAGAX,EAAA4G,OAAAkN,cAAA1V,QAAA,SAAA2V,GACAf,GAGAA,EAAAkC,oBAAmCnB,kBAE9B,GAELf,EAAAQ,MAAAnK,wBAAA,GACA2J,EAAAQ,MAAA/W,KAAA,6BAWAR,EAAA4E,KAAA,QACAuE,SAAApH,EAAAsH,eACA3M,KAAAqF,MAES,GAGTgV,EAAAQ,MAAAnT,OAAA,uBACAuS,EAAA5W,KAGAgX,EAAAQ,MAAAnT,OAAA,6BACA0X,IAEA/E,EAAAQ,MAAA7N,UAAA,GACA3H,EAAAyV,WAEK,GAEL9R,EAAAmQ,qBAAAjQ,KAAA,SAAAiL,GACAA,GAMAzI,EAAAG,QAAAvI,EAAAoI,aAAAG,QACAH,EAAAG,QAAAC,WAAAqI,IANA/T,EAAA0H,KAAA,gCACA4D,EAAAG,SACAC,kBAMKO,IAAA,WACLgO,EAAAQ,MAAA+C,SAAA,YACAta,SACA0J,OAAA3H,EAAA2H,WAEK7H,KAAA,mBAILE,IhBm6PM,SAAS/F,EAAQD,EAASM,GiBvwShC,GAAAS,GAAAT,EAAA,IACAgB,EAAAhB,EAAA,EAaAL,GAAAD,QAAA,SAAAgE,GACA,YA8HA,SAAAwkB,GAAAC,GAkBA,MAjBAziB,GAAAoa,OAAAqI,EACAzG,aAAA0G,GAWA1iB,EAAA6C,KAAA,SACA9H,EAAAqD,MAAA,sCACArD,EAAAqD,MAAA,sBAGA,OAAA4W,GACAhV,EAAA2I,QAAyBC,QAAA,IACzB,SAGA5I,EAAAsgB,QAAAtiB,EAAAsiB,SAAAtgB,EAAAsgB,SAAAzjB,SAAAC,cAAA,SAOAxB,EAAAE,QAAAwE,EAAA0B,cACApG,EAAAE,QAAAwE,EAAA0B,aAAAihB,OAAA,EASA3iB,EAAA6C,KAAA,mBACAyd,QAAAtgB,EAAAsgB,QACAlG,OAAApa,EAAAoa,WAGApa,EAAAoa,OAAAuI,MAAA,EACArnB,EAAAE,QAAAwE,EAAA0B,aAAA1B,EAAAoa,OAEApa,EAAAoa,OAAA3f,GAAAwD,EAAAwF,WACAmf,kBAAA5iB,EAAAsgB,QAAAtgB,EAAAoa,QAEApa,EAAAsgB,QAAAa,OAAA,EACAnhB,EAAAsgB,QAAAuC,UAAA,EAUA7iB,EAAA6C,KAAA,mBACAyd,QAAAtgB,EAAAsgB,QACAlG,OAAApa,EAAAoa,UAzCApa,QAoDA,QAAA8iB,KAKA,GAJA/nB,EAAAqD,MAAA,gBAEA4B,EAAA0B,YAAA2E,EAAA3E,aAEA1B,EAAA0B,YACA,SAAArD,OAAA,kBAGA,IAAA/C,EAAAE,QAAAwE,EAAA0B,aAGA,MAFA3G,GAAAqD,MAAA,oBACAokB,EAAAlnB,EAAAE,QAAAwE,EAAA0B,cACA,MAGA,KACA3G,EAAAqD,MAAA,wCAAA4B,EAAA0B,aAIAghB,EAAA1f,WAAA,WAUAhD,EAAA6C,KAAA,qBACa,KACbrC,aAAA6F,EAAA3E,YAAA8gB,EAAAO,GACS,MAAA7gB,GACTnH,EAAA6C,MAAA,4BAAAsE,EAAA5E,UAWA,QAAAylB,GAAAjoB,GACAC,EAAAqD,MAAA,oBACA,IAAAtD,EAAA8T,MACA7T,EAAA0H,KAAA,sBAQAzC,EAAA6C,KAAA,SAAgCjF,MAAA,yBAEhC7C,EAAA0H,KAAA3H,GAQAkF,EAAA6C,KAAA,SAAgCjF,MAAA9C,EAAA8T,QA1QhC5Q,OAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAK,aAAAqC,SACAgC,GAAAxB,WAMAwB,EAAAC,UAAA,qBAMAD,EAAAvF,GAAAa,EAAAwD,UAQA,IAAAb,GAAA3C,EAAA4C,UAAAM,EAMAwB,GAAAsgB,QAAAtiB,EAAAsiB,OAOA,IAAAlf,IAAA,EAOAG,GAAA,EAOAC,GAAA,EAOA4f,GAAA,EAOAC,GAAA,EASAqB,EAAA,EAOArc,EAAArI,EAAAqI,gBACAA,GAAA3E,YAAA1D,EAAA0D,aAAA2E,EAAA3E,WAOA,IAYAsT,GAAAhX,EAAAgX,EAsXA,cArXAhV,GAAAgV,GAQAhV,EAAAoa,OAAA,KAiKApa,EAAAkiB,UAAA,WACAd,IAGAphB,EAAAoa,OAAA4I,iBAAA5iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAC,GAAA,IASAphB,EAAAiiB,YAAA,WACAb,IAGAphB,EAAAoa,OAAA4I,iBAAA5iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAC,GAAA,IASAphB,EAAAqiB,UAAA,WACAhB,IAGArhB,EAAAoa,OAAA+I,iBAAA/iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAE,GAAA,IASArhB,EAAAoiB,YAAA,WACAf,IAGArhB,EAAAoa,OAAA+I,iBAAA/iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAE,GAAA,IASArhB,EAAA+hB,KAAA,WACA/hB,EAAAoa,SAIApa,EAAAoa,OAAAuI,OAAA,EACA,IAAA3iB,EAAAoa,OAAAuI,QACA3iB,EAAAoa,OAAA2H,aACAzmB,GAAAE,QAAAwE,EAAA0B,cAEA1B,EAAAoa,OAAA,KAMApa,EAAA6C,KAAA,UASA7C,EAAAkY,SAAA,WACA,MAAAlY,GAAAoa,OACApa,EAAAoa,OAAA4I,iBAAArgB,OAAA,EAEApB,GASAvB,EAAAiY,SAAA,WACA,MAAAjY,GAAAoa,OACApa,EAAAoa,OAAA+I,iBAAAxgB,OAAA,EAEAvB,GASApB,EAAAmd,SAAA,WACA,QAAAnd,EAAAoa,QAUApa,EAAAuX,OAAA,SAAAH,GACA7V,EAAAjG,EAAAiG,YAAA6V,EAAA/V,KACAD,EAAA9F,EAAA8F,YAAAgW,EAAA/V,KACAG,EAAAlG,EAAAkG,kBAAA4V,EAAA/V,MAUArB,EAAAwgB,eAAA,SAAA9e,GACA1B,EAAA0B,cACAH,EAAAjG,EAAAsG,oBAAAF,GACAN,EAAA9F,EAAAmG,oBAAAC,IAUA1B,EAAAwP,MAAA,WACAsT,KAGA9iB,IjBoxSM,SAAS/F,EAAQD,EAASM,GkBpwThC,GACAgB,IADAhB,EAAA,IACAA,EAAA,GAaAL,GAAAD,QAAA,SAAAgE,GACA,YACAA,QAOA,IAAAQ,GAAAR,EAAAQ,WACAwB,EAAA1E,EAAAK,aAAAqC,SACAgC,GAAAxB,WAMAwB,EAAAC,UAAA,sBAMAD,EAAAvF,GAAAa,EAAAwD,UAQAxD,GAAA4C,UAAAM,EAMAwB,GAAAsgB,QAAAtiB,EAAAyiB,kBAOA,IAAArf,IAAA,EAOAG,GAAA,EAOAC,GAAA,EAOA4f,GAAA,EAOAC,GAAA,EAgBAhb,EAAArI,EAAAqI,mBACAA,GAAA3E,YAAA1D,EAAA0D,aAAA2E,EAAA3E,WAmBA1D,GAAAgX,EAkVA,cAjVAhV,GAAAgV,GAOAhV,EAAAoa,OAAA,KAQApa,EAAAkiB,UAAA,WACAd,IAGAphB,EAAAoa,OAAA4I,iBAAA5iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAC,GAAA,IASAphB,EAAAiiB,YAAA,WACAb,IAGAphB,EAAAoa,OAAA4I,iBAAA5iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAC,GAAA,IASAphB,EAAAqiB,UAAA,WACAhB,IAGArhB,EAAAoa,OAAA+I,iBAAA/iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAE,GAAA,IASArhB,EAAAoiB,YAAA,WACAf,IAGArhB,EAAAoa,OAAA+I,iBAAA/iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAE,GAAA,IASArhB,EAAAkY,SAAA,WACA,MAAAlY,GAAAoa,OACApa,EAAAoa,OAAA4I,iBAAArgB,OAAA,EAEApB,GASAvB,EAAAiY,SAAA,WACA,MAAAjY,GAAAoa,OACApa,EAAAoa,OAAA+I,iBAAAxgB,OAAA,EAEAvB,GASApB,EAAAmd,SAAA,WACA,QAAAnd,EAAAoa,QAUApa,EAAAuX,OAAA,SAAAH,GACA7V,EAAAjG,EAAAiG,YAAA6V,EAAA/V,KACAD,EAAA9F,EAAA8F,YAAAgW,EAAA/V,KACAG,EAAAlG,EAAAkG,kBAAA4V,EAAA/V,MAUArB,EAAAwgB,eAAA,SAAA9e,GACA1B,EAAA0B,cACAH,EAAAjG,EAAAsG,oBAAAF,GACAN,EAAA9F,EAAAmG,oBAAAC,IAUA1B,EAAA4gB,UAAA,SAAA5R,GACAA,IACAhP,EAAAoa,OAAApL,EACAhP,EAAAsgB,QAAAtgB,EAAAsgB,SAAAzjB,SAAAC,cAAA,SACA8lB,kBAAA5iB,EAAAsgB,QAAAtgB,EAAAoa,QACApa,EAAAsgB,QAAAuC,UAAA,EACA7f,WAAAhD,EAAAsgB,QAAA8C,KAAA5V,KAAAxN,EAAAsgB,YAUAtgB,EAAA+hB,KAAA,WACA/hB,EAAAoa,SAIApa,EAAAoa,OAAAuI,OAAA,EACA,IAAA3iB,EAAAoa,OAAAuI,QACA3iB,EAAAoa,OAAA2H,aACAzmB,GAAAE,QAAAwE,EAAA0B,cAEA1B,EAAAoa,OAAA,KAMApa,EAAA6C,KAAA,UASA7C,EAAAkiB,UAAA,WACAd,IAGAphB,EAAAoa,OAAA4I,iBAAA5iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAC,GAAA,IASAphB,EAAAiiB,YAAA,WACAb,IAGAphB,EAAAoa,OAAA4I,iBAAA5iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAC,GAAA,IASAphB,EAAAqiB,UAAA,WACAhB,IAGArhB,EAAAoa,OAAA+I,iBAAA/iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAE,GAAA,IASArhB,EAAAoiB,YAAA,WACAf,IAGArhB,EAAAoa,OAAA+I,iBAAA/iB,QAAA,SAAA6iB,GACAA,EAAAC,SAAA,IAUAljB,EAAA6C,KAAA,QACAsM,KAAA,QACAgS,OAAA,IAEAE,GAAA,IAGArhB,IlBixTM,WmB/sUN,YAiBA,SAAAqjB,GAAAC,GACA,GAAAA,EAGA,OAAAjkB,GAAA,EAAiBA,EAAAikB,EAAA7c,WAAA9D,OAAgCtD,IACjDikB,EAAA7c,WAAApH,GAAAyb,eAAA,UACAwI,EAAA7c,WAAApH,GAAA2Q,IAAAsT,EAAA7c,WAAApH,GAAAkkB,WACAD,GAAA7c,WAAApH,GAAAkkB,MAtBA,GAAA1iB,GAAA,KACAL,EAAA,KACAoiB,EAAA,KACAY,EAAA,KACAC,EAAA,KACAC,EAAA,IAsBA,IAAAnjB,UAAAG,gBACAijB,QAAA5oB,IAAA,8BAEA0oB,EAAA,UAEAC,EACAE,SAAArjB,UAAAkZ,UAAAhc,MAAA,8BAGAoD,EAAA,SAAAyiB,EAAAO,GAGA,MADAR,GAAAC,GACA,GAAAviB,sBAAAuiB,EAAAO,IAIAnnB,OAAA4b,sBAAAwL,yBAGApnB,OAAAse,gBAAA+I,mBAIAvjB,EAAAD,UAAAG,gBAAA8M,KAAAjN,WACAA,UAAAC,eAGA9D,OAAAwX,gBAAA,SAAAlE,EAAAmE,EAAAC,GACA,GAAA4P,GAAA,KACAC,EAAAjU,EAAA/Q,MAAA,IACA,QAAAglB,EAAA,GAAA3iB,QAAA,QAEA0iB,GACAhU,WAEK,QAAAiU,EAAA,GAAA3iB,QAAA,QACL,MAAAoiB,EAAA,CAGA,GAAAQ,GAAAlU,EAAA/Q,MAAA,MAEA,IAAAilB,EAAAvhB,QACA,IAAAuhB,EAAA,GAAA5iB,QAAA,oBACA0iB,GACAhU,IAAAkU,EAAA,GACAC,WAAA/P,EACAD,iBAMA6P,IACAhU,MACAmU,WAAA/P,EACAD,WAIA,OAAA6P,IAGAtnB,OAAA0nB,iBAAA,SAAAb,EAAApP,EAAAC,GAGA,OAFA3N,MAEApH,EAAA,EAAmBA,EAAAkkB,EAAA5gB,OAAiBtD,IAAA,CACpC,GAAA2kB,GACAtnB,OAAAwX,gBAAAqP,EAAAlkB,GAAA8U,EAAAC,EACA,QAAA4P,GACAvd,EAAA9I,KAAAqmB,GAGA,MAAAvd,IAIAmc,EAAA,SAAAtC,EAAAlG,GACAuJ,QAAA5oB,IAAA,0BACAulB,EAAA+D,aAAAjK,GAGAoJ,EAAA,SAAAlX,EAAAL,GACA0X,QAAA5oB,IAAA,4BACAuR,EAAA+X,aAAApY,EAAAoY,kBAGC,IAAA9jB,UAAAE,mBAAA,CACDkjB,QAAA5oB,IAAA,6BAEA0oB,EAAA,QAGA,IAAA3U,GAAAvO,UAAAkZ,UAAAhc,MAAA,2BAEAimB,GADA,OAAA5U,EACA8U,SAAA9U,EAAA,OAEA,IAIApS,OAAAwX,gBAAA,SAAAlE,EAAAmE,EAAAC,GACA,GAAA4P,GAAA,KACAC,EAAAjU,EAAA/Q,MAAA,IAcA,OAbA,KAAAglB,EAAA,GAAA3iB,QAAA,QAEA0iB,GACAhU,OAEK,IAAAiU,EAAA,GAAA3iB,QAAA,UAEL0iB,GACAhU,MACAmU,WAAA/P,EACAD,aAGA6P,GAIAtnB,OAAA0nB,iBAAA,SAAAb,EAAApP,EAAAC,GACA,GAAA3N,KACA,IAAAid,GAAA,GAEAjd,GACA8c,OACAY,WAAA/P,EACAD,gBAGA,QAAA9U,GAAA,EAAqBA,EAAAkkB,EAAA5gB,OAAiBtD,IAAA,CACtC,GAAA2kB,GACAtnB,OAAAwX,gBAAAqP,EAAAlkB,GAAA8U,EAAAC,EACA,QAAA4P,GACAvd,EAAA9I,KAAAqmB,GAIA,MAAAvd,IAIA5F,EAAA,SAAAyiB,EAAAO,GAKA,MAHA,IAAAH,GACAL,EAAAC,GAEA,GAAAxiB,yBAAAwiB,EAAAO,IAKArjB,EAAAD,UAAAE,mBAAA+M,KAAAjN,WACAA,UAAAC,eAGAoiB,EAAA,SAAAtC,EAAAlG,GACA,mBAAAkG,GAAAgE,UACAhE,EAAAgE,UAAAlK,EACK,mBAAAkG,GAAA+D,aACL/D,EAAA+D,aAAAjK,EACK,mBAAAkG,GAAAnjB,IACLmjB,EAAAnjB,IAAAonB,IAAAC,gBAAApK,GAEAuJ,QAAA5oB,IAAA,uCAIAyoB,EAAA,SAAAlX,EAAAL,GACAK,EAAAnP,IAAA8O,EAAA9O,SAGAwmB,SAAA5oB,IAAA,+CAIA2B,QAAAmE,oBACAnE,OAAA8D,eACA9D,OAAAkmB,oBACAlmB,OAAA8mB,sBACA9mB,OAAA+mB,wBACA/mB,OAAAgnB,yBnByuUM,SAASzpB;;;;;;;;;;;;;;;;;;;;;;;;;;CoBl7Uf,SAAAwqB,GAUA,kBAAAC,WACAA,UAAA,UAAAD,GAIAxqB,EAAAD,QAAAyqB,KAmBC,WACD,YA2JA,SAAAE,GAAAC,GACA,kBACA,MAAAjqB,GAAAiE,MAAAgmB,EAAA/lB,YAiFA,QAAAgmB,GAAA9T,GACA,MAAAA,KAAA7Q,OAAA6Q,GAMA,QAAA+T,GAAAC,GACA,MACA,2BAAAC,GAAAD,IACAA,YAAAE,GAmBA,QAAAC,GAAAtnB,EAAA8B,GAGA,GAAAylB,GACAzlB,EAAApB,OACA,gBAAAV,IACA,OAAAA,GACAA,EAAAU,OACA,KAAAV,EAAAU,MAAAgD,QAAA8jB,IACA,CAEA,OADAC,MACAvqB,EAAA4E,EAA6B5E,EAAKA,IAAAmQ,OAClCnQ,EAAAwD,OACA+mB,EAAAC,QAAAxqB,EAAAwD,MAGA+mB,GAAAC,QAAA1nB,EAAAU,MAEA,IAAAinB,GAAAF,EAAA7lB,KAAA,KAAA4lB,GAAA,KACAxnB,GAAAU,MAAAknB,EAAAD,IAIA,QAAAC,GAAAC,GAGA,OAFAC,GAAAD,EAAAxmB,MAAA,MACA0mB,KACAtmB,EAAA,EAAmBA,EAAAqmB,EAAA/iB,SAAkBtD,EAAA,CACrC,GAAA7B,GAAAkoB,EAAArmB,EAEAumB,GAAApoB,IAAAqoB,EAAAroB,QACAmoB,EAAAhoB,KAAAH,GAGA,MAAAmoB,GAAAnmB,KAAA,MAGA,QAAAqmB,GAAAC,GACA,WAAAA,EAAAxkB,QAAA,gBACA,KAAAwkB,EAAAxkB,QAAA,aAGA,QAAAykB,GAAAD,GAGA,GAAAE,GAAA,gCAAAC,KAAAH,EACA,IAAAE,EACA,OAAAA,EAAA,GAAAE,OAAAF,EAAA,IAIA,IAAAG,GAAA,4BAAAF,KAAAH,EACA,IAAAK,EACA,OAAAA,EAAA,GAAAD,OAAAC,EAAA,IAIA,IAAAC,GAAA,iBAAAH,KAAAH,EACA,OAAAM,IACAA,EAAA,GAAAF,OAAAE,EAAA,KADA,OAKA,QAAAR,GAAAE,GACA,GAAAO,GAAAN,EAAAD,EAEA,KAAAO,EACA,QAGA,IAAAxoB,GAAAwoB,EAAA,GACAvoB,EAAAuoB,EAAA,EAEA,OAAAxoB,KAAAyoB,GACAxoB,GAAAyoB,GACAC,IAAA1oB,EAKA,QAAA2oB,KACA,GAAAtB,EAIA,IACA,SAAA9mB,OACK,MAAA6D,GACL,GAAAwjB,GAAAxjB,EAAA5D,MAAAW,MAAA,MACAynB,EAAAhB,EAAA,GAAApkB,QAAA,OAAAokB,EAAA,GAAAA,EAAA,GACAW,EAAAN,EAAAW,EACA,KAAAL,EACA,MAIA,OADAC,GAAAD,EAAA,GACAA,EAAA,IAIA,QAAAM,GAAAC,EAAAvmB,EAAAwmB,GACA,kBAMA,MALA,mBAAAlD,UACA,kBAAAA,SAAAlhB,MACAkhB,QAAAlhB,KAAApC,EAAA,uBAAAwmB,EACA,eAAAxoB,OAAA,IAAAC,OAEAsoB,EAAAhoB,MAAAgoB,EAAA/nB,YAYA,QAAA5D,GAAA8V,GAIA,MAAA+V,GAAA/V,GACAA,EAIAgW,EAAAhW,GACAiW,EAAAjW,GAEAkW,EAAAlW,GA2BA,QAAA1N,KA+DA,QAAA6jB,GAAAC,GACAC,EAAAD,EACAznB,EAAAuL,OAAAkc,EAEAE,EAAAC,EAAA,SAAAnpB,EAAAb,GACAiqB,EAAA,WACAJ,EAAAK,gBAAA5oB,MAAAuoB,EAAA7pB,MAES,QAETgqB,EAAA,OACAG,EAAA,OAnEA,GAAAL,GAAAE,KAAAG,KAEArkB,EAAAskB,EAAArkB,EAAAmX,WACA9a,EAAAgoB,EAAAC,EAAAnN,UAmCA,IAjCA9a,EAAA8nB,gBAAA,SAAA9iB,EAAAkjB,EAAAC,GACA,GAAAtI,GAAAuI,EAAAjpB,UACAyoB,IACAA,EAAA3pB,KAAA4hB,GACA,SAAAqI,GAAAC,EAAA,IACAJ,EAAA9pB,KAAAkqB,EAAA,KAGAN,EAAA,WACAH,EAAAI,gBAAA5oB,MAAAwoB,EAAA7H,MAMA7f,EAAAqoB,QAAA,WACA,GAAAT,EACA,MAAA5nB,EAEA,IAAAsoB,GAAAC,EAAAb,EAIA,OAHAN,GAAAkB,KACAZ,EAAAY,GAEAA,GAGAtoB,EAAAwoB,QAAA,WACA,MAAAd,GAGAA,EAAAc,WAFoB1S,MAAA,YAKpBva,EAAAC,kBAAAiqB,EACA,IACA,SAAA9mB,OACS,MAAA6D,GAOTxC,EAAApB,MAAA4D,EAAA5D,MAAA6pB,UAAAjmB,EAAA5D,MAAAgD,QAAA,SAyDA,MAnCA8B,GAAA1D,UACA0D,EAAAsB,QAAA,SAAAqM,GACAqW,GAIAF,EAAAjsB,EAAA8V,KAGA3N,EAAA6jB,QAAA,SAAAlW,GACAqW,GAIAF,EAAAD,EAAAlW,KAEA3N,EAAAwB,OAAA,SAAAyY,GACA+J,GAIAF,EAAAtiB,EAAAyY,KAEAja,EAAAglB,OAAA,SAAAC,GACAjB,GAIAC,EAAAI,EAAA,SAAAtpB,EAAAmqB,GACAf,EAAA,WACAe,EAAAD,MAES,SAGTjlB,EA6BA,QAAA1D,GAAA6oB,GACA,qBAAAA,GACA,SAAAC,WAAA,+BAEA,IAAAplB,GAAAC,GACA,KACAklB,EAAAnlB,EAAAsB,QAAAtB,EAAAwB,OAAAxB,EAAAglB,QACK,MAAA/K,GACLja,EAAAwB,OAAAyY,GAEA,MAAAja,GAAA1D,QAqDA,QAAA+oB,GAAAC,GACA,MAAAhpB,GAAA,SAAAgF,EAAAE,GAMA,OAAAvF,GAAA,EAAAspB,EAAAD,EAAA/lB,OAA8CgmB,EAAAtpB,EAASA,IACvDpE,EAAAytB,EAAArpB,IAAAwE,KAAAa,EAAAE,KAqBA,QAAA+iB,GAAAiB,EAAAC,EAAAX,GACA,SAAAW,IACAA,EAAA,SAAAjB,GACA,MAAAhjB,GAAA,GAAAvG,OACA,uCAAAupB,MAIA,SAAAM,IACAA,EAAA,WACA,OAAoB1S,MAAA,YAIpB,IAAA9V,GAAAgoB,EAAAC,EAAAnN,UAqBA,IAnBA9a,EAAA8nB,gBAAA,SAAA9iB,EAAAkjB,EAAArI,GACA,GAAAzQ,EACA,KAEAA,EADA8Z,EAAAhB,GACAgB,EAAAhB,GAAAhpB,MAAAc,EAAA6f,GAEAsJ,EAAAluB,KAAA+E,EAAAkoB,EAAArI,GAES,MAAAwF,GACTjW,EAAAlK,EAAAmgB,GAEArgB,GACAA,EAAAoK,IAIApP,EAAAwoB,UAGAA,EAAA,CACA,GAAAY,GAAAZ,GACA,cAAAY,EAAAtT,QACA9V,EAAAqlB,UAAA+D,EAAAzL,QAGA3d,EAAAqoB,QAAA,WACA,GAAAe,GAAAZ,GACA,mBAAAY,EAAAtT,OACA,aAAAsT,EAAAtT,MACA9V,EAEAopB,EAAA/X,OAIA,MAAArR,GA+FA,QAAAqpB,GAAAhY,EAAAiY,EAAAC,EAAAC,GACA,MAAAjuB,GAAA8V,GAAAlN,KAAAmlB,EAAAC,EAAAC,GA+BA,QAAAjB,GAAAlX,GACA,GAAA+V,EAAA/V,GAAA,CACA,GAAA+X,GAAA/X,EAAAmX,SACA,kBAAAY,EAAAtT,MACA,MAAAsT,GAAA/X,MAGA,MAAAA,GAQA,QAAA+V,GAAAjR,GACA,MAAAgP,GAAAhP,IACA,kBAAAA,GAAA2R,iBACA,kBAAA3R,GAAAqS,QAIA,QAAAnB,GAAAlR,GACA,MAAAgP,GAAAhP,IAAA,kBAAAA,GAAAhS,KAQA,QAAAgV,GAAAhD,GACA,MAAAiR,GAAAjR,IAAA,YAAAA,EAAAqS,UAAA1S,MAYA,QAAAiM,GAAA5L,GACA,OAAAiR,EAAAjR,IAAA,cAAAA,EAAAqS,UAAA1S,MAWA,QAAA2T,GAAAtT,GACA,MAAAiR,GAAAjR,IAAA,aAAAA,EAAAqS,UAAA1S,MAiBA,QAAA4T,KACAC,GAAA1mB,OAAA,EACA2mB,GAAA3mB,OAAA,EAEA4mB,KACAA,IAAA,GAIA,QAAAC,GAAA9pB,EAAA2d,GACAkM,KAIAD,GAAA3rB,KAAA+B,GACA2d,GAAA,mBAAAA,GAAA/e,MACA+qB,GAAA1rB,KAAA0f,EAAA/e,OAEA+qB,GAAA1rB,KAAA,cAAA0f,IAIA,QAAAoM,GAAA/pB,GACA,GAAA6pB,GAAA,CAIA,GAAAG,GAAAC,EAAAL,GAAA5pB,EACA,MAAAgqB,IACAJ,GAAA1mB,OAAA8mB,EAAA,GACAL,GAAAzmB,OAAA8mB,EAAA,KAyBA,QAAA9kB,GAAAyY,GACA,GAAAuM,GAAAjC,GACAoB,KAAA,SAAAE,GAKA,MAHAA,IACAQ,EAAArvB,MAEA6uB,IAAA5L,GAAAjjB,OAEK,WACL,MAAAA,OACK,WACL,OAAgBob,MAAA,WAAA6H,WAMhB,OAFAmM,GAAAI,EAAAvM,GAEAuM,EAQA,QAAA3C,GAAAlW,GACA,MAAA4W,IACAoB,KAAA,WACA,MAAAhY,IAEA8Y,IAAA,SAAAxpB,GACA,MAAA0Q,GAAA1Q,IAEAypB,IAAA,SAAAzpB,EAAA0pB,GACAhZ,EAAA1Q,GAAA0pB,GAEAC,SAAA,SAAA3pB,SACA0Q,GAAA1Q,IAEA4pB,KAAA,SAAA5pB,EAAAkf,GAGA,cAAAlf,GAAA,SAAAA,EACA0Q,EAAAnS,MAAA,OAAA2gB,GAEAxO,EAAA1Q,GAAAzB,MAAAmS,EAAAwO,IAGA3gB,MAAA,SAAAsrB,EAAA3K,GACA,MAAAxO,GAAAnS,MAAAsrB,EAAA3K,IAEApf,KAAA,WACA,MAAAgqB,IAAApZ,KAEK,kBACL,OAAgByE,MAAA,YAAAzE,WAShB,QAAAiW,GAAAtnB,GACA,GAAA0D,GAAAC,GAQA,OAPAkkB,GAAA,WACA,IACA7nB,EAAAmE,KAAAT,EAAAsB,QAAAtB,EAAAwB,OAAAxB,EAAAglB,QACS,MAAArD,GACT3hB,EAAAwB,OAAAmgB,MAGA3hB,EAAA1D,QAaA,QAAA0qB,GAAAvU,GACA,MAAA8R,IACA0C,MAAA,cACK,SAAAzC,EAAArI,GACL,MAAAhH,GAAA1C,EAAA+R,EAAArI,IACK,WACL,MAAAtkB,GAAA4a,GAAAqS,YAeA,QAAAoC,GAAAvZ,EAAAiY,EAAAC,GACA,MAAAhuB,GAAA8V,GAAAuZ,OAAAtB,EAAAC,GAoCA,QAAAsB,GAAAC,GACA,kBAGA,QAAAC,GAAAC,EAAAC,GACA,GAAA7b,EAUA,uBAAA8b,eAAA,CAEA,IACA9b,EAAA+b,EAAAH,GAAAC,GACiB,MAAA5F,GACjB,MAAAngB,GAAAmgB,GAEA,MAAAjW,GAAAhP,KACAgP,EAAAiC,MAEAgY,EAAAja,EAAAiC,MAAA6V,EAAAkE,GAKA,IACAhc,EAAA+b,EAAAH,GAAAC,GACiB,MAAA5F,GACjB,MAAAD,GAAAC,GACAA,EAAAhU,MAEAnM,EAAAmgB,GAGA,MAAAgE,GAAAja,EAAA8X,EAAAkE,GAGA,GAAAD,GAAAL,EAAA5rB,MAAAxE,KAAAyE,WACA+nB,EAAA6D,EAAAjd,KAAAid,EAAA,QACAK,EAAAL,EAAAjd,KAAAid,EAAA,QACA,OAAA7D,MAYA,QAAAmE,GAAAP,GACAvvB,EAAA6E,KAAA7E,EAAAsvB,MAAAC,MA6BA,QAAAQ,GAAAja,GACA,SAAAkU,GAAAlU,GAmBA,QAAAka,GAAArE,GACA,kBACA,MAAA0D,IAAAlwB,KAAA6K,EAAApG,YAAA,SAAAqsB,EAAA3L,GACA,MAAAqH,GAAAhoB,MAAAssB,EAAA3L,MAaA,QAAAhH,GAAA1C,EAAA+R,EAAArI,GACA,MAAAtkB,GAAA4a,GAAA0C,SAAAqP,EAAArI,GAiLA,QAAAta,GAAAkmB,GACA,MAAApC,GAAAoC,EAAA,SAAAA,GACA,GAAAC,GAAA,EACAhoB,EAAAC,GA4BA,OA3BAgkB,GAAA8D,EAAA,SAAAhtB,EAAAuB,EAAAiG,GACA,GAAA0lB,EAEAvE,GAAApnB,IACA,eAAA2rB,EAAA3rB,EAAAwoB,WAAA1S,MAEA2V,EAAAxlB,GAAA0lB,EAAAta,SAEAqa,EACArC,EACArpB,EACA,SAAAqR,GACAoa,EAAAxlB,GAAAoL,EACA,MAAAqa,GACAhoB,EAAAsB,QAAAymB,IAGA/nB,EAAAwB,OACA,SAAAyjB,GACAjlB,EAAAglB,QAAyCziB,QAAAoL,MAAAsX,QAIhC,QACT,IAAA+C,GACAhoB,EAAAsB,QAAAymB,GAEA/nB,EAAA1D,UAkBA,QAAA4rB,GAAAH,GACA,MAAApC,GAAAoC,EAAA,SAAAA,GAEA,MADAA,GAAAI,EAAAJ,EAAAlwB,GACA8tB,EAAA9jB,EAAAsmB,EAAAJ,EAAA,SAAAzrB,GACA,MAAAqpB,GAAArpB,EAAA8rB,QACS,WACT,MAAAL,OAaA,QAAAM,GAAAN,GACA,MAAAlwB,GAAAkwB,GAAAM,aAkDA,QAAApD,GAAAxS,EAAAqT,GACA,MAAAjuB,GAAA4a,GAAAhS,KAAA,cAAAqlB,GA6RA,QAAAwC,GAAA7V,EAAA8V,GACA,MAAA1wB,GAAA4a,GAAA6V,QAAAC,GAtxDA,GAAAxG,IAAA,CACA,KACA,SAAA9mB,OACC,MAAA6D,GACDijB,IAAAjjB,EAAA5D,MAKA,GACAgoB,GAkPArB,EAnPAsB,EAAAE,IAMA+E,EAAA,aAIAjE,EAAA,WAQA,QAAAqE,KAGA,KAAAC,EAAAC,MAAA,CACAD,IAAAC,IACA,IAAAC,GAAAF,EAAAE,IACAF,GAAAE,KAAA,MACA,IAAAC,GAAAH,EAAAG,MAEAA,KACAH,EAAAG,OAAA,OACAA,EAAAC,QAGA,KACAF,IAEa,MAAA7pB,GACb,GAAAgqB,EAeA,KARAF,IACAA,EAAAnO,OAEA7a,WAAA4oB,EAAA,GACAI,GACAA,EAAAC,QAGA/pB,CAKAc,YAAA,WACA,KAAAd,IACqB,GAIrB8pB,GACAA,EAAAnO,OAIAsO,GAAA,EAvDA,GAAAN,IAAgBE,KAAA,OAAAD,KAAA,MAChBM,EAAAP,EACAM,GAAA,EACAE,EAAA,OACAH,GAAA,CAmEA,IAbA3E,EAAA,SAAAwE,GACAK,IAAAN,MACAC,OACAC,OAAAE,GAAAI,QAAAN,OACAF,KAAA,MAGAK,IACAA,GAAA,EACAE,MAIA,mBAAAC,kBAAA/E,SAGA2E,GAAA,EAEAG,EAAA,WACAC,QAAA/E,SAAAqE,QAGK,sBAAAW,cAGLF,EADA,mBAAA3vB,QACA6vB,aAAA/e,KAAA9Q,OAAAkvB,GAEA,WACAW,aAAAX,QAIK,uBAAAY,gBAAA,CAGL,GAAAngB,GAAA,GAAAmgB,eAGAngB,GAAAogB,MAAAjY,UAAA,WACA6X,EAAAK,EACArgB,EAAAogB,MAAAjY,UAAAoX,EACAA,IAEA,IAAAc,GAAA,WAGArgB,EAAAsgB,MAAAC,YAAA,GAEAP,GAAA,WACArpB,WAAA4oB,EAAA,GACAc,SAKAL,GAAA,WACArpB,WAAA4oB,EAAA,GAIA,OAAArE,MAaA5sB,EAAAgG,SAAAhG,KAUAmtB,EAAAnD,EAAAxlB,MAAAqb,UAAAtL,OAEAmY,EAAA1C,EACAxlB,MAAAqb,UAAAqS,QAAA,SAAAjG,EAAAkG,GACA,GAAAnnB,GAAA,EACAhD,EAAAvI,KAAAuI,MAEA,QAAA9D,UAAA8D,OAGA,QACA,GAAAgD,IAAAvL,MAAA,CACA0yB,EAAA1yB,KAAAuL,IACA,OAEA,KAAAA,GAAAhD,EACA,SAAA6lB,WAKA,KAAc7lB,EAAAgD,EAAgBA,IAE9BA,IAAAvL,QACA0yB,EAAAlG,EAAAkG,EAAA1yB,KAAAuL,MAGA,OAAAmnB,KAIAnD,EAAAhF,EACAxlB,MAAAqb,UAAAlZ,SAAA,SAAAyP,GAEA,OAAA1R,GAAA,EAAuBA,EAAAjF,KAAAuI,OAAiBtD,IACxC,GAAAjF,KAAAiF,KAAA0R,EACA,MAAA1R,EAGA,YAIAksB,EAAA5G,EACAxlB,MAAAqb,UAAAlY,KAAA,SAAAskB,EAAAsD,GACA,GAAAgB,GAAA9wB,KACA2yB,IAIA,OAHA1F,GAAA6D,EAAA,SAAA/sB,EAAA4S,EAAApL,GACAonB,EAAApvB,KAAAipB,EAAAjsB,KAAAuvB,EAAAnZ,EAAApL,EAAAulB,KACS,QACT6B,IAIArF,EAAAxnB,OAAAqH,QAAA,SAAAiT,GACA,QAAAwS,MAEA,MADAA,GAAAxS,YACA,GAAAwS,IAGAC,EAAAtI,EAAAzkB,OAAAsa,UAAAM,gBAEAqP,GAAAjqB,OAAAC,MAAA,SAAA0V,GACA,GAAA1V,KACA,QAAAwG,KAAAkP,GACAoX,EAAApX,EAAAlP,IACAxG,EAAAxC,KAAAgJ,EAGA,OAAAxG,IAGA6kB,GAAAL,EAAAzkB,OAAAsa,UAAAhY,SAoBAyiB,GADA,mBAAAiI,aACAA,YAEA,SAAAnc,GACA3W,KAAA2W,QAMA,IAAAqU,IAAA,sBAuIAnqB,GAAAyJ,QAAAzJ,EAMAA,EAAAssB,WAKAtsB,EAAAC,kBAAA,EAYAD,EAAAoI,QAyHAA,EAAAmX,UAAA2S,iBAAA,WACA,GAAAjC,GAAA9wB,IACA,iBAAAwD,EAAAmT,GACAnT,EACAstB,EAAAtmB,OAAAhH,GACSiB,UAAA8D,OAAA,EACTuoB,EAAAxmB,QAAAojB,EAAAjpB,UAAA,IAEAqsB,EAAAxmB,QAAAqM,KAWA9V,EAAA0sB,QAAAjoB,EACAzE,EAAAyE,UAcAA,EAAA+oB,OACA/oB,EAAAuF,MACAvF,EAAAkF,SACAlF,EAAAgF,QAAAzJ,EAKAA,EAAAmyB,WAAA,SAAAvX,GAGA,MAAAA,IAGA8R,EAAAnN,UAAA4S,WAAA,WAGA,MAAAhzB,OAYAa,EAAAuE,KAAA,SAAA6tB,EAAAC,GACA,MAAAryB,GAAAoyB,GAAA7tB,KAAA8tB,IAGA3F,EAAAnN,UAAAhb,KAAA,SAAAQ,GACA,MAAA/E,IAAAb,KAAA4F,IAAAsqB,OAAA,SAAA+C,EAAAC,GACA,GAAAD,IAAAC,EAEA,MAAAD,EAEA,UAAAhvB,OAAA,6BAAAgvB,EAAA,IAAAC,MAUAryB,EAAAwtB,OAcAd,EAAAnN,UAAAiO,KAAA,WACA,MAAAruB,MAAAyJ,KAAA5I,EAAAwtB,OAcAxtB,EAAAsyB,YAAA5F,EAuDAA,EAAAnN,UAAAhY,SAAA,WACA,0BAGAmlB,EAAAnN,UAAA3W,KAAA,SAAAmlB,EAAAC,EAAAC,GAMA,QAAAsE,GAAAzc,GACA,IACA,wBAAAiY,KAAAjY,KACS,MAAAgU,GACT,MAAAngB,GAAAmgB,IAIA,QAAA0I,GAAA1I,GACA,qBAAAkE,GAAA,CACA/D,EAAAH,EAAAmG,EACA,KACA,MAAAjC,GAAAlE,GACa,MAAA2I,GACb,MAAA9oB,GAAA8oB,IAGA,MAAA9oB,GAAAmgB,GAGA,QAAA4I,GAAA5c,GACA,wBAAAmY,KAAAnY,KA1BA,GAAAma,GAAA9wB,KACAgJ,EAAAC,IACAvD,GAAA,CAiEA,OAtCAynB,GAAA,WACA2D,EAAA1D,gBAAA,SAAAzW,GACAjR,IAGAA,GAAA,EAEAsD,EAAAsB,QAAA8oB,EAAAzc,MACS,iBAAAgU,GACTjlB,IAGAA,GAAA,EAEAsD,EAAAsB,QAAA+oB,EAAA1I,UAKAmG,EAAA1D,gBAAA,+BAAAzW,GACA,GAAA6c,GACAC,GAAA,CACA,KACAD,EAAAD,EAAA5c,GACS,MAAA7O,GAET,GADA2rB,GAAA,GACA5yB,EAAAoC,QAGA,KAAA6E,EAFAjH,GAAAoC,QAAA6E,GAMA2rB,GACAzqB,EAAAglB,OAAAwF,MAIAxqB,EAAA1D,SAmBAzE,EAAA8tB,OAKApB,EAAAnN,UAAAsT,YAAA,SAAA/c,GACA,MAAA3W,MAAAyJ,KAAA,WAAkC,MAAAkN,MAGlC9V,EAAA6yB,YAAA,SAAApuB,EAAAqR,GACA,MAAA9V,GAAAyE,GAAAouB,YAAA/c,IAGA4W,EAAAnN,UAAAuT,WAAA,SAAA1Q,GACA,MAAAjjB,MAAAyJ,KAAA,WAAkC,KAAAwZ,MAGlCpiB,EAAA8yB,WAAA,SAAAruB,EAAA2d,GACA,MAAApiB,GAAAyE,GAAAquB,WAAA1Q,IAcApiB,EAAAgtB,SAeAhtB,EAAA6rB,YAOA7rB,EAAA8rB,iBASA9rB,EAAA4d,YAKA8O,EAAAnN,UAAA3B,UAAA,WACA,kBAAAze,KAAA8tB,UAAA1S,OAOAva,EAAAwmB,cAKAkG,EAAAnN,UAAAiH,YAAA,WACA,oBAAArnB,KAAA8tB,UAAA1S,OAMAva,EAAAkuB,aAKAxB,EAAAnN,UAAA2O,WAAA,WACA,mBAAA/uB,KAAA8tB,UAAA1S,MASA,IAAA6T,OACAC,MACAC,IAAA,CAoCAtuB,GAAAmuB,2BAEAnuB,EAAA+yB,oBAAA,WAEA,MAAA3E,IAAAna,SAGAjU,EAAAI,+BAAA,WACA+tB,IACAG,IAAA,GAGAH,IAQAnuB,EAAA2J,SA0BA3J,EAAAgsB,UA6DAhsB,EAAAmvB,SAqBAnvB,EAAAqvB,SAKA3C,EAAAnN,UAAA8P,OAAA,SAAAtB,EAAAC,GACA,MAAA7uB,MAAA6K,MAAApB,KAAA,SAAAoqB,GACA,MAAAjF,GAAApqB,MAAA,OAAAqvB,IACKhF,IA6BLhuB,EAAAsvB,QAyDAtvB,EAAA8vB,QA8BA9vB,EAAA,UAAA+vB,EAoBA/vB,EAAAgwB,WAgBAhwB,EAAAsd,WAKAoP,EAAAnN,UAAAjC,SAAA,SAAAqP,EAAArI,GACA,GAAA2L,GAAA9wB,KACAgJ,EAAAC,GAIA,OAHAkkB,GAAA,WACA2D,EAAA1D,gBAAApkB,EAAAsB,QAAAkjB,EAAArI,KAEAnc,EAAA1D,SASAzE,EAAA4uB,IAAA,SAAAhU,EAAAlP,GACA,MAAA1L,GAAA4a,GAAA0C,SAAA,OAAA5R,KAGAghB,EAAAnN,UAAAqP,IAAA,SAAAljB,GACA,MAAAvM,MAAAme,SAAA,OAAA5R,KAUA1L,EAAA6uB,IAAA,SAAAjU,EAAAlP,EAAAoK,GACA,MAAA9V,GAAA4a,GAAA0C,SAAA,OAAA5R,EAAAoK,KAGA4W,EAAAnN,UAAAsP,IAAA,SAAAnjB,EAAAoK,GACA,MAAA3W,MAAAme,SAAA,OAAA5R,EAAAoK,KASA9V,EAAAizB,IACAjzB,EAAA,mBAAA4a,EAAAlP,GACA,MAAA1L,GAAA4a,GAAA0C,SAAA,UAAA5R,KAGAghB,EAAAnN,UAAA0T,IACAvG,EAAAnN,UAAA,mBAAA7T,GACA,MAAAvM,MAAAme,SAAA,UAAA5R,KAgBA1L,EAAAkzB,OACAlzB,EAAAgvB,KAAA,SAAApU,EAAAxV,EAAAkf,GACA,MAAAtkB,GAAA4a,GAAA0C,SAAA,QAAAlY,EAAAkf,KAGAoI,EAAAnN,UAAA2T,OACAxG,EAAAnN,UAAAyP,KAAA,SAAA5pB,EAAAkf,GACA,MAAAnlB,MAAAme,SAAA,QAAAlY,EAAAkf,KAUAtkB,EAAAyV,KACAzV,EAAAmzB,MACAnzB,EAAAozB,OAAA,SAAAxY,EAAAxV,GACA,MAAApF,GAAA4a,GAAA0C,SAAA,QAAAlY,EAAAynB,EAAAjpB,UAAA,MAGA8oB,EAAAnN,UAAA9J,KACAiX,EAAAnN,UAAA4T,MACAzG,EAAAnN,UAAA6T,OAAA,SAAAhuB,GACA,MAAAjG,MAAAme,SAAA,QAAAlY,EAAAynB,EAAAjpB,UAAA,MAQA5D,EAAAqzB,OAAA,SAAAzY,EAAA0J,GACA,MAAAtkB,GAAA4a,GAAA0C,SAAA,gBAAAgH,KAGAoI,EAAAnN,UAAA8T,OAAA,SAAA/O,GACA,MAAAnlB,MAAAme,SAAA,gBAAAgH,KAQAtkB,EAAA,OACAA,EAAAqW,MAAA,SAAAuE,GACA,MAAA5a,GAAA4a,GAAA0C,SAAA,gBAAAuP,EAAAjpB,UAAA,MAGA8oB,EAAAnN,UAAAlJ,MAAA,WACA,MAAAlX,MAAAme,SAAA,gBAAAuP,EAAAjpB,cASA5D,EAAAszB,MAAA,SAAA1Y,GACA,GAAAnW,GAAAzE,EAAA4a,GACA0J,EAAAuI,EAAAjpB,UAAA,EACA,mBACA,MAAAa,GAAA6Y,SAAA,SACAne,KACAmlB,EAAAiP,OAAA1G,EAAAjpB,gBAIA8oB,EAAAnN,UAAA+T,MAAA,WACA,GAAA7uB,GAAAtF,KACAmlB,EAAAuI,EAAAjpB,UACA,mBACA,MAAAa,GAAA6Y,SAAA,SACAne,KACAmlB,EAAAiP,OAAA1G,EAAAjpB,gBAWA5D,EAAAkF,KAAA,SAAA0V,GACA,MAAA5a,GAAA4a,GAAA0C,SAAA,YAGAoP,EAAAnN,UAAAra,KAAA,WACA,MAAA/F,MAAAme,SAAA,YAYAtd,EAAAgK,MAoCA0iB,EAAAnN,UAAAvV,IAAA,WACA,MAAAA,GAAA7K,OAYAa,EAAAqwB,YAAA3E,EAAA2E,EAAA,4BAYA3D,EAAAnN,UAAA8Q,YAAA,WACA,MAAAA,GAAAlxB,OAMAa,EAAAwwB,aAYA9D,EAAAnN,UAAAiR,WAAA,WACA,MAAArxB,MAAAyJ,KAAA,SAAAsnB,GACA,MAAAlmB,GAAAsmB,EAAAJ,EAAA,SAAAzrB,GAEA,QAAA+uB,KACA,MAAA/uB,GAAAwoB,UAEA,MAJAxoB,GAAAzE,EAAAyE,GAIAA,EAAAmE,KAAA4qB,WAcAxzB,EAAAyzB,KACAzzB,EAAA,kBAAA4a,EAAAoT,GACA,MAAAhuB,GAAA4a,GAAAhS,KAAA,OAAAolB,IAGAtB,EAAAnN,UAAAkU,KACA/G,EAAAnN,UAAA,kBAAAyO,GACA,MAAA7uB,MAAAyJ,KAAA,OAAAolB,IAWAhuB,EAAAotB,WAKAV,EAAAnN,UAAA6N,SAAA,SAAAa,GACA,MAAA9uB,MAAAyJ,KAAA,cAAAqlB,IAcAjuB,EAAA+L,IACA/L,EAAA,oBAAA4a,EAAA+Q,GACA,MAAA3rB,GAAA4a,GAAA,WAAA+Q,IAGAe,EAAAnN,UAAAxT,IACA2gB,EAAAnN,UAAA,oBAAAoM,GAEA,MADAA,GAAA3rB,EAAA2rB,GACAxsB,KAAAyJ,KAAA,SAAAkN,GACA,MAAA6V,GAAAtV,QAAAzN,KAAA,WACA,MAAAkN,MAEK,SAAAsM,GAEL,MAAAuJ,GAAAtV,QAAAzN,KAAA,WACA,KAAAwZ,QAWApiB,EAAA6E,KAAA,SAAA+V,EAAAmT,EAAAC,EAAAZ,GACA,MAAAptB,GAAA4a,GAAA/V,KAAAkpB,EAAAC,EAAAZ,IAGAV,EAAAnN,UAAA1a,KAAA,SAAAkpB,EAAAC,EAAAZ,GACA,GAAAsG,GAAA,SAAA/wB,GAGA2pB,EAAA,WAEA,GADArC,EAAAtnB,EAAA8B,IACAzE,EAAAoC,QAGA,KAAAO,EAFA3C,GAAAoC,QAAAO,MAQA8B,EAAAspB,GAAAC,GAAAZ,EACAjuB,KAAAyJ,KAAAmlB,EAAAC,EAAAZ,GACAjuB,IAEA,iBAAAkyB,2BAAAN,SACA2C,EAAArC,QAAAN,OAAAxe,KAAAmhB,IAGAjvB,EAAAmE,KAAA,OAAA8qB,IAYA1zB,EAAA2zB,QAAA,SAAA/Y,EAAAgZ,EAAAvxB,GACA,MAAArC,GAAA4a,GAAA+Y,QAAAC,EAAAvxB,IAGAqqB,EAAAnN,UAAAoU,QAAA,SAAAC,EAAAvxB,GACA,GAAA8F,GAAAC,IACAyrB,EAAA9rB,WAAA,WACAI,EAAAwB,OAAA,GAAAvG,OAAAf,GAAA,mBAAAuxB,EAAA,SACKA,EAUL,OARAz0B,MAAAyJ,KAAA,SAAAkN,GACAiL,aAAA8S,GACA1rB,EAAAsB,QAAAqM,IACK,SAAAgU,GACL/I,aAAA8S,GACA1rB,EAAAwB,OAAAmgB,IACK3hB,EAAAglB,QAELhlB,EAAA1D,SAYAzE,EAAA8zB,MAAA,SAAAlZ,EAAA+Y,GAKA,MAJA,UAAAA,IACAA,EAAA/Y,EACAA,EAAA,QAEA5a,EAAA4a,GAAAkZ,MAAAH,IAGAjH,EAAAnN,UAAAuU,MAAA,SAAAH,GACA,MAAAx0B,MAAAyJ,KAAA,SAAAkN,GACA,GAAA3N,GAAAC,GAIA,OAHAL,YAAA,WACAI,EAAAsB,QAAAqM,IACS6d,GACTxrB,EAAA1D,WAaAzE,EAAA+zB,QAAA,SAAApI,EAAArH,GACA,MAAAtkB,GAAA2rB,GAAAoI,QAAAzP,IAGAoI,EAAAnN,UAAAwU,QAAA,SAAAzP,GACA,GAAAnc,GAAAC,IACA4rB,EAAAnH,EAAAvI,EAGA,OAFA0P,GAAAtxB,KAAAyF,EAAA+pB,oBACA/yB,KAAAk0B,OAAAW,GAAAP,KAAAtrB,EAAAwB,QACAxB,EAAA1D,SAYAzE,EAAAi0B,OAAA,SAAAtI,GACA,GAAArH,GAAAuI,EAAAjpB,UAAA,EACA,OAAA5D,GAAA2rB,GAAAoI,QAAAzP,IAGAoI,EAAAnN,UAAA0U,OAAA,WACA,GAAAD,GAAAnH,EAAAjpB,WACAuE,EAAAC,GAGA,OAFA4rB,GAAAtxB,KAAAyF,EAAA+pB,oBACA/yB,KAAAk0B,OAAAW,GAAAP,KAAAtrB,EAAAwB,QACAxB,EAAA1D,SAWAzE,EAAAk0B,OACAl0B,EAAAm0B,UAAA,SAAAxI,GACA,GAAAyI,GAAAvH,EAAAjpB,UAAA,EACA,mBACA,GAAAowB,GAAAI,EAAAb,OAAA1G,EAAAjpB,YACAuE,EAAAC,GAGA,OAFA4rB,GAAAtxB,KAAAyF,EAAA+pB,oBACAlyB,EAAA2rB,GAAA0H,OAAAW,GAAAP,KAAAtrB,EAAAwB,QACAxB,EAAA1D,UAIAioB,EAAAnN,UAAA2U,OACAxH,EAAAnN,UAAA4U,UAAA,WACA,GAAA7P,GAAAuI,EAAAjpB,UAEA,OADA0gB,GAAA+F,QAAAlrB,MACAa,EAAAm0B,UAAAxwB,MAAA,OAAA2gB,IAGAtkB,EAAAq0B,MAAA,SAAA1I,EAAAsD,GACA,GAAAmF,GAAAvH,EAAAjpB,UAAA,EACA,mBAIA,QAAA0wB,KACA,MAAA3I,GAAAhoB,MAAAsrB,EAAArrB,WAJA,GAAAowB,GAAAI,EAAAb,OAAA1G,EAAAjpB,YACAuE,EAAAC,GAMA,OALA4rB,GAAAtxB,KAAAyF,EAAA+pB,oBAIAlyB,EAAAs0B,GAAAjB,OAAAW,GAAAP,KAAAtrB,EAAAwB,QACAxB,EAAA1D,UAIAioB,EAAAnN,UAAA8U,MAAA,WACA,GAAA/P,GAAAuI,EAAAjpB,UAAA,EAEA,OADA0gB,GAAA+F,QAAAlrB,MACAa,EAAAq0B,MAAA1wB,MAAA,OAAA2gB,IAYAtkB,EAAAu0B,QACAv0B,EAAAw0B,MAAA,SAAA5Z,EAAAxV,EAAAkf,GACA,MAAAtkB,GAAA4a,GAAA4Z,MAAApvB,EAAAkf,IAGAoI,EAAAnN,UAAAgV,QACA7H,EAAAnN,UAAAiV,MAAA,SAAApvB,EAAAkf,GACA,GAAA0P,GAAAnH,EAAAvI,OACAnc,EAAAC,GAGA,OAFA4rB,GAAAtxB,KAAAyF,EAAA+pB,oBACA/yB,KAAAme,SAAA,QAAAlY,EAAA4uB,IAAAP,KAAAtrB,EAAAwB,QACAxB,EAAA1D,SAaAzE,EAAAy0B,MACAz0B,EAAA00B,OACA10B,EAAA20B,QAAA,SAAA/Z,EAAAxV,GACA,GAAA4uB,GAAAnH,EAAAjpB,UAAA,GACAuE,EAAAC,GAGA,OAFA4rB,GAAAtxB,KAAAyF,EAAA+pB,oBACAlyB,EAAA4a,GAAA0C,SAAA,QAAAlY,EAAA4uB,IAAAP,KAAAtrB,EAAAwB,QACAxB,EAAA1D,SAGAioB,EAAAnN,UAAAkV,MACA/H,EAAAnN,UAAAmV,OACAhI,EAAAnN,UAAAoV,QAAA,SAAAvvB,GACA,GAAA4uB,GAAAnH,EAAAjpB,UAAA,GACAuE,EAAAC,GAGA,OAFA4rB,GAAAtxB,KAAAyF,EAAA+pB,oBACA/yB,KAAAme,SAAA,QAAAlY,EAAA4uB,IAAAP,KAAAtrB,EAAAwB,QACAxB,EAAA1D,SAaAzE,EAAAywB,UAKA/D,EAAAnN,UAAAkR,QAAA,SAAAC,GACA,MAAAA,IACAvxB,KAAAyJ,KAAA,SAAAkN,GACAwW,EAAA,WACAoE,EAAA,KAAA5a,MAES,SAAAnT,GACT2pB,EAAA,WACAoE,EAAA/tB,OANAxD,QAUAA,KAKA,IAAAosB,IAAAC,GAEA,OAAAxrB,MpBu9UM,SAAShB,IqB7zYd,SAAAkE,GACD,GAAA0xB,GAAA,aAEA,SAAAxvB,EAAAokB,GAEAxqB,EAAAD,QAAAyqB,KAMK,iBAIL,QAAAqL,GAAAC,GACA,aAAApM,WAAAkM,EACArE,EACa7H,QAAAoM,KAAA5xB,EACb6xB,EAAArM,QAAA,QAAA6H,EAEAwE,EAAArM,QAAAoM,GAIA,QAAAC,GAAArM,EAAAoM,GACA,GAAAlgB,GAAA8T,EAAAoM,EACA,OAAAlgB,GAAArC,OAAArP,EACAwC,SAAA6Z,UAAAhN,OAAArP,EACA,WACA0R,EAAAjR,MAAA+kB,EAAA9kB,YAGA8B,SAAA6Z,UAAAhN,KAAA7S,KAAAgpB,EAAAoM,GAAApM,GAGAA,EAAAoM,GAAAviB,KAAAmW,GAYA,QAAAsM,KACA,OAAAC,GAAA,EAA4BA,EAAAC,EAAAxtB,OAAwButB,IACpDhF,EAAAiF,EAAAD,IAAA1E,EAIA,QAAA4E,KACA,aAAA1zB,UAAAmzB,GACAnzB,OAAAG,WAAAsB,GACAzB,OAAAG,SAAAwzB,SAAAlyB,EAGA,QAAAmyB,GAAAC,GACA,GAAAH,IAAA,CAIA,GAAAI,EAEA,QAAA7pB,KAAAukB,GAAAuF,OACA,GAAAvF,EAAAuF,OAAA3V,eAAAnU,IAAAukB,EAAAuF,OAAA9pB,KAAA4pB,EAAA,CACAC,EAAA7pB,CACA,OAIA6pB,IAAAryB,IACAzB,OAAAG,SAAAwzB,OAAA,YAAAG,EAAA,MAMA,QAAAE,KACA,GAAAC,EAEA,IAAAP,IAAA,CACA,GAAAQ,GAAAC,EAAA5K,KAAAvpB,OAAAG,SAAAwzB,WACAM,GAAAC,EAAA,GAGA1F,EAAAlwB,SAAAkwB,EAAAuF,OAAAE,IAAAzF,EAAAuF,OAAAK,MA7EA,GAAA5F,MACAM,EAAA,aA2BA2E,GACA,QACA,QACA,OACA,OACA,SAkCAU,EAAA,kBAmBA3F,GAAAuF,QAAuBM,MAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAH,KAAA,EACvBI,MAAA,EAAAC,OAAA,GAEAjG,EAAAlwB,SAAA,SAAAo2B,GACA,mBAAAA,OAAA,GAAAA,GAAAlG,EAAAuF,OAAAU,OAAA,CAGA,GAFAb,EAAAc,GAEAA,IAAAlG,EAAAuF,OAAAU,OAEA,MADAlB,KACA,MACiB,UAAAtM,WAAAkM,EAEjB,KADAI,KACA,kCAEA,QAAAC,GAAA,EAAoCA,EAAAC,EAAAxtB,OAAwButB,IAAA,CAC5D,GAAAH,GAAAI,EAAAD,EAGAhF,GAAA6E,GADAqB,GAAAlG,EAAAuF,OAAAV,EAAA9gB,eACA6gB,EAAAC,GAEAvE,OAIa,oBAAA4F,GAGb,kDAAAA,CAFAlG,GAAAlwB,SAAAkwB,EAAAuF,OAAAW,EAAAniB,kBAMAic,EAAAmG,UAAA,WACAnG,EAAAlwB,SAAAkwB,EAAAuF,OAAAM,QAGA7F,EAAAoG,WAAA,WACApG,EAAAlwB,SAAAkwB,EAAAuF,OAAAU,QAGA,KACAT,IACS,MAAAxuB,GACTgpB,EAAAlwB,SAAAkwB,EAAAuF,OAAAU,QAEA,MAAAjG,SrB60YM,SAASjxB,OAAQD,QAASM,qBAE/B,GAAIi3B,8BAA8BC,+BsBp+YnC,SAAAv3B;AAEA,GAAAqT,IAA4CrT,OAAAD,SAC5C,WAkoFA,GA1nFA,SAAAA,EAAAy3B,GAQA,GAAAnkB,GAAAtT,CAQAsT,GAAA5R,QAAA,SAQA4R,EAAA8F,SAAA,EAQA9F,EAAAokB,cAQApkB,EAAAqkB,KAOArkB,EAAAskB,WAWAtkB,EAAAvP,QAAA,SAAAsV,EAAAwe,GACA,GACAC,GACA1jB,EAFAkC,EAAAhD,EAAAykB,KAAAC,SAAA3e,EAIAoe,MAAA3rB,WACAwK,EAAA8C,SAAA9C,EAAA8C,UAAAqe,EAAA3rB,SAAAsN,SAAAlE,MAAA,MACAoB,EAAA+C,KAAA/C,EAAA+C,OAAAoe,EAAA50B,SACA40B,EAAA50B,SAAAmvB,OAAAyF,EAAA3rB,SAAAC,UACAuK,EAAAtK,KAAAsK,EAAAtK,MAAAyrB,EAAA3rB,SAAAE,MAGA8rB,EAAAxkB,EAAAykB,KAAAE,UAAA3hB,EAEA,IAAA5E,IACA2H,KAAA/C,EAAA+C,KACAK,OAAA,SAAApD,EAAA8C,SACApN,KAAAsK,EAAAtK,OAAA,SAAAsK,EAAA8C,SAAA,QACAO,MAAArD,EAAAqD,OAAA,GAgBA,OAbArG,GAAAykB,KAAAG,MAAAxmB,EAAAmmB,IAEAnmB,EAAA,0BAAA4B,EAAAskB,QAAAE,MACA1jB,EAAA,GAAAd,GAAA6kB,OAAAzmB,KAGAA,EAAA,yBAAA0C,IACAd,EAAAskB,QAAAE,GAAA1jB,GAGAA,KAAAd,EAAAskB,QAAAE,GAGA1jB,EAAAgkB,GAAA9hB,EAAA/B,KAAA5L,OAAA,EAAA2N,EAAA/B,KAAA,MAGC,gBAAAtU,eAAAD,QAAAI,KAAAkT,MAA6DlT,MAO9D,SAAAJ,EAAAy3B,GAQA,GAAAM,GAAA/3B,EAAA+3B,QASAM,EAAA,mMAEAC,GAAA,6DACA,2DACA,SAEAP,GAAAC,SAAA,SAAAhjB,GAKA,IAJA,GAAApU,GAAAy3B,EAAApM,KAAAjX,GAAA,IACAsB,KACAjR,EAAA,GAEAA,KACAiR,EAAAgiB,EAAAjzB,IAAAzE,EAAAyE,IAAA,EAGA,OAAAiR,IAUAyhB,EAAAE,UAAA,SAAA3hB,GACA,GAAA8C,GAAA9C,EAAA8C,SACAC,EAAA/C,EAAA+C,KACArN,EAAAsK,EAAAtK,IAcA,OAZA,YAAAyrB,IACApe,KAAAxW,SAAAmvB,OACAhmB,MAAA,SAAAoN,GACA,WAAAvW,SAAAiJ,SAAAsN,SAAA,IAAAvW,SAAAiJ,SAAAE,QAEAqN,KAAA,YAEArN,GAAA,SAAAoN,IACApN,EAAA,OAIAoN,GAAA,cAAAC,EAAA,KAAArN,GAAA,KAWA+rB,EAAApe,MAAA,SAAA4e,EAAAC,GACA,GAAA7e,GAAAoe,EAAAU,WAAAF,GAAA,IACAG,IAEAX,GAAAG,MAAAve,EAAAoe,EAAAU,WAAAD,GAAA,IACA,QAAAG,KAAAhf,GACAA,EAAAmH,eAAA6X,IACAD,EAAA/0B,KAAAg1B,EAAA,IAAAhf,EAAAgf,GAIA,OAAAD,GAAA/vB,OAAA,IAAA+vB,EAAAlzB,KAAA,SAUAuyB,EAAAU,WAAA,SAAAG,GAOA,IANA,GAIAC,GAJAlf,KACA3V,EAAA40B,EAAA3zB,MAAA,KACAI,EAAA,EACAyzB,EAAA90B,EAAA2E,OAGUmwB,EAAAzzB,IAAOA,EACjBwzB,EAAA70B,EAAAqB,GAAAJ,MAAA,KACA4zB,EAAA,KACAlf,EAAAkf,EAAA,IAAAA,EAAA,GAIA,OAAAlf,GAYA,IAAAof,IAAA,CAEAhB,GAAAiB,KAAA,SAAA9kB,GACA,kBAAAujB,IAAA,aAAA50B,SAAA+T,YAAAmiB,EACA7kB,KAGA6jB,EAAAnf,GAAA6e,EAAA,OAAAvjB,GAAA,GAAA6jB,SASAA,EAAAnf,GAAA,SAAA0N,EAAA2S,EAAA/kB,EAAAglB,GACA5S,EAAA6S,YACA7S,EAAA6S,YAAA,KAAAF,EAAA/kB,GACKoS,EAAA8S,kBACL9S,EAAA8S,iBAAAH,EAAA/kB,EAAAglB,IAYAnB,EAAAsB,QAAA,SAAAC,GAEA,GAAAA,GAAA,mBAAAC,kBAAAxB,EAAAyB,GAAAC,QACA,UAAAF,eAGA,uBAAAriB,mBAAAoiB,GAAAvB,EAAAyB,GAAAC,SACA,UAAAviB,eAGA,KAAAoiB,EACA,IACA,WAAA52B,QAAA,UAAA8xB,OAAA,UAAAhvB,KAAA,4BACO,MAAA0C,IAGP,aAcA,mBAAAxF,SACAq1B,EAAAiB,KAAA,WACAD,GAAA,IAWAhB,EAAA1uB,MAAA,SAAA6K,GACA,MAAA6jB,GAAAyB,GAAAE,QAAA,mBAAAC,gBAIA5B,EAAAiB,KAAA,WACAhwB,WAAAkL,EAAA,OADA6jB,QAHA7jB,KAcA6jB,EAAAG,MAAA,SAAAnvB,EAAA6wB,EAAAC,EAAAC,GACA,GAEAC,GAFAC,EAAAF,MACAG,EAAA,mBAAAJ,GAAA,EAAAA,CAGA,KAAAE,IAAAH,GACAA,EAAA9Y,eAAAiZ,IAAAhC,EAAAzwB,QAAA0yB,EAAAD,GAAA,IACA,gBAAAhxB,GAAAgxB,IAAAE,EAIAlC,EAAAG,MAAAnvB,EAAAgxB,GAAAH,EAAAG,GAAAE,EAAA,EAAAD,IAHAjxB,EAAAgxB,GAAAH,EAAAG,GACAC,EAAAr2B,KAAAi2B,EAAAG,KAOA,OAAAhxB,IASAgvB,EAAAmC,MAAA,SAAAC,EAAAC,GACArC,EAAAG,MAAAiC,EAAA3Z,UAAA4Z,EAAA5Z,YASAuX,EAAAsC,QAAA,SAAAF,EAAAC,GACA,QAAAxP,MACAA,EAAApK,UAAA4Z,EAAA5Z,UACA2Z,EAAA3Z,UAAA,GAAAoK,IAaAmN,EAAAuC,QAAAn1B,MAAAm1B,SAAA,SAAAvmB,GACA,yBAAA7N,OAAAsa,UAAAhY,SAAA7H,KAAAoT,IASAgkB,EAAAwC,UAAA,SAAAC,EAAAC,GAKA,OAJAC,MACAC,EAAAH,EAAA7xB,OAAA8xB,EAAA9xB,OAAA6xB,EAAAC,EACAG,EAAAJ,EAAA7xB,OAAA8xB,EAAA9xB,OAAA8xB,EAAAD,EAEAn1B,EAAA,EAAAyzB,EAAA8B,EAAAjyB,OAAwCmwB,EAAAzzB,EAAOA,KAC/C0yB,EAAAzwB,QAAAqzB,EAAAC,EAAAv1B,KACAq1B,EAAA/2B,KAAAi3B,EAAAv1B,GAGA,OAAAq1B,IAUA3C,EAAAzwB,QAAA,SAAAkzB,EAAAK,EAAAx1B,GAEA,OAAAsyB,GAAA6C,EAAA7xB,OAAAtD,EAAA,EAAAA,EAAA,EAAAA,EAAAsyB,EAAA,EAAAtyB,EAAAsyB,EAAAtyB,GAAA,EACAsyB,EAAAtyB,GAAAm1B,EAAAn1B,KAAAw1B,EAA+Bx1B,KAE/B,MAAAA,IAAAsyB,EAAA,GAAAtyB,GASA0yB,EAAA+C,QAAA,SAAAC,GAGA,OAFAP,MAEAn1B,EAAA,EAAAyzB,EAAAiC,EAAApyB,OAAmCmwB,EAAAzzB,EAAOA,IAC1Cm1B,EAAA72B,KAAAo3B,EAAA11B,GAEA,OAAAm1B,IASAzC,EAAAyB,MAQAzB,EAAAyB,GAAAC,QAAA,mBAAAviB,iBAAA,WACA,IACA,GAAA3O,GAAA,GAAA2O,gBACK,MAAAhP,GACL,SAGA,MAAA/D,SAAAoE,EAAAyyB,mBASAjD,EAAAyB,GAAAE,OAAA,mBAAAnzB,YACA,UAAA00B,KAAA10B,UAAAkZ,WAQAsY,EAAAyB,GAAA0B,QAAA,mBAAA30B,YACA,oBAAA00B,KAAA10B,UAAAkZ,YAEC,mBAAAnM,OAAArT,OAAAD,QAAAI,MAOD,SAAAJ,EAAAsT,GAcA,QAAA3R,MARA3B,EAAA2B,eAgBAA,EAAA6e,UAAA5H,GAAA,SAAAvS,EAAA6N,GAaA,MAZA9T,MAAA+6B,UACA/6B,KAAA+6B,YAGA/6B,KAAA+6B,QAAA90B,GAEKiN,EAAAykB,KAAAuC,QAAAl6B,KAAA+6B,QAAA90B,IACLjG,KAAA+6B,QAAA90B,GAAA1C,KAAAuQ,GAEA9T,KAAA+6B,QAAA90B,IAAAjG,KAAA+6B,QAAA90B,GAAA6N,GAJA9T,KAAA+6B,QAAA90B,GAAA6N,EAOA9T,MAGAuB,EAAA6e,UAAA4a,YAAAz5B,EAAA6e,UAAA5H,GAQAjX,EAAA6e,UAAA/b,KAAA,SAAA4B,EAAA6N,GAGA,QAAA0E,KACAsY,EAAAmK,eAAAh1B,EAAAuS,GACA1E,EAAAtP,MAAAxE,KAAAyE,WAJA,GAAAqsB,GAAA9wB,IAUA,OAHAwY,GAAA7Q,SAAAmM,EACA9T,KAAAwY,GAAAvS,EAAAuS,GAEAxY,MASAuB,EAAA6e,UAAA6a,eAAA,SAAAh1B,EAAA6N,GACA,GAAA9T,KAAA+6B,SAAA/6B,KAAA+6B,QAAA90B,GAAA,CACA,GAAA+M,GAAAhT,KAAA+6B,QAAA90B,EAEA,IAAAiN,EAAAykB,KAAAuC,QAAAlnB,GAAA,CAGA,OAFAkoB,GAAA,GAEAj2B,EAAA,EAAAyzB,EAAA1lB,EAAAzK,OAAwCmwB,EAAAzzB,EAAOA,IAC/C,GAAA+N,EAAA/N,KAAA6O,GAAAd,EAAA/N,GAAA0C,UAAAqL,EAAA/N,GAAA0C,WAAAmM,EAAA,CACAonB,EAAAj2B,CACA,OAIA,KAAAi2B,EACA,MAAAl7B,KAGAgT,GAAAxK,OAAA0yB,EAAA,GAEAloB,EAAAzK,cACAvI,MAAA+6B,QAAA90B,QAEO+M,IAAAc,GAAAd,EAAArL,UAAAqL,EAAArL,WAAAmM,UACP9T,MAAA+6B,QAAA90B,GAIA,MAAAjG,OASAuB,EAAA6e,UAAA7I,mBAAA,SAAAtR,GACA,MAAAlC,UAAAkC,GACAjG,KAAA+6B,WACA/6B,OAGAA,KAAA+6B,SAAA/6B,KAAA+6B,QAAA90B,KACAjG,KAAA+6B,QAAA90B,GAAA,MAGAjG,OASAuB,EAAA6e,UAAA+a,UAAA,SAAAl1B,GAaA,MAZAjG,MAAA+6B,UACA/6B,KAAA+6B,YAGA/6B,KAAA+6B,QAAA90B,KACAjG,KAAA+6B,QAAA90B,OAGAiN,EAAAykB,KAAAuC,QAAAl6B,KAAA+6B,QAAA90B,MACAjG,KAAA+6B,QAAA90B,IAAAjG,KAAA+6B,QAAA90B,KAGAjG,KAAA+6B,QAAA90B,IASA1E,EAAA6e,UAAAzK,KAAA,SAAA1P,GACA,IAAAjG,KAAA+6B,QACA,QAGA,IAAAtiB,GAAAzY,KAAA+6B,QAAA90B,EAEA,KAAAwS,EACA,QAGA,IAAA0M,GAAApgB,MAAAqb,UAAAtL,MAAAvU,KAAAkE,UAAA,EAEA,sBAAAgU,GACAA,EAAAjU,MAAAxE,KAAAmlB,OACK,KAAAjS,EAAAykB,KAAAuC,QAAAzhB,GAOL,QAJA,QAFA0iB,GAAA1iB,EAAA3D,QAEA7P,EAAA,EAAAyzB,EAAAyC,EAAA5yB,OAA2CmwB,EAAAzzB,EAAOA,IAClDk2B,EAAAl2B,GAAAT,MAAAxE,KAAAmlB,GAMA,WAIA,mBAAAjS,OAAArT,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,SAaA,SAAAA,QAAAy7B,YACA,YAYA,SAAA7Q,GAAA8Q,GAEA,UAAAA,EAAA,IAAAA,IAGA,QAAAC,MAAAC,GACA,MAAAC,UAAAD,EAAA7N,WACA6N,EAAAE,iBAAA,IACAlR,EAAAgR,EAAAG,cAAA,OACAnR,EAAAgR,EAAAI,cAAA,IACApR,EAAAgR,EAAAK,eAAA,IACArR,EAAAgR,EAAAM,iBAAA,IACAtR,EAAAgR,EAAAO,iBAAA,SAmBA,QAAAC,OAAAC,GAQA,MADAC,WAAAC,UAAA,EACAD,UAAArB,KAAAoB,GAAA,IAAAA,EAAAzmB,QAAA0mB,UAAA,SAAA/zB,GACA,GAAA1H,GAAA27B,KAAAj0B,EACA,uBAAA1H,KACA,cAAA0H,EAAAk0B,WAAA,GAAAj0B,SAAA,KAAA0M,MAAA,MACO,QAAAmnB,EAAA,IAIP,QAAArnB,KAAArI,EAAA+vB,GAIA,GAAAr3B,GACAs3B,EACAC,EACAj0B,EAEAk0B,EADAC,EAAAC,IAEAhmB,EAAA2lB,EAAA/vB,EAiBA,QAbAoK,YAAAtD,QACAsD,EAAA4kB,KAAAhvB,IAMA,kBAAAqwB,OACAjmB,EAAAimB,IAAAr8B,KAAA+7B,EAAA/vB,EAAAoK,UAKAA,IACA,aACA,MAAAqlB,OAAArlB,EAEA,cAIA,MAAA8kB,UAAA9kB,GAAAkmB,OAAAlmB,GAAA,MAEA,eACA,WAMA,MAAAkmB,QAAAlmB,EAKA,cAKA,IAAAA,EACA,YAUA,IALAgmB,KAAAG,OACAL,KAIA,mBAAA32B,OAAAsa,UAAAhY,SAAA5D,MAAAmS,GAAA,CAMA,IADApO,EAAAoO,EAAApO,OACAtD,EAAA,EAAyBsD,EAAAtD,EAAYA,GAAA,EACrCw3B,EAAAx3B,GAAA2P,IAAA3P,EAAA0R,IAAA,MAUA,OAJA6lB,GAAA,IAAAC,EAAAl0B,OAAA,KAAAo0B,IACA,MAAAA,IAAAF,EAAAr3B,KAAA,MAAAu3B,KAAA,KAAAD,EAAA,IACA,IAAAD,EAAAr3B,KAAA,SACAu3B,IAAAD,EACAF,EAKA,GAAAI,KAAA,gBAAAA,KAEA,IADAr0B,EAAAq0B,IAAAr0B,OACAtD,EAAA,EAAyBsD,EAAAtD,EAAYA,GAAA,EACrC,gBAAA23B,KAAA33B,KACAs3B,EAAAK,IAAA33B,GACAu3B,EAAA5nB,IAAA2nB,EAAA5lB,GACA6lB,GACAC,EAAAl5B,KAAAy4B,MAAAO,IAAAI,IAAA,UAAAH,QAQA,KAAAD,IAAA5lB,GACA7Q,OAAAsa,UAAAM,eAAAngB,KAAAoW,EAAA4lB,KACAC,EAAA5nB,IAAA2nB,EAAA5lB,GACA6lB,GACAC,EAAAl5B,KAAAy4B,MAAAO,IAAAI,IAAA,UAAAH,GAaA,OAJAA,GAAA,IAAAC,EAAAl0B,OAAA,KAAwCo0B,IACxC,MAAgBA,IAAAF,EAAAr3B,KAAA,MAAAu3B,KAAA,KAAAD,EAAA,IAChB,IAAgBD,EAAAr3B,KAAA,SAChBu3B,IAAAD,EACAF,GA/KA,GAAAnB,uBAAArtB,MACA,MAAApO,SAAAmO,MACAC,MAAAqtB,WAAArtB,MACAC,UAAAotB,WAAAptB,UAIA,IAAAF,MAAAnO,QAAAmO,QAiBAgvB,GAAA,2GACAb,UAAA,2HACAS,IACAG,OACAV,MACAY,KAAA,MACAC,IAAA,MACAC,KAAA,MACAC,KAAA,MACAC,KAAA,MACAC,IAAA,MACAC,KAAA,QAEAV,GAgJA7uB,MAAAE,UAAA,SAAA0I,EAAA4mB,EAAAC,GAQA,GAAAv4B,EAOA,IANA03B,IAAA,GACAG,OAAA,GAKA,gBAAAU,GACA,IAAAv4B,EAAA,EAAqBu4B,EAAAv4B,EAAWA,GAAA,EAChC63B,QAAA,QAKO,gBAAAU,KACPV,OAAAU,EAOA,IADAZ,IAAAW,EACAA,GAAA,kBAAAA,KACA,gBAAAA,IACA,gBAAAA,GAAAh1B,QACA,SAAAtE,OAAA,iBAMA,OAAA2Q,KAAA,IAAsB,GAAA+B,KAKtB5I,KAAAC,MAAA,SAAAyvB,KAAAC,SAMA,QAAAC,MAAArB,EAAA/vB,GAKA,GAAAgwB,GAAAC,EAAA7lB,EAAA2lB,EAAA/vB,EACA,IAAAoK,GAAA,gBAAAA,GACA,IAAA4lB,IAAA5lB,GACA7Q,OAAAsa,UAAAM,eAAAngB,KAAAoW,EAAA4lB,KACAC,EAAAmB,KAAAhnB,EAAA4lB,GACAx4B,SAAAy4B,EACA7lB,EAAA4lB,GAAAC,QAEA7lB,GAAA4lB,GAKA,OAAAmB,SAAAn9B,KAAA+7B,EAAA/vB,EAAAoK,GApBA,GAAA4gB,EAkDA,IAtBAkG,KAAAZ,OAAAY,MACAV,GAAAZ,UAAA,EACAY,GAAAlC,KAAA4C,QACAA,UAAAjoB,QAAAunB,GAAA,SAAA50B,GACA,aACA,OAAAA,EAAAk0B,WAAA,GAAAj0B,SAAA,KAAA0M,MAAA,OAiBA,gBACA+lB,KAAA4C,KAAAjoB,QAAA,sCAAmE,KACnEA,QAAA,wEACAA,QAAA,4BAYA,MALA+hB,GAAAqG,KAAA,IAAAH,KAAA,KAKA,kBAAAC,SACAC,MAAoB,GAAApG,GAAM,IAAAA,CAK1B,UAAAsG,aAAA,gBAIA,mBAAA3qB,OAAArT,OAAAD,QACA,mBAAAmO,WAAAhK,QASA,SAAAnE,EAAAsT,GAQA,GAAA4qB,GAAAl+B,EAAAk+B,UAMAC,EAAAD,EAAAC,SACA,aACA,UACA,YACA,UACA,OACA,QACA,MACA,QACA,QAOAC,EAAAF,EAAAE,SACA,0BACA,wBACA,gBAOAC,EAAAH,EAAAG,QACA,aAOAlwB,EAAAmF,EAAAnF,KACA7G,EAAAgM,EAAAykB,KAAAzwB,OAQA42B,GAAAI,aAAA,SAAAC,GACA,GAAAppB,GAAA7N,EAAA62B,EAAAI,EAAAppB,MACA1U,EAAA89B,EAAA99B,IAAA,GACA2M,EAAAmxB,EAAAnxB,UAAA,GACAoxB,EAAAD,EAAAC,IACAvoB,EAAA,IAEA,QAAAsoB,EAAAppB,MACA,YACA,GAAAkO,GAAAkb,EAAAlb,OAAA/b,EAAA82B,EAAAG,EAAAlb,QAAA,GACAob,EAAAF,EAAAF,OAAA/2B,EAAA+2B,EAAAE,EAAAF,QAAA,IAEA,KAAAhb,GAAA,KAAAob,KACAxoB,EAAAoN,GAAA,KAAAob,EAAA,IAAAA,EAAA,IAEA,MAEA,eACA,KAAAF,EAAAtoB,OACAA,EAAAsoB,EAAAtoB,KACA,MAEA,aACA,GAAAyoB,IAAkBr4B,KAAAk4B,EAAAl4B,KAElBk4B,GAAAhZ,MAAAgZ,EAAAhZ,KAAA5c,SACA+1B,EAAAnZ,KAAAgZ,EAAAhZ,MAGAtP,EAAA9H,EAAAE,UAAAqwB,EACA,MAEA,YACAzoB,EAAA9H,EAAAE,UAAAkwB,EAAAtoB,KACA,MAEA,eACAsoB,EAAA3F,KACA3iB,EAAAsoB,EAAA3F,GACA,MAEA,WACA3iB,EAAAsoB,EAAAI,OACAJ,EAAAhZ,MAAAgZ,EAAAhZ,KAAA5c,OACA,IAAAwF,EAAAE,UAAAkwB,EAAAhZ,MAAA,IAKA,GAAAqZ,IACAzpB,EACA1U,GAAA,QAAA+9B,EAAA,QACApxB,EAOA,OAHA,QAAA6I,GAAA9R,SAAA8R,GACA2oB,EAAAj7B,KAAAsS,GAEA2oB,EAAAp5B,KAAA,MAUA04B,EAAAW,cAAA,SAAAV,GACA,GAAAW,GAAA,EAEA,OAAAX,EAAAx1B,OACA,MAAAw1B,GAAA,EAEA,QAAA94B,GAAA,EAAAyzB,EAAAqF,EAAAx1B,OAAuCmwB,EAAAzzB,EAAOA,IAAA,CAC9C,GAAAk5B,GAAAJ,EAAA94B,EACAy5B,IAAA,IAAAP,EAAA51B,OAAA,IAAAw1B,EAAA94B,GAGA,MAAAy5B,GASA,IAAAC,GAAA,6CAEAb,GAAAc,aAAA,SAAA/oB,GACA,GAAAkD,GAAAlD,EAAAxS,MAAAs7B,EAEA,KAAA5lB,EAAA,QAEA,IAAA1Y,GAAA0Y,EAAA,OACAlD,EAAAkD,EAAA,OACAolB,GACAppB,KAAAgpB,EAAAhlB,EAAA,IACA/L,SAAA+L,EAAA,OAaA,QATA1Y,IACA89B,EAAA99B,KAEA89B,EAAAC,IADArlB,EAAA,GACA,QAEA,GAIAolB,EAAAppB,MACA,YACA,GAAAgE,GAAAlD,EAAAhR,MAAA,IACAs5B,GAAAlb,OAAA+a,EAAAjlB,EAAA,QACAolB,EAAAF,SAAAllB,EAAA,OACA,MAEA,eACAolB,EAAAtoB,QAAA,EACA,MAEA,aACA,IACA,GAAAgpB,GAAA9wB,EAAAC,MAAA6H,EACAsoB,GAAAl4B,KAAA44B,EAAA54B,KACAk4B,EAAAhZ,KAAA0Z,EAAA1Z,KACS,MAAArd,IAETq2B,EAAAhZ,KAAAgZ,EAAAhZ,QACA,MAEA,YACA,IACAgZ,EAAAtoB,KAAA9H,EAAAC,MAAA6H,GACS,MAAA/N,IACT,KAEA,eACAq2B,EAAA3F,GAAA3iB,GAAA,EACA,MAEA,WACA,GAAAkD,GAAAlD,EAAAxS,MAAA,qBACA,IAAA0V,IACAolB,EAAAI,MAAAxlB,EAAA,GACAolB,EAAAhZ,QAEApM,EAAA,IACA,IACAolB,EAAAhZ,KAAApM,EAAA,GAAAhL,EAAAC,MAAA+K,EAAA,OACa,MAAAjR,IAGb,KAEA,kBACA,iBAIA,MAAAq2B,IAUAL,EAAAgB,cAAA,SAAAjpB,GAEA,QAAAA,EAAAkpB,OAAA,IAGA,OAFAzE,MAEAr1B,EAAA,EAAAsD,EAAA,GAAkCtD,EAAA4Q,EAAAtN,OAAiBtD,IACnD,KAAA4Q,EAAAkpB,OAAA95B,IACAq1B,EAAA/2B,KAAAu6B,EAAAc,aAAA/oB,EAAAmpB,OAAA/5B,EAAA,GAAA+5B,OAAA,EAAAz2B,KACAtD,GAAA6mB,OAAAvjB,GAAA,EACAA,EAAA,IAEAA,GAAAsN,EAAAkpB,OAAA95B,EAIA,OAAAq1B,GAEA,OAAAwD,EAAAc,aAAA/oB,MAKA,mBAAA3C,OAAArT,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,SAQA,SAAAA,EAAAsT,GAeA,QAAA+rB,GAAAjrB,EAAAkrB,GACAl/B,KAAAgU,SACAhU,KAAAk/B,SAXAt/B,EAAAq/B,YAkBA/rB,EAAAykB,KAAAmC,MAAAmF,EAAA/rB,EAAA3R,cASA09B,EAAA7e,UAAA+e,WAAA,WACA,UAYAF,EAAA7e,UAAAgf,OAAA,SAAAvpB,GAUA,GATA7V,KAAAq/B,qBAKAr/B,KAAAgU,OAAAiD,WAAAjX,KAAAgU,OAAAC,YAAAjU,KAAAgU,OAAAsrB,eACAt/B,KAAAu/B,kBAGA,KAAA1pB,EAAA,CAEA,GAAA2pB,GAAAtsB,EAAA4qB,OAAAgB,cAAAjpB,EAEA,IAAA2pB,KAAAj3B,OACA,OAAAtD,GAAA,EAAAyzB,EAAA8G,EAAAj3B,OAAwCmwB,EAAAzzB,EAAOA,IAC/CjF,KAAAy/B,SAAAD,EAAAv6B,IAKA,MAAAjF,OASAi/B,EAAA7e,UAAAqf,SAAA,SAAAtB,GAGA,MAFAn+B,MAAAgU,OAAA0rB,sBAEA,aAAAvB,EAAAppB,KACA/U,KAAA2/B,eAGA,WAAAxB,EAAAppB,MAAA,IAAAopB,EAAAnxB,UACAhN,KAAAkK,YAGA,SAAAi0B,EAAAppB,MAAA,aAAAopB,EAAAF,SACAj+B,KAAA4/B,QAAA,GAGA5/B,KAAAgU,OAAAyrB,SAAAtB,GAEAn+B,OASAi/B,EAAA7e,UAAAmf,gBAAA,WACA,IAAAv/B,KAAA6/B,aAAA,CACA,GAAA/O,GAAA9wB,IAEAA,MAAA6/B,aAAAj3B,WAAA,WACAkoB,EAAA3mB,gBACOnK,KAAAgU,OAAA6rB,gBAUPZ,EAAA7e,UAAAjW,aAAA,WAIA,MAHAnK,MAAA4/B,QAAA5/B,KAAA6M,QACA7M,KAAA8/B,gBACA9/B,KAAAgU,OAAA7J,eACAnK,MASAi/B,EAAA7e,UAAAlW,UAAA,WAEA,MADAlK,MAAAgU,OAAA9J,YACAlK,MASAi/B,EAAA7e,UAAAif,kBAAA,WACAr/B,KAAA6/B,eACAje,aAAA5hB,KAAA6/B,cACA7/B,KAAA6/B,aAAA,OAUAZ,EAAA7e,UAAA0f,cAAA,WACA9/B,KAAAq/B,oBAEAr/B,KAAA+/B,eACAne,aAAA5hB,KAAA+/B,gBAWAd,EAAA7e,UAAA+d,OAAA,SAAAA,GACAn+B,KAAAsW,KAAApD,EAAA4qB,OAAAI,aAAAC,KAWAc,EAAA7e,UAAAuf,YAAA,WACA3/B,KAAAm+B,QAAiBppB,KAAA,eASjBkqB,EAAA7e,UAAA3F,OAAA,WACAza,KAAA4/B,QAAA,EACA5/B,KAAAq/B,oBACAr/B,KAAAgU,OAAAyG,UAUAwkB,EAAA7e,UAAA1F,QAAA,WAQA1a,KAAA4/B,QAAA,EACA5/B,KAAAgU,OAAA0G,UACA1a,KAAAmK,gBAWA80B,EAAA7e,UAAA4f,WAAA,WACA,GAAA1uB,GAAAtR,KAAAgU,OAAA1C,OAEA,OAAAtR,MAAAigC,SAAA,MACA3uB,EAAA2H,KAAA,IAAA3H,EAAA1F,KAAA,IACA0F,EAAA4uB,SAAA,IAAAhtB,EAAA8F,SACA,IAAAhZ,KAAAiG,KAAA,IAAAjG,KAAAk/B,QAWAD,EAAA7e,UAAA+f,MAAA,SAAAnsB,EAAAF,GACAA,EAAAvT,KAAAP,QAGA,mBAAAkT,OAAArT,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,SAQA,SAAAA,EAAAsT,EAAAmkB,GAeA,QAAAU,GAAAzmB,GA8BA,GA7BAtR,KAAAsR,SACA1F,KAAA,GACA0N,QAAA,EACA7W,SAAA,YAAA40B,GAAA50B,UAAA,EACAy9B,SAAA,YACA5I,WAAApkB,EAAAokB,WACAne,kBAAA,IACAinB,2BAAA,EACAt0B,WAAA,EACAu0B,qBAAA,IACAC,qBAAAC,IACAC,eAAA,IACAC,4BAAA,GACApnB,6BAAA,EACAqnB,gBAAA,EACAC,oBAAA,MACAC,aAAA,GAGA1tB,EAAAykB,KAAAG,MAAA93B,KAAAsR,WAEAtR,KAAAiX,WAAA,EACAjX,KAAAwJ,MAAA,EACAxJ,KAAAiU,YAAA,EACAjU,KAAAs/B,cAAA,EACAt/B,KAAA6gC,cACA7gC,KAAA8gC,UACA9gC,KAAA+gC,UAAA,EAEA/gC,KAAAsR,QAAA,gCACAtR,KAAAghC,aAAA9tB,EAAAykB,KAAAyB,GAAAC,SAAA,CACA,GAAAvI,GAAA9wB,IACAkT,GAAAykB,KAAAnf,GAAA6e,EAAA,0BACAvG,EAAAmQ,mBACO,GAGPjhC,KAAAsR,QAAA,iBACAtR,KAAA2D,UAqDA,QAAAu9B,MArGAthC,EAAAm4B,SAwDA7kB,EAAAykB,KAAAmC,MAAA/B,EAAA7kB,EAAA3R,cAQAw2B,EAAA3X,UAAA4X,GAAA,SAAA/xB,GASA,MARAjG,MAAA6gC,WAAA56B,KACAjG,KAAA6gC,WAAA56B,GAAA,GAAAiN,GAAAiuB,gBAAAnhC,KAAAiG,GAEA,KAAAA,GACAjG,KAAA6gC,WAAA56B,GAAAk4B,QAAsCppB,KAAA,aAItC/U,KAAA6gC,WAAA56B,IASA8xB,EAAA3X,UAAAtN,QAAA,WACA9S,KAAA2V,KAAAnR,MAAAxE,KAAAyE,UAEA,IAAA28B,EAEA,QAAAn8B,KAAAjF,MAAA6gC,WACA7gC,KAAA6gC,WAAAngB,eAAAzb,KACAm8B,EAAAphC,KAAAg4B,GAAA/yB,GACAm8B,EAAAC,MAAA78B,MAAA48B,EAAA38B,aAaAszB,EAAA3X,UAAAkhB,UAAA,SAAAxtB,GAIA,QAAAytB,GAAA1rB,GACAA,YAAA5R,QACA6sB,EAAA7c,YAAA,EACA6c,EAAAtrB,QAAAqQ,EAAA3S,UAEA4Q,EAAAtP,MAAA,KAAAqR,EAAAhR,MAAA,MARA,GAAAisB,GAAA9wB,KACAsR,EAAAtR,KAAAsR,QAWAsE,GACA,QAAAtE,EAAAgI,OAAA,aACAhI,EAAA2H,KAAA,IAAA3H,EAAA1F,KACA0F,EAAA4uB,SACAhtB,EAAA8F,SACA9F,EAAAykB,KAAApe,MAAAvZ,KAAAsR,QAAAiI,MAAA,UAAAlG,QACAjO,KAAA,IAEA,IAAApF,KAAAghC,cAAA9tB,EAAAykB,KAAAyB,GAAAC,QAAA,CACA,GAAAmI,GAAA/+B,SAAAG,qBAAA,aACA6+B,EAAAh/B,SAAAC,cAAA,SAEA++B,GAAA1+B,IAAA6S,EAAA,UAAA1C,EAAAqkB,EAAAhvB,OACAi5B,EAAA3+B,WAAAC,aAAA2+B,EAAAD,GAEAtuB,EAAAqkB,EAAAh0B,KAAA,SAAAsS,GACA0rB,EAAA1rB,GACA4rB,EAAA5+B,WAAA6+B,YAAAD,SAEK,CACL,GAAArrB,GAAAlD,EAAAykB,KAAAsB,SAEA7iB,GAAA5M,KAAA,MAAAoM,GAAA,GACA5V,KAAAghC,cACA5qB,EAAAwkB,iBAAA,GAEAxkB,EAAAG,mBAAA,WACA,GAAAH,EAAAI,aACAJ,EAAAG,mBAAA2qB,EAEA,KAAA9qB,EAAAK,OACA8qB,EAAAnrB,EAAAurB,cACW,KAAAvrB,EAAAK,OACXqa,EAAAtrB,QAAA4Q,EAAAurB,eAEA7Q,EAAA7c,YAAA,GACA6c,EAAAwO,cAAAxO,EAAAtrB,QAAA4Q,EAAAurB,iBAIAvrB,EAAAE,KAAA,QAUAyhB,EAAA3X,UAAAwhB,aAAA,SAAAC,GAGA,OAAAC,GAFAxK,EAAAuK,GAAA7hC,KAAAs3B,WAEAryB,EAAA,EAA8B68B,EAAAxK,EAAAryB,GAA2BA,IACzD,GAAAiO,EAAA+rB,UAAA6C,IACA5uB,EAAA+rB,UAAA6C,GAAAC,MAAA/hC,SACAA,KAAAghC,aAAA9tB,EAAA+rB,UAAA6C,GAAAE,aAAAhiC,OACA,UAAAkT,GAAA+rB,UAAA6C,GAAA9hC,UAAAiiC,UAIA,cAWAlK,EAAA3X,UAAAzc,QAAA,SAAAmQ,GACA,GAAA9T,KAAAiU,WACA,MAAAjU,KAGA,IAAA8wB,GAAA9wB,IA2DA,OA1DA8wB,GAAA7c,YAAA,EAEAjU,KAAAshC,UAAA,SAAAY,EAAAC,EAAAt1B,EAAAyqB,GAYA,QAAA3zB,GAAA2zB,GAIA,MAHAxG,GAAAgR,WAAAhR,EAAAgR,UAAAhC,gBAEAhP,EAAAgR,UAAAhR,EAAA8Q,aAAAtK,GACAxG,EAAAgR,WAGAhR,EAAAgR,UAAA3B,MAAArP,EAAA,WACAA,EAAA7c,YAAA,EACA6c,EAAAhe,QAAA,aAAAge,EAAAgR,UAAA77B,MACA6qB,EAAAgR,UAAAt4B,OAEAsnB,EAAAxf,QAAA,qBACAwf,EAAAsR,oBAAAx5B,WAAA,WACA,IAAAkoB,EAAA7Z,YACA6Z,EAAA7c,YAAA,EAEA6c,EAAAxf,QAAA,6BAGA,IAFA,GAAA+wB,GAAAvR,EAAAwG,WAEA+K,EAAA95B,OAAA,GAAA85B,EAAA75B,OAAA,SACAsoB,EAAAgR,UAAA77B,OAEAo8B,EAAA95B,OACA5E,EAAA0+B,GAEAvR,EAAAhe,QAAA,oBAIage,EAAAxf,QAAA,uBAvBbwf,QAHAA,EAAAhe,QAAA,kBAfAge,EAAAmR,UAAAC,EACApR,EAAA+O,aAAA,IAAAhzB,EACAikB,EAAAwR,iBAAA,IAAAH,EACArR,EAAAwG,aACAxG,EAAAwG,WAAAxG,EAAAyR,eAAAjL,EAAApkB,EAAAykB,KAAAwC,UACA7C,EAAAzyB,MAAA,KACAisB,EAAAxf,QAAAgmB,YACAxG,EAAAxf,QAAAgmB,YAEAxG,EAAA4O,sBAqCA/7B,EAAAmtB,EAAAwG,YAEAxG,EAAAzsB,KAAA,qBACAud,aAAAkP,EAAAsR,qBAEAtuB,GAAA,kBAAAA,YAIA9T,MAUA+3B,EAAA3X,UAAAsf,oBAAA,WAEA,GADA9d,aAAA5hB,KAAAwiC,wBACAxiC,KAAA8hC,WAAA9hC,KAAA8hC,UAAA3C,aAAA,CAEA,GAAArO,GAAA9wB,IACAA,MAAAwiC,sBAAA55B,WAAA,WACAkoB,EAAAgR,UAAApnB,WACK1a,KAAAsiC,oBAWLvK,EAAA3X,UAAA+d,OAAA,SAAAtoB,GAOA,MANA7V,MAAAiX,YAAAjX,KAAA+gC,SACA/gC,KAAA8hC,UAAA3D,OAAAtoB,GAEA7V,KAAA8gC,OAAAv9B,KAAAsS,GAGA7V,MASA+3B,EAAA3X,UAAAqiB,UAAA,SAAAjG,GACAx8B,KAAA+gC,SAAAvE,GAEAA,GAAAx8B,KAAAiX,WAAAjX,KAAA8gC,OAAAv4B,SACAvI,KAAAsR,QAAA,aACAtR,KAAA0iC,gBAYA3K,EAAA3X,UAAAsiB,YAAA,WACA1iC,KAAA8hC,UAAAa,QAAA3iC,KAAA8gC,QACA9gC,KAAA8gC,WAWA/I,EAAA3X,UAAA5T,WAAA,WAUA,OATAxM,KAAAiX,WAAAjX,KAAAiU,cACAjU,KAAAwJ,MACAxJ,KAAAg4B,GAAA,IAAAmG,QAA4BppB,KAAA,eAI5B/U,KAAAmK,aAAA,WAGAnK,MASA+3B,EAAA3X,UAAA6gB,eAAA,WAEA,GAAA7qB,GAAAlD,EAAAykB,KAAAsB,UACA/iB,GACA,QAAAlW,KAAAsR,QAAAgI,OAAA,aACAtZ,KAAAsR,QAAA2H,KAAA,IAAAjZ,KAAAsR,QAAA1F,KACA5L,KAAAsR,QAAA4uB,SACAhtB,EAAA8F,SACA,GACAhZ,KAAAiiC,WACA78B,KAAA,qBAEAgR,GAAA5M,KAAA,MAAA0M,GAAA,GACAE,EAAAE,KAAA,MAGAtW,KAAAmK,aAAA,WAWA4tB,EAAA3X,UAAA4gB,UAAA,WAEA,GAAAp1B,GAAAyrB,EAAA3rB,SAAAE,OACA,UAAAyrB,EAAA3rB,SAAAsN,SAAA,OAEA,OAAAhZ,MAAAsR,QAAA2H,OAAAoe,EAAA3rB,SAAAC,UACA3L,KAAAsR,QAAA1F,SASAmsB,EAAA3X,UAAAlW,UAAA,WACAlK,KAAAiX,YACAjX,KAAAiX,WAAA,EACAjX,KAAAiU,YAAA,EACAjU,KAAA+gC,UAEA/gC,KAAAyiC,WAAA,GAEAziC,KAAA2V,KAAA,aAUAoiB,EAAA3X,UAAA3F,OAAA,WACAza,KAAAwJ,MAAA,GASAuuB,EAAA3X,UAAA1F,QAAA,WACA1a,KAAAwJ,MAAA,EACAoY,aAAA5hB,KAAAwiC,wBASAzK,EAAA3X,UAAAqf,SAAA,SAAAtB,GACAn+B,KAAAg4B,GAAAmG,EAAAnxB,UAAAyyB,SAAAtB,IASApG,EAAA3X,UAAA5a,QAAA,SAAA+E,GACAA,KAAA0zB,QACA,cAAA1zB,EAAA0zB,SAAAj+B,KAAAiX,WAAAjX,KAAAiU,cACAjU,KAAAwM,aACAxM,KAAAsR,QAAAxF,WACA9L,KAAA8L,aAKA9L,KAAA8S,QAAA,QAAAvI,KAAA0Y,OAAA1Y,EAAA0Y,OAAA1Y,IASAwtB,EAAA3X,UAAAjW,aAAA,SAAA8Y,GACA,GAAA2f,GAAA5iC,KAAAiX,UACA4rB,EAAA7iC,KAAAiU,UAEAjU,MAAAiX,WAAA,EACAjX,KAAAiU,YAAA,EACAjU,KAAAwJ,MAAA,GAEAo5B,GAAAC,KACA7iC,KAAA8hC,UAAAj1B,QACA7M,KAAA8hC,UAAAhC,gBACA8C,IACA5iC,KAAA8S,QAAA,aAAAmQ,GAEA,UAAAA,GAAAjjB,KAAAsR,QAAAxF,YAAA9L,KAAAs/B,cACAt/B,KAAA8L,eAYAisB,EAAA3X,UAAAtU,UAAA,WAUA,QAAA+H,KACA,GAAAid,EAAA7Z,UAAA,CACA,OAAAhS,KAAA6rB,GAAA+P,WACA/P,EAAA+P,WAAAngB,eAAAzb,IAAA,KAAAA,GACA6rB,EAAA+P,WAAA57B,GAAAk5B,QAAyCppB,KAAA,WAGzC+b,GAAAhe,QAAA,YAAAge,EAAAgR,UAAA77B,KAAA6qB,EAAAgS,sBAGAlhB,aAAAkP,EAAAiS,mBAEAjS,EAAAmK,eAAA,iBAAA+H,GACAlS,EAAAmK,eAAA,UAAA+H,GAEAlS,EAAAwO,cAAA,QAEAxO,GAAAgS,2BACAhS,GAAAmS,wBACAnS,GAAAiS,wBACAjS,GAAAoS,eAEApS,EAAAxf,QAAA,2BAAA6xB,EAGA,QAAAH,KACA,MAAAlS,GAAAwO,aAIAxO,EAAA7Z,UACApD,IAGAid,EAAA7c,YAAA6c,EAAAwO,aACAxO,EAAAiS,kBAAAn6B,WAAAo6B,EAAA,MAGAlS,EAAAgS,wBAAAM,EACAtS,EAAAoS,gBAQApS,EAAAhe,QAAA,oBACAe,MARAid,EAAAtY,GAAA,iBAAAwqB,GACAlS,EAAAxf,QAAA,8BACAwf,EAAAwG,WAAAxG,EAAAyR,eACAzR,EAAAgR,UAAAhR,EAAA8Q,eACA9Q,EAAAoS,gBAAA,EACApS,EAAAntB,YAMAmtB,EAAAmS,kBAAAI,IACAvS,EAAAmS,mBAAA,GAGAnS,EAAAntB,UACAmtB,EAAAhe,QAAA,eAAAge,EAAAmS,kBAAAnS,EAAAgS,sBACAhS,EAAAiS,kBAAAn6B,WAAAo6B,EAAAlS,EAAAmS,oBAnBA,QAZA,OAnCAjjC,KAAAs/B,cAAA,EACAt/B,KAAA8iC,qBAAA,EACA9iC,KAAAijC,kBAAAjjC,KAAAsR,QAAA,qBAEA,IAAAwf,GAAA9wB,KACAojC,EAAApjC,KAAAsR,QAAA,6BACA6xB,EAAAnjC,KAAAsR,QAAA,2BACA+xB,EAAArjC,KAAAsR,QAAA,qBA+DAtR,MAAAsR,QAAA,8BACAtR,KAAA+iC,kBAAAn6B,WAAAo6B,EAAAhjC,KAAAijC,mBAEAjjC,KAAAwY,GAAA,UAAAwqB,KAIA,mBAAA9vB,OAAArT,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,QACAI,MAQA,SAAAJ,EAAAsT,GAeA,QAAAiuB,GAAAntB,EAAA/N,GACAjG,KAAAgU,SACAhU,KAAAiG,QAAA,GACAjG,KAAAsjC,SACAtjC,KAAAujC,KAAA,GAAAC,GAAAxjC,KAAA,QACAA,KAAAyjC,WAAA,EACAzjC,KAAA0jC,QAwLA,QAAAF,GAAApC,EAAAn7B,GACAjG,KAAA2jC,UAAAvC,EACAphC,KAAAiG,OAzMArG,EAAAuhC,kBAsBAjuB,EAAAykB,KAAAmC,MAAAqH,EAAAjuB,EAAA3R,cAQA4/B,EAAA/gB,UAAAihB,MAAAnuB,EAAA3R,aAAA6e,UAAAzK,KASAwrB,EAAA/gB,UAAA4X,GAAA,WACA,MAAAh4B,MAAAgU,OAAAgkB,GAAAxzB,MAAAxE,KAAAgU,OAAAvP,YASA08B,EAAA/gB,UAAA+d,OAAA,SAAAA,GAIA,MAHAA,GAAAnxB,SAAAhN,KAAAiG,KACAjG,KAAAgU,OAAAmqB,UACAn+B,KAAAsjC,SACAtjC,MASAmhC,EAAA/gB,UAAA9J,KAAA,SAAAT,EAAA/B,GACA,GAAAqqB,IACAppB,KAAA/U,KAAAsjC,MAAAC,KAAA,iBACA1tB,OASA,OANA,kBAAA/B,KACAqqB,EAAA99B,KAAAL,KAAAyjC,WACAtF,EAAAC,KAAA,EACAp+B,KAAA0jC,KAAAvF,EAAA99B,IAAAyT,GAGA9T,KAAAm+B,WASAgD,EAAA/gB,UAAAzK,KAAA,SAAA1P,GACA,GAAAkf,GAAApgB,MAAAqb,UAAAtL,MAAAvU,KAAAkE,UAAA,GACAm/B,EAAAze,IAAA5c,OAAA,GACA41B,GACAppB,KAAA,QACA9O,OAYA,OATA,kBAAA29B,KACAzF,EAAA99B,KAAAL,KAAAyjC,WACAtF,EAAAC,IAAA,OACAp+B,KAAA0jC,KAAAvF,EAAA99B,IAAAujC,EACAze,IAAArQ,MAAA,EAAAqQ,EAAA5c,OAAA,IAGA41B,EAAAhZ,OAEAnlB,KAAAm+B,WASAgD,EAAA/gB,UAAA5T,WAAA,WAQA,MAPA,KAAAxM,KAAAiG,KACAjG,KAAAgU,OAAAxH,cAEAxM,KAAAm+B,QAAmBppB,KAAA,eACnB/U,KAAAqhC,MAAA,eAGArhC,MASAmhC,EAAA/gB,UAAAqf,SAAA,SAAAtB,GAGA,QAAAC,KACAtN,EAAAqN,QACAppB,KAAA,MACAoQ,KAAAjS,EAAAykB,KAAA+C,QAAAj2B,WACA85B,MAAAJ,EAAA99B,KANA,GAAAywB,GAAA9wB,IAUA,QAAAm+B,EAAAppB,MACA,cACA/U,KAAAqhC,MAAA,UACA,MAEA,kBACA,KAAArhC,KAAAiG,KACAjG,KAAAgU,OAAA7J,aAAAg0B,EAAAlb,QAAA,UAEAjjB,KAAAqhC,MAAA,aAAAlD,EAAAlb,OAEA,MAEA,eACA,WACA,GAAArf,IAAA,UAAAu6B,EAAAtoB,KAEA,SAAAsoB,EAAAC,IACAx6B,EAAAL,KAAA66B,GACSD,EAAAC,KACTp+B,KAAAm+B,QAAuBppB,KAAA,MAAAwpB,MAAAJ,EAAA99B,KAGvBL,KAAAqhC,MAAA78B,MAAAxE,KAAA4D,EACA,MAEA,aACA,GAAAA,IAAAu6B,EAAAl4B,MAAAmuB,OAAA+J,EAAAhZ,KAEA,SAAAgZ,EAAAC,KACAx6B,EAAAL,KAAA66B,GAEAp+B,KAAAqhC,MAAA78B,MAAAxE,KAAA4D,EACA,MAEA,WACA5D,KAAA0jC,KAAAvF,EAAAI,SACAv+B,KAAA0jC,KAAAvF,EAAAI,OAAA/5B,MAAAxE,KAAAm+B,EAAAhZ,YACAnlB,MAAA0jC,KAAAvF,EAAAI,OAEA,MAEA,aACAJ,EAAAF,OACAj+B,KAAAgU,OAAAxO,QAAA24B,GAEA,gBAAAA,EAAAlb,OACAjjB,KAAAqhC,MAAA,iBAAAlD,EAAAlb,QAEAjjB,KAAAqhC,MAAA,QAAAlD,EAAAlb,UAwBAugB,EAAApjB,UAAA9J,KAAA,WACAtW,KAAA2jC,UAAAL,MAAAtjC,KAAAiG,OAAA,EACAjG,KAAA2jC,UAAArtB,KAAA9R,MAAAxE,KAAA2jC,UAAAl/B,YASA++B,EAAApjB,UAAAzK,KAAA,WACA3V,KAAA2jC,UAAAL,MAAAtjC,KAAAiG,OAAA,EACAjG,KAAA2jC,UAAAhuB,KAAAnR,MAAAxE,KAAA2jC,UAAAl/B,aAIA,mBAAAyO,OAAArT,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,SASA,SAAAA,EAAAsT,EAAAmkB,GAmBA,QAAAwM,KACA3wB,EAAA+rB,UAAAz6B,MAAAxE,KAAAyE,WAdA7E,EAAAkkC,UAAAD,EAqBA3wB,EAAAykB,KAAAsC,QAAA4J,EAAA3wB,EAAA+rB,WAQA4E,EAAAzjB,UAAAna,KAAA,YAUA49B,EAAAzjB,UAAA5W,KAAA,WACA,GAEAuuB,GAFAxe,EAAArG,EAAAykB,KAAApe,MAAAvZ,KAAAgU,OAAA1C,QAAAiI,OACAuX,EAAA9wB,IAyBA,OArBA+3B,KACAA,EAAAV,EAAAtwB,cAAAswB,EAAAxwB,WAGA7G,KAAA8jC,UAAA,GAAA/L,GAAA/3B,KAAAggC,aAAAzmB,GAEAvZ,KAAA8jC,UAAAxpB,OAAA,WACAwW,EAAArW,SACAqW,EAAA9c,OAAAyuB,WAAA,IAEAziC,KAAA8jC,UAAA1pB,UAAA,SAAAkkB,GACAxN,EAAAsO,OAAAd,EAAAzoB,OAEA7V,KAAA8jC,UAAAC,QAAA,WACAjT,EAAApW,UACAoW,EAAA9c,OAAAyuB,WAAA,IAEAziC,KAAA8jC,UAAA7gC,QAAA,SAAA6E,GACAgpB,EAAAtrB,QAAAsC,IAGA9H,MAeA6jC,EAAAzjB,UAAA9J,KADApD,EAAAykB,KAAAyB,GAAA0B,QACA,SAAAjlB,GACA,GAAAib,GAAA9wB,IAIA,OAHA4I,YAAA,WACAkoB,EAAAgT,UAAAxtB,KAAAT,IACO,GACP7V,MAGA,SAAA6V,GAEA,MADA7V,MAAA8jC,UAAAxtB,KAAAT,GACA7V,MAUA6jC,EAAAzjB,UAAAuiB,QAAA,SAAAvI,GACA,OAAAn1B,GAAA,EAAAyzB,EAAA0B,EAAA7xB,OAAmCmwB,EAAAzzB,EAAOA,IAC1CjF,KAAAm+B,OAAA/D,EAAAn1B,GAEA,OAAAjF,OAUA6jC,EAAAzjB,UAAAvT,MAAA,WAEA,MADA7M,MAAA8jC,UAAAj3B,QACA7M,MAWA6jC,EAAAzjB,UAAA5a,QAAA,SAAAsC,GACA9H,KAAAgU,OAAAxO,QAAAsC,IAQA+7B,EAAAzjB,UAAA6f,OAAA,WACA,MAAAjgC,MAAAgU,OAAA1C,QAAAgI,OAAA,YAWAuqB,EAAA9B,MAAA,WACA,mBAAA1K,MAAA,aAAAxwB,aACA,gBAAAwwB,IAUAwM,EAAA7B,aAAA,WACA,UASA9uB,EAAAokB,WAAA/zB,KAAA,cAGA,mBAAA2P,OAAA+rB,UAAAp/B,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,QACAI,MASA,SAAAJ,EAAAsT,GAoBA,QAAA8wB,KACA9wB,EAAA+rB,UAAA6E,UAAAt/B,MAAAxE,KAAAyE,WAfA7E,EAAAqkC,YAAAD,EAsBA9wB,EAAAykB,KAAAsC,QAAA+J,EAAA9wB,EAAA+rB,UAAA6E,WAQAE,EAAA5jB,UAAAna,KAAA,cAWA+9B,EAAA5jB,UAAA5W,KAAA,WACA,GAAAsnB,GAAA9wB,KACAmlB,EAAA1gB,SAKA,OAHAoC,WAAAq9B,UAAA,WACAhxB,EAAA+rB,UAAA6E,UAAA1jB,UAAA5W,KAAAhF,MAAAssB,EAAA3L,KAEAnlB,MAYAgkC,EAAA5jB,UAAA9J,KAAA,WACA,GAAAwa,GAAA9wB,KAAAmlB,EAAA1gB,SAIA,OAHAoC,WAAAq9B,UAAA,WACAhxB,EAAA+rB,UAAA6E,UAAA1jB,UAAA9J,KAAA9R,MAAAssB,EAAA3L,KAEAnlB,MAUAgkC,EAAA5jB,UAAAvT,MAAA,WAGA,MAFAhG,WAAAs9B,QAAA57B,OAAA,EACA2K,EAAA+rB,UAAA6E,UAAA1jB,UAAAvT,MAAAtM,KAAAP,MACAA,MAaAgkC,EAAA5jB,UAAA+f,MAAA,SAAAnsB,EAAAF,GACA,QAAA6L,KACA,GAAArO,GAAA0C,EAAA1C,QACA1F,EAAA0F,EAAA,qBACA6C,GACA,QAAA7C,EAAAgI,OAAA,aACAhI,EAAA2H,KAAA,IAAA3H,EAAA1F,KACA0F,EAAA4uB,SACA,qBACA,iBAAAlsB,EAAAgtB,YAAA,sBAKAgD,GAAA1jC,SACA,mBAAA8jC,2BAEAA,wBAAAjwB,EAAA/O,KAAA,MAGA,MAAAwG,GACA/E,UAAAw9B,oBAAA,eAAA/yB,EAAA2H,KAAA,IAAArN,GAGA/E,UAAAy9B,eACAN,EAAA1jC,QAAA,GAGAwT,EAAAvT,KAAAuwB,GAGA,GAAAA,GAAA9wB,IACA,OAAAyC,UAAAuP,KAAA2N,KAEAzM,EAAAykB,KAAAiB,KAAAjZ,GAAAzM,SAYA8wB,EAAAjC,MAAA,WACA,MACA,mBAAAl7B,YACA,gBAAAA,YAAA09B,UAGAA,UAAAC,wBAAAC,OAAA,IAFA,GAcAT,EAAAhC,aAAA,WACA,UAOA,mBAAA1/B,UACAoiC,wCAAA,GASAxxB,EAAAokB,WAAA/zB,KAAA,gBAEA,mBAAA2P,OAAA+rB,UAAAp/B,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,SAKA,mBAAA0C,QACA,GAAAiiC,WAAA,WAA27D,QAAA/Z,KAAa,IAAAma,EAAA,CAAa,IAAI,GAAAC,GAAArN,EAAA30B,qBAAA,WAAAiiC,YAAAC,EAAA,QAA+DF,GAAA/hC,WAAA6+B,YAAAkD,GAA4B,MAAAG,GAAU,OAAOJ,GAAA,CAAsB,QAAfK,GAAAC,EAAA18B,OAAe28B,EAAA,EAAYF,EAAAE,EAAIA,IAAKD,EAAAC,MAAQ,QAAAC,GAAAH,GAAcL,EAAMK,IAASC,IAAA18B,QAAAy8B,EAAe,QAAAI,GAAAF,GAAc,SAAAG,GAAArM,kBAAAsM,EAAiCD,EAAArM,iBAAA,OAAAkM,GAAA,OAAwC,UAAA3N,GAAAyB,kBAAAsM,EAAiC/N,EAAAyB,iBAAA,OAAAkM,GAAA,OAAwC,UAAAG,GAAAtM,aAAAuM,EAA4BrgC,EAAAogC,EAAA,SAAAH,OAAqB,sBAAAG,GAAAE,OAAA,CAAgC,GAAAP,GAAAK,EAAAE,MAAeF,GAAAE,OAAA,WAAoBP,IAAIE,SAAUG,GAAAE,OAAAL,EAAe,QAAAM,KAAaC,EAAMC,IAASC,IAAK,QAAAD,KAAa,GAAAV,GAAAzN,EAAA30B,qBAAA,WAAwCmiC,EAAAD,EAAAngC,EAAYogC,GAAA/hC,aAAA,OAAA4iC,EAA0B,IAAAhB,GAAAI,EAAAH,YAAAE,EAAwB,IAAAH,EAAA,CAAM,GAAAM,GAAA,GAAQ,WAAY,SAAAN,GAAAiB,aAAAP,EAAA,CAA4B,GAAAQ,GAAAlB,EAAAiB,YAAA,WAAiCC,KAAOA,IAAAjhC,MAAA,QAAAA,MAAA,KAA+BkhC,EAAAC,IAAAxc,SAAAsc,EAAA,OAAAtc,SAAAsc,EAAA,OAAAtc,SAAAsc,EAAA,aAAsE,OAAAZ,EAA6C,MAApCA,KAAIt8B,WAAAnE,UAAAwhC,OAAA,IAAgC,MAAQjB,GAAAtD,YAAAqD,GAAkBH,EAAA,KAAOe,WAAaA,KAAK,QAAAA,KAAa,GAAAO,GAAAzL,EAAAlyB,MAAgB,IAAA29B,EAAA,EAAS,OAAAC,GAAA,EAAaD,EAAAC,EAAMA,IAAA,CAAM,GAAAjB,GAAAzK,EAAA0L,GAAA9lC,GAAeylC,EAAArL,EAAA0L,GAAAC,WAAwBrB,GAAQsB,SAAA,EAAAhmC,GAAA6kC,EAAoB,IAAAa,EAAAC,GAAA,MAAc,GAAAM,GAAA7lC,EAAAykC,EAAY,IAAAoB,EAAO,IAAAC,EAAA9L,EAAA0L,GAAAK,aAAAT,EAAAU,IAAAV,EAAAU,GAAA,IAAqG,GAAAhM,EAAA0L,GAAAO,gBAAAC,IAAA,CAA8B,GAAAC,KAAUA,GAAA/wB,KAAA4kB,EAAA0L,GAAAO,eAA6BE,EAAAC,MAAAP,EAAAQ,aAAA,cAAuCF,EAAAG,OAAAT,EAAAQ,aAAA,eAAyCR,EAAAQ,aAAA,WAA6BF,EAAAI,WAAAV,EAAAQ,aAAA,UAAuCR,EAAAQ,aAAA,WAA6BF,EAAAK,MAAAX,EAAAQ,aAAA,SAAmG,QAAjEI,MAAUlC,EAAAsB,EAAA1jC,qBAAA,SAAuCukC,EAAAnC,EAAAz8B,OAAgB6+B,EAAA,EAAaD,EAAAC,EAAMA,IAAM,SAAApC,EAAAoC,GAAAN,aAAA,QAAAxxB,gBAAsD4xB,EAAAlC,EAAAoC,GAAAN,aAAA,SAAA9B,EAAAoC,GAAAN,aAAA,SAA4DO,GAAAT,EAAAM,EAAAhC,EAAAY,OAAmBplC,GAAA4lC,GAAMR,GAAOA,EAAAf,OAA9jBuC,GAAApC,GAAA,GAAUY,IAAOf,EAAAsB,SAAA,EAAgBtB,EAAAwC,IAAAC,EAAAtC,GAAYY,EAAAf,QAA2iB,IAAVuC,EAAApC,GAAA,GAAUY,EAAA,CAAO,GAAAlB,GAAA4C,EAAAtC,EAAWN,aAAA6C,aAAAnC,IAA+BP,EAAAsB,SAAA,EAAgBtB,EAAAwC,IAAA3C,GAASkB,EAAAf,KAAW,QAAAyC,GAAAzC,GAAe,GAAAC,GAAA,KAAWE,EAAAzkC,EAAAskC,EAAY,IAAAG,GAAA,UAAAA,EAAAwC,SAA4B,SAAAxC,GAAAuC,aAAAnC,EAA4BN,EAAAE,MAAI,CAAK,GAAAN,GAAAM,EAAAtiC,qBAAA+B,GAAA,EAAmCigC,KAAMI,EAAAJ,GAAM,MAAAI,GAAS,QAAA2B,KAAa,OAAAx+B,GAAAo+B,EAAA,YAAAR,EAAA4B,KAAA5B,EAAA6B,QAAA7B,EAAAU,IAAAV,EAAAU,GAAA,KAA0D,QAAAY,GAAAtC,EAAAe,EAAAd,EAAAJ,GAAsBz8B,GAAA,EAAO0/B,EAAAjD,GAAA,KAAUkD,GAAGzB,SAAA,EAAAhmC,GAAA2kC,EAAoB,IAAAsB,GAAA7lC,EAAAukC,EAAY,IAAAsB,EAAA,CAAO,UAAAA,EAAAoB,UAA0BhP,EAAAqP,EAAAzB,GAAQzlC,EAAA,OAAY63B,EAAA4N,EAAKzlC,EAAAmkC,GAAID,EAAA1kC,GAAA2nC,SAAQjD,GAAA8B,OAAAvB,IAAA,KAAAzK,KAAAkK,EAAA8B,QAAArd,SAAAub,EAAA8B,MAAA,WAA0E9B,EAAA8B,MAAA,cAAe9B,GAAAgC,QAAAzB,IAAA,KAAAzK,KAAAkK,EAAAgC,SAAAvd,SAAAub,EAAAgC,OAAA,WAA6EhC,EAAAgC,OAAA,OAAgBxP,EAAA0Q,MAAA1Q,EAAA0Q,MAAAnzB,MAAA,oCAA2D,IAAAsyB,GAAArB,EAAAmC,IAAAnC,EAAA4B,KAAA,UAAAvT,OAAA,IAAAhvB,KAAA,cAAA+hC,EAAA,iBAAA9B,EAAA35B,SAAAtD,WAAAoN,QAAA,6BAAA4xB,EAAA,eAAA7P,EAAA0Q,KAA4O,UAArEnC,GAAAqC,WAAA7C,EAA2BQ,EAAAqC,WAAA,IAAAhB,EAA0BrB,EAAAqC,UAAAhB,EAAgBpB,EAAAmC,IAAAnC,EAAA4B,KAAA,GAAArB,EAAA9vB,WAAA,CAAkC,GAAA0uB,GAAAJ,EAAA,MAAeE,IAAA,eAAkBE,EAAAliC,aAAA,KAAAgiC,GAAuBsB,EAAAzjC,WAAAC,aAAAoiC,EAAAoB,GAAiCA,EAAA8B,MAAAC,QAAA,OAAwB,WAAY,GAAA/B,EAAA9vB,WAAqB8vB,EAAAzjC,WAAA6+B,YAAA4E,GAAmC19B,WAAAnE,UAAAwhC,OAAA,OAAqCqC,EAAAvD,EAAAe,EAAAd,IAAY,QAAAtkC,GAAAwkC,GAAc,GAAAa,EAAAmC,IAAAnC,EAAA4B,KAAA,GAAAzC,EAAA1uB,WAAA,CAAiC,GAAAwuB,GAAAF,EAAA,MAAeI,GAAAriC,WAAAC,aAAAkiC,EAAAE,GAA+BF,EAAAniC,WAAA0lC,aAAAR,EAAA7C,GAAAF,GAAkCE,EAAAkD,MAAAC,QAAA,OAAuB,WAAY,GAAAnD,EAAA1uB,WAAoB0uB,EAAAriC,WAAA6+B,YAAAwD,GAAiCt8B,WAAAnE,UAAAwhC,OAAA,WAA0Cf,GAAAriC,WAAA0lC,aAAAR,EAAA7C,MAAmC,QAAA6C,GAAAjC,GAAe,GAAAf,GAAAD,EAAA,MAAgB,IAAAiB,EAAA4B,KAAA5B,EAAAmC,GAAgBnD,EAAAyD,UAAA1C,EAAA0C,cAA0B,CAAK,GAAAtD,GAAAY,EAAAljC,qBAAA+B,GAAA,EAAoC,IAAAugC,EAAA,CAAM,GAAAkC,GAAAlC,EAAAuD,UAAoB,IAAArB,EAAuB,OAAhBpC,GAAAoC,EAAA7+B,OAAgBq8B,EAAA,EAAYI,EAAAJ,EAAIA,IAAK,GAAAwC,EAAAxC,GAAA8D,UAAA,SAAAtB,EAAAxC,GAAA8C,UAAA,GAAAN,EAAAxC,GAAA8D,UAAwE3D,EAAAF,YAAAuC,EAAAxC,GAAA+D,WAAA,KAA0C,MAAA5D,GAAU,QAAAuD,GAAA1B,EAAAV,EAAAhB,GAAoB,GAAAF,GAAAD,EAAAtkC,EAAAykC,EAAc,IAAAa,EAAAU,IAAAV,EAAAU,GAAA,IAAmB,MAAAzB,EAAS,IAAAD,EAAmC,SAA5B6B,GAAAvmC,IAAAilC,IAAoBsB,EAAAvmC,GAAA6kC,GAAQa,EAAAmC,IAAAnC,EAAA4B,IAAA,CAAgB,GAAAT,GAAA,EAAU,QAAAZ,KAAAM,GAAkBA,EAAAN,IAAAxgC,OAAAsa,UAAAkmB,KAAiC,QAAAA,EAAAhxB,cAA6B4wB,EAAA0C,MAAAhC,EAAAN,GAAqB,cAAAA,EAAAhxB,cAAmC4xB,GAAA,WAAAN,EAAAN,GAAA,IAA+B,WAAAA,EAAAhxB,gBAAgC4xB,GAAA,IAAAZ,EAAA,KAAAM,EAAAN,GAAA,KAA+B,IAAAH,GAAA,EAAU,QAAAiB,KAAAlB,GAAkBA,EAAAkB,IAAAthC,OAAAsa,UAAAgnB,KAAiCjB,GAAA,gBAAAiB,EAAA,YAAAlB,EAAAkB,GAAA,OAAkDrC,GAAA8D,UAAA,+DAAA3B,EAAA,IAAAf,EAAA,YAAkG2C,IAAAvgC,QAAAq+B,EAAAvmC,GAAkB2kC,EAAAvkC,EAAAmmC,EAAAvmC,QAAW,CAAK,GAAAukC,GAAAE,EAAAngC,EAAWigC,GAAA5hC,aAAA,OAAA4iC,EAAyB,QAAAuB,KAAAP,GAAkBA,EAAAO,IAAArhC,OAAAsa,UAAA+mB,KAAiC,cAAAA,EAAA7xB,cAAmCsvB,EAAA5hC,aAAA,QAAA4jC,EAAAO,IAAoC,WAAAA,EAAA7xB,eAAgCsvB,EAAA5hC,aAAAmkC,EAAAP,EAAAO,IAA6B,QAAArB,KAAAI,GAAkBA,EAAAJ,IAAAhgC,OAAAsa,UAAA0lB,IAAA,SAAAA,EAAAxwB,eAA4DxN,EAAA88B,EAAAkB,EAAAI,EAAAJ,GAAgBf,GAAAliC,WAAA0lC,aAAA3D,EAAAG,GAAiCC,EAAAJ,EAAK,MAAAI,GAAS,QAAAl9B,GAAA88B,EAAAI,EAAAE,GAAkB,GAAAH,GAAAD,EAAA,QAAkBC,GAAA/hC,aAAA,OAAAgiC,GAA0BD,EAAA/hC,aAAA,QAAAkiC,GAA2BN,EAAAC,YAAAE,GAAkB,QAAA7R,GAAAgS,GAAc,GAAAF,GAAAvkC,EAAAykC,EAAWF,IAAA,UAAAA,EAAA0C,WAA4B3B,EAAAmC,IAAAnC,EAAA4B,KAAgB3C,EAAAoD,MAAAC,QAAA,OAAuB,WAAY,GAAArD,EAAAxuB,WAAoBhF,EAAA0zB,GAAUt8B,WAAAnE,UAAAwhC,OAAA,QAA0CjB,EAAAniC,WAAA6+B,YAAAsD,IAA8B,QAAAxzB,GAAAozB,GAAc,GAAAM,GAAAzkC,EAAAmkC,EAAW,IAAAM,EAAA,CAAM,OAAAF,KAAAE,GAAgB,kBAAAA,GAAAF,KAA4BE,EAAAF,GAAA,KAAWE,GAAAriC,WAAA6+B,YAAAwD,IAA6B,QAAAzkC,GAAAmkC,GAAc,GAAAI,GAAA,IAAW,KAAIA,EAAAzN,EAAAwR,eAAAnE,GAAsB,MAAAM,IAAU,MAAAF,GAAS,QAAAF,GAAAE,GAAc,MAAAzN,GAAA70B,cAAAsiC,GAA0B,QAAA//B,GAAA2/B,EAAAI,EAAAE,GAAkBN,EAAA7L,YAAAiM,EAAAE,GAAmB8D,IAAAzgC,SAAAq8B,EAAAI,EAAAE,GAAoB,QAAAqB,GAAA3B,GAAc,GAAAM,GAAAa,EAAAC,GAAAhB,EAAAJ,EAAA//B,MAAA,IAAqG,OAA3EmgC,GAAA,GAAAxb,SAAAwb,EAAA,OAAuBA,EAAA,GAAAxb,SAAAwb,EAAA,UAA0BA,EAAA,GAAAxb,SAAAwb,EAAA,UAA0BE,EAAA,GAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,IAAAE,EAAA,GAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,IAAAE,EAAA,IAAAF,EAAA,SAA4F,QAAAxI,GAAA2K,EAAAjC,EAAAkC,EAAAtB,GAAuB,IAAAC,EAAAmC,KAAAnC,EAAA6B,IAAA,CAAuB,GAAA7C,GAAAxN,EAAA30B,qBAAA,UAAyC,IAAAmiC,EAAA,CAAe,GAAAC,GAAAoC,GAAA,gBAAAA,KAAA,QAAiE,IAArBtB,IAAOxK,EAAA,KAAO2N,EAAA,OAAO3N,GAAA2N,GAAAjE,EAAA,CAAa,GAAAJ,GAAAE,EAAA,QAAiBF,GAAA5hC,aAAA,mBAAkC4hC,EAAA5hC,aAAA,QAAAgiC,GAA0B1J,EAAAyJ,EAAAF,YAAAD,GAAoBmB,EAAAmC,IAAAnC,EAAA4B,WAAApQ,GAAA2R,aAAA5D,GAAA/N,EAAA2R,YAAA3gC,OAAA,IAAiE+yB,EAAA/D,EAAA2R,YAAA3R,EAAA2R,YAAA3gC,OAAA,IAAwC0gC,EAAAjE,EAAIe,EAAAmC,IAAAnC,EAAA4B,IAAgBrM,YAAA6N,SAAAxkC,GAA2B22B,EAAA6N,QAAAhC,EAAAjC,GAAsB5J,SAAA/D,GAAA6R,gBAAA9D,GAAkChK,EAAAuJ,YAAAtN,EAAA6R,eAAAjC,EAAA,KAAqCjC,EAAA,QAAY,QAAAoC,GAAA1C,EAAAI,GAAgB,GAAAxkC,EAAA,CAAc,GAAA0kC,GAAAF,EAAA,kBAA2BL,IAAAlkC,EAAAmkC,GAAYnkC,EAAAmkC,GAAAwD,MAAAiB,WAAAnE,EAA6B1I,EAAA,IAAAoI,EAAA,cAAAM,IAA0B,QAAAoE,GAAApE,GAAc,GAAAN,GAAA,cAAoBI,EAAA,MAAAJ,EAAA/Y,KAAAqZ,EAAsB,OAAAF,UAAAuE,qBAAAjE,EAAAiE,mBAAArE,KAAz0P,IAAAxM,GAAA73B,EAAAgnC,EAAAC,EAAAxM,EAAA2N,EAAA3D,EAAA,YAAA3gC,EAAA,SAAA6kC,EAAA,kBAAAC,EAAA,gCAAA7D,EAAA,gCAAAoC,EAAA,oBAAA/U,EAAA,qBAAAoS,EAAA/iC,OAAAi1B,EAAA90B,SAAAinC,EAAAvjC,UAAAs/B,GAAA,EAAAR,GAAAO,GAAA/K,KAAAqO,KAAAE,KAAArE,GAAA,EAAAx8B,GAAA,EAAA3H,GAAA,EAAAulC,EAAA,WAA+Q,GAAAhB,SAAAxN,GAAAwR,gBAAAzD,SAAA/N,GAAA30B,sBAAA0iC,SAAA/N,GAAA70B,eAAA4iC,EAAA4B,EAAAwC,EAAArqB,UAAA/J,cAAA4vB,EAAAwE,EAAAnqB,SAAAjK,cAAAgxB,EAAApB,EAAA,MAAArK,KAAAqK,GAAA,MAAArK,KAAAqM,GAAAC,EAAAjC,EAAA,MAAArK,KAAAqK,GAAA,MAAArK,KAAAqM,GAAAf,EAAA,SAAAtL,KAAAqM,GAAAyC,WAAAzC,EAAA1xB,QAAA,wCAAAwvB,GAAA,EAAAkB,GAAA,OAAAJ,EAAA,IAA8U,UAAA4D,GAAAE,SAAAtE,SAAAoE,GAAAE,QAAAJ,IAAA7kC,EAAgDmhC,EAAA4D,EAAAE,QAAAJ,GAAAK,aAA4B/D,SAAA4D,GAAAI,WAAAxE,GAAAoE,EAAAI,UAAAlE,KAAA8D,EAAAI,UAAAlE,GAAAmE,gBAAgFtE,GAAA,EAAOT,GAAA,EAAQc,IAAAtwB,QAAA,2BAAyC0wB,EAAA,GAAA1c,SAAAsc,EAAAtwB,QAAA,uBAAiD0wB,EAAA,GAAA1c,SAAAsc,EAAAtwB,QAAA,2BAAqD0wB,EAAA,cAAArL,KAAAiL,GAAAtc,SAAAsc,EAAAtwB,QAAA,qCAAoF,UAAA6vB,IAAA,UAAAjR,OAAA,UAAAhvB,KAAA,OAAAkgC,EAAyD,IAAI,GAAA8B,GAAA,IAAA9kC,QAAA,UAAA8xB,OAAA,UAAAhvB,KAAA,OAAAqkC,EAA8DrC,KAAOtB,EAAAsB,EAAAvB,YAAA,YAA8BC,IAAOd,GAAA,EAAOc,IAAAjhC,MAAA,QAAAA,MAAA,KAA+BqhC,GAAA1c,SAAAsc,EAAA,OAAAtc,SAAAsc,EAAA,OAAAtc,SAAAsc,EAAA,UAAgE,MAAAlB,IAAY,OAAOoF,GAAAjF,EAAAiB,GAAAE,EAAAO,GAAAN,EAAA+B,GAAAlD,EAAA2C,IAAArB,EAAAsB,IAAAT,OAAsC,WAAgBpB,EAAAiE,YAAiBzS,GAAA/gB,YAAA8uB,GAAA,YAAA/N,EAAA/gB,kBAAA+gB,GAAA/gB,YAAA8uB,IAAA/N,EAAA30B,qBAAA,YAAA20B,EAAAvlB,QAA8HwY,IAAIma,UAAOpN,GAAAyB,kBAAAsM,GAAiC/N,EAAAyB,iBAAA,mBAAAxO,GAAA,GAA+Cub,EAAAmC,IAAAnC,EAAA4B,MAAgBpQ,EAAAwB,YAAA9F,EAAA,WAA2B,YAAAsE,EAAA/gB,aAA6B+gB,EAAA0S,YAAAhX,EAAAxuB,UAAAwhC,QAAkCzb,OAAO6a,GAAA6E,MAAW,WAAY,IAAAvF,EAAA,CAAa,IAAIpN,EAAA4S,gBAAAC,SAAA,QAAmC,MAAApF,GAAwC,MAA/Bp8B,YAAAnE,UAAAwhC,OAAA,GAA+B,OAAOzb,SAASub,EAAAU,KAAS,WAAY,MAAA9B,GAAA,OAAa,kBAAA9J,KAAAtD,EAAA/gB,aAAgFgU,aAAtC5hB,WAAAnE,UAAAwhC,OAAA,GAA+B,WAAeb,EAAA5a,QAA++L,WAAiBub,EAAAmC,IAAAnC,EAAA4B,KAAgBrlC,OAAAy2B,YAAA,sBAAyD,OAAhBoO,GAAA6B,EAAAzgC,OAAgBu9B,EAAA,EAAaqB,EAAArB,EAAMA,IAAMkD,EAAAlD,GAAA,GAAAmE,YAAAjB,EAAAlD,GAAA,GAAAkD,EAAAlD,GAAA,GAAuD,QAAflB,GAAAkE,EAAAvgC,OAAew8B,EAAA,EAAaH,EAAAG,EAAKA,IAAM7R,EAAA4V,EAAA/D,GAAS,QAAAG,KAAAa,GAAgBA,EAAAb,GAAA,IAAUa,GAAA,IAAO,QAAAf,KAAAT,WAAwBA,UAAAS,GAAA,IAAkBT,WAAA,UAAqB,OAAO8F,eAAA,SAAAvE,EAAAd,EAAAD,EAAAH,GAAmC,GAAAmB,EAAAiE,IAAAlE,GAAAd,EAAA,CAAgB,GAAAE,KAASA,GAAA7kC,GAAAylC,EAAQZ,EAAAsB,WAAAxB,EAAeE,EAAAwB,eAAA3B,EAAoBG,EAAAkB,WAAAxB,EAAenK,IAAAlyB,QAAA28B,EAAcoC,EAAAxB,GAAA,OAAiBlB,IAAMA,GAAGyB,SAAA,EAAAhmC,GAAAylC,KAAwBwE,cAAA,SAAAtF,GAA2B,MAAAe,GAAAiE,GAASxC,EAAAxC,GAAT,QAAsBuF,SAAA,SAAAzE,EAAAoB,EAAAZ,EAAAJ,EAAAhB,EAAAH,EAAAH,EAAAwC,EAAAjB,EAAAgB,GAAgD,GAAAnC,IAAOqB,SAAA,EAAAhmC,GAAA6mC,EAAqBnB,GAAAiE,MAAAjE,EAAAU,IAAAV,EAAAU,GAAA,MAAAX,GAAAoB,GAAAZ,GAAAJ,GAAAhB,GAA+CoC,EAAAJ,GAAA,GAAY/B,EAAA,WAAamB,GAAA,GAAOJ,GAAA,EAAO,IAAAsE,KAAU,IAAArE,cAAAxhC,EAAsB,OAAA8lC,KAAAtE,GAAkBqE,EAAAC,GAAAtE,EAAAsE,EAAeD,GAAA30B,KAAAiwB,EAAW0E,EAAA3D,MAAAP,EAAYkE,EAAAzD,OAAAb,CAAa,IAAAwE,KAAU,IAAAtD,cAAAziC,EAAsB,OAAAgmC,KAAAvD,GAAkBsD,EAAAC,GAAAvD,EAAAuD,EAAe,IAAA/F,cAAAjgC,EAAoB,OAAAiiC,KAAAhC,SAAiB8F,GAAAvC,WAAA7C,EAA2BoF,EAAAvC,WAAA,IAAAvB,EAAA,IAAAhC,EAAAgC,GAAoC8D,EAAAvC,UAAAvB,EAAA,IAAAhC,EAAAgC,EAA4B,IAAAL,EAAArB,GAAA,CAAS,GAAA0F,GAAAtC,EAAAkC,EAAAE,EAAAxD,EAAmBsD,GAAAnqC,IAAA6mC,GAAcI,EAAAJ,GAAA,GAAWlC,EAAAqB,SAAA,EAAerB,EAAAuC,IAAAqD,MAAS,CAAK,GAAA7F,GAAA4B,IAAsC,MAA1B6D,GAAA30B,KAAAkvB,EAAWsC,EAAAmD,EAAAE,EAAAxD,EAAAC,GAAe,MAAYG,GAAAJ,GAAA,GAAYC,GAAOA,EAAAnC,MAAcmC,GAAOA,EAAAnC,IAAQ6F,sBAAA,WAAkCrqC,GAAA;EAAQ44B,GAAA2M,EAAAvB,sBAAA,WAAuC,OAAOC,MAAAsB,EAAAC,GAAA,GAAA8E,MAAA/E,EAAAC,GAAA,GAAA+E,QAAAhF,EAAAC,GAAA,KAA6CgF,sBAAAzE,EAAA0E,UAAA,SAAArG,EAAAM,EAAAF,GAAmD,MAAAe,GAAAiE,GAAS1B,EAAA1D,EAAAM,EAAAF,GAAqBjhC,QAAkBmnC,mBAAA,SAAAtG,EAAAG,EAAAC,EAAAE,GAAuCa,EAAAiE,IAAArD,KAAcU,EAAAzC,EAAAG,EAAAC,EAAAE,IAAaiG,UAAA,SAAAnG,GAAuBe,EAAAiE,IAAS9W,EAAA8R,IAAMoG,UAAA,SAAArG,EAAAH,EAAAM,EAAAF,GAA8Be,EAAAiE,IAASxN,EAAAuI,EAAAH,EAAAM,EAAAF,IAAaqG,gBAAAlG,EAAAmG,aAAAlG,EAAAmG,mBAAA,SAAAxG,GAAkE,GAAAH,GAAArN,EAAA7rB,SAAA8/B,QAAAjU,EAAA7rB,SAAA+/B,IAAyC,IAAA7G,EAAA,CAAyC,GAAnC,KAAA/J,KAAA+J,KAAiBA,IAAA//B,MAAA,SAAkB,MAAAkgC,EAAa,MAAAuE,GAAA1E,EAA+B,QAAnBM,GAAAN,EAAA//B,MAAA,KAAmBmgC,EAAA,EAAYA,EAAAE,EAAA38B,OAAWy8B,IAAK,GAAAE,EAAAF,GAAAjX,UAAA,EAAAmX,EAAAF,GAAA99B,QAAA,OAAA69B,EAA4C,MAAAuE,GAAApE,EAAAF,GAAAjX,UAAAmX,EAAAF,GAAA99B,QAAA,SAAkD,UAASwkC,uBAAA,WAAmC,GAAAvjC,EAAA,CAAM,GAAA68B,GAAAvkC,EAAAunC,EAAWhD,IAAAtM,IAASsM,EAAAniC,WAAA0lC,aAAA7P,EAAAsM,GAA+BnkC,IAAMymC,EAAAzmC,GAAA,GAAUklC,EAAAmC,IAAAnC,EAAA4B,MAAgBjP,EAAA0P,MAAAC,QAAA,UAAyBR,GAAMA,EAAAC,IAAM3/B,GAAA,SAO95T,WAEA,sBAAA7F,iBAAAuE,UAAA,CAEA,GAAA0iB,GAAAjnB,OAAAinB,OAKA,IAJAA,KAAA5oB,KAAA4oB,EAAA/lB,QACA+lB,GAAe5oB,IAAA,aAAkB6C,MAAA,gBAGjC+gC,UAAAyG,sBAAA,UAEA,MADAzhB,GAAA/lB,MAAA,uCACA,MAEA,UAAAkI,SAAAsN,UACAuQ,EAAA/lB,MACA,wJAaAqD,UAAA,SAAA+O,EAAA+1B,EAAAC,EAAAC,EAAA/1B,GACA,GAAAgb,GAAA9wB,IACA8wB,GAAAgb,KAAAjlC,UAAAklC,WACAllC,UAAAmlC,YAAAlb,EAAAgb,MAAAhb,EACAA,EAAAta,WAAA3P,UAAAolC,WACAnb,EAAAob,eAAA,EACApb,EAAAqb,YACAR,EAEK,gBAAAA,KACLA,OAFAA,KAMA/iC,WAAA,WACA/B,UAAAq9B,UAAA,WACAr9B,UAAAulC,QAAAj/B,OACA2jB,EAAAgb,KAAAl2B,EAAA+1B,EAAAC,GAAA,KAAAC,GAAA,EAAA/1B,GAAA,SAEK,IAQLjP,UAAAuZ,UAAA9J,KAAA,SAAAT,GACA,GAAA7V,KAAAwW,YAAA3P,UAAAolC,WACA,wEAUA,IAAAv3B,GAAA7N,UAAAulC,QAAA91B,KAAAtW,KAAA8rC,KAAAvC,mBAAA1zB,GACA,UAAAnB,GACA,GAEA1U,KAAAksC,gBAAAx3B,GACA,IAOA7N,UAAAuZ,UAAAvT,MAAA,WACA7M,KAAAwW,YAAA3P,UAAAwlC,QAAArsC,KAAAwW,YAAA3P,UAAAylC,UAGAtsC,KAAAwW,WAAA3P,UAAAylC,QACAzlC,UAAAulC,QAAAv/B,MAAA7M,KAAA8rC,QAWAjlC,UAAAuZ,UAAA4Y,iBAAA,SAAAjkB,EAAApN,GACAoN,IAAA/U,MAAAmsC,WACAnsC,KAAAmsC,SAAAp3B,OAEA/U,KAAAmsC,SAAAp3B,GAAAxR,KAAAoE,IAWAd,UAAAuZ,UAAAmsB,oBAAA,SAAAx3B,EAAApN,GACA,GAAAoN,IAAA/U,MAAAmsC,SAEA,OADAK,GAAAxsC,KAAAmsC,SAAAp3B,GACA9P,EAAAunC,EAAAjkC,OAAA,EAAmCtD,GAAA,IAAQA,EAC3C,GAAAunC,EAAAvnC,KAAA0C,EAAA,CACA6kC,EAAAhkC,OAAAvD,EAAA,EACA,SAWA4B,UAAAuZ,UAAAqsB,cAAA,SAAA5T,GAEA,OADA2T,GAAAxsC,KAAAmsC,SAAAtT,EAAA9jB,UACA9P,EAAA,EAAmBA,EAAAunC,EAAAjkC,SAAmBtD,EACtCunC,EAAAvnC,GAAA4zB,EAEA,IAAApgB,GAAAzY,KAAA,KAAA64B,EAAA9jB,KACA0D,MAAAogB,IAOAhyB,UAAAuZ,UAAAssB,cAAA,SAAAC,GACA,cAAAA,KACA3sC,KAAAwW,WAAAm2B,EAAAn2B,YAEA,YAAAm2B,KACA3sC,KAAAgZ,SAAA2zB,EAAA3zB,SAGA,IAAA4zB,EACA,YAAAD,EAAA53B,MAAA,SAAA43B,EAAA53B,KACA63B,EAAA5sC,KAAA6sC,oBAAAF,EAAA53B,UACK,aAAA43B,EAAA53B,KAEL63B,EAAA5sC,KAAA6sC,oBAAA,aACK,eAAAF,EAAA53B,KAIL,4BAAA43B,EAAA53B,IAHA,IAAAc,GAAAi3B,mBAAAH,EAAAzpC,QACA0pC,GAAA5sC,KAAA+sC,qBAAA,UAAAl3B,GAKA7V,KAAAysC,cAAAG,IAGA/lC,UAAAuZ,UAAAysB,oBAAA,SAAA93B,GACA,GAAAtS,SAAAuqC,aAAA1qC,OAAA2qC,MAAA,CACA,GAAApU,GAAAp2B,SAAAuqC,YAAA,QAEA,OADAnU,GAAAqU,UAAAn4B,GAAA,MACA8jB,EAEA,OAAc9jB,OAAAo4B,SAAA,EAAAC,YAAA,IAIdvmC,UAAAuZ,UAAA2sB,qBAAA,SAAAh4B,EAAAc,GACA,GAAApT,SAAAuqC,aAAA1qC,OAAA+qC,eAAA/qC,OAAAgrC,MAAA,CACA,GAAAzU,GAAAp2B,SAAAuqC,YAAA,eAEA,OADAnU,GAAA0U,iBAAA,gBAAA13B,EAAA,UAAAvT,OAAA,MACAu2B,EAGA,OAAc9jB,OAAAc,OAAAs3B,SAAA,EAAAC,YAAA,IAOdvmC,UAAAolC,WAAA,EACAplC,UAAA2mC,KAAA,EACA3mC,UAAAylC,QAAA,EACAzlC,UAAAwlC,OAAA,EAEAxlC,UAAAulC,QAAA,KACAvlC,UAAAmlC,eACAnlC,UAAAs9B,WACAt9B,UAAAklC,SAAA,EAMAllC,UAAAw9B,oBAAA,SAAAzuB,GACA/O,UAAAq9B,UAAA,WACAr9B,UAAAulC,QAAAqB,qBAAA73B,MAOA/O,UAAAy9B,aAAA,WACA,IAAAz9B,UAAAulC,QAAA,CAMA,GAJAvlC,UAAA6mC,gBAEAprC,OAAA8hC,wBAAAv9B,UAAA6mC,gBAEAprC,OAAA8hC,wBAEA,MADA7a,GAAA/lB,MAAA,4EACA,MAEA,IAAAmqC,GAAAlrC,SAAAC,cAAA,MACAirC,GAAAttC,GAAA,qBAMAstC,EAAAvF,MAAAwF,SAAA,WACA/mC,UAAAgnC,iBACAF,EAAAvF,MAAA0F,KAAA,MACAH,EAAAvF,MAAA8B,IAAA,QAEAyD,EAAAvF,MAAA0F,KAAA,SACAH,EAAAvF,MAAA8B,IAAA,SAEA,IAAA5N,GAAA75B,SAAAC,cAAA,MACA45B,GAAAj8B,GAAA,iBACAstC,EAAA9I,YAAAvI,GACA75B,SAAAuP,KAAA6yB,YAAA8I,GAGApJ,UAAAgG,SACAnG,wBACA,iBACA,IACA,IACA,SACA,KACA,MACO2J,aAAA,EAAAC,eAAA,EAAAC,kBAAA,UACP,KACA,SAAAnmC,GACAA,EAAAu+B,SACA9c,EAAA/lB,MAAA,6CASAqD,UAAAqnC,qBAAA,WAGAtlC,WAAA,WACA/B,UAAAulC,QAAA3pC,SAAAsmC,eAAA,kBACAliC,UAAAulC,QAAA+B,aAAAziC,SAAA0iC,MACAvnC,UAAAulC,QAAAiC,WAAA/rC,OAAAgsC,iBACA,QAAArpC,GAAA,EAAqBA,EAAA4B,UAAAs9B,QAAA57B,SAA8BtD,EACnD4B,UAAAs9B,QAAAl/B,IAEA4B,WAAAs9B,YACK,IAMLt9B,UAAA0nC,eAAA,WAcA,MAbA3lC,YAAA,WACA,IAKA,OADA4jC,GAAA3lC,UAAAulC,QAAAoC,gBACAvpC,EAAA,EAAuBA,EAAAunC,EAAAjkC,SAAmBtD,EAC1C4B,UAAAmlC,YAAAQ,EAAAvnC,GAAAwpC,aAAA/B,cAAAF,EAAAvnC,IAEO,MAAA6C,GACPyhB,EAAA/lB,MAAAsE,KAEK,IACL,GAIAjB,UAAA6nC,MAAA,SAAAxrC,GACAqmB,EAAA5oB,IAAAmsC,mBAAA5pC,KAIA2D,UAAA8nC,QAAA,SAAAzrC,GACAqmB,EAAA/lB,MAAAspC,mBAAA5pC,KAGA2D,UAAAq9B,UAAA,SAAAvS,GACA9qB,UAAAulC,QACAza,IAEA9qB,UAAAs9B,QAAA5gC,KAAAouB,IAQA9qB,UAAAgnC,cAAA,WACA,IAAAvrC,OAAA6D,YAAA7D,OAAA6D,UAAA2jC,UACA,QAEA,IAAA8E,GAAAtsC,OAAA6D,UAAA2jC,UAAA,gCACA,OAAA8E,MAAA7E,eAAA6E,EAAA7E,cAAA8E,SAGAD,EAAA7E,cAAA8E,SAAAxrC,MAAA,qBAFA,GAKAf,OAAAoiC,yCACApiC,OAAA02B,iBACA12B,OAAA02B,iBAAA,kBACAnyB,UAAAy9B,iBACO,GAEPhiC,OAAAy2B,YAAA,oBACAlyB,UAAAy9B,sBAaA,SAAA1kC,EAAAsT,EAAAmkB,GAiBA,QAAAyX,GAAA96B,GACAA,IAEAd,EAAA+rB,UAAAz6B,MAAAxE,KAAAyE,WACAzE,KAAA+uC,eAiEA,QAAA7N,MA9EAthC,EAAAkvC,MAoBA57B,EAAAykB,KAAAsC,QAAA6U,EAAA57B,EAAA+rB,WASA6P,EAAA1uB,UAAA5W,KAAA,WASA,MARAxJ,MAAAgU,OAAAyuB,WAAA,GACAziC,KAAAya,SACAza,KAAAyvB,MAIAzvB,KAAAu/B,kBAEAv/B,MAUA8uC,EAAA1uB,UAAAuiB,QAAA,SAAAA,GAGA,OAFAnD,MAEAv6B,EAAA,EAAAyzB,EAAAiK,EAAAp6B,OAAuCmwB,EAAAzzB,EAAOA,IAC9Cu6B,EAAAj8B,KAAA2P,EAAA4qB,OAAAI,aAAAyE,EAAA19B,IAGAjF,MAAAsW,KAAApD,EAAA4qB,OAAAW,cAAAe,KAWAsP,EAAA1uB,UAAA9J,KAAA,SAAAT,GAEA,MADA7V,MAAA6vB,KAAAha,GACA7V,MAYA8uC,EAAA1uB,UAAAyP,KAAA,SAAAha,GAIA,QAAAm5B,KACA,GAAAhvC,KAAAwW,aACAxW,KAAAuW,mBAAA2qB,EACApQ,EAAAme,SAAA,EAEA,KAAAjvC,KAAAyW,OACAqa,EAAA9c,OAAAyuB,WAAA,GAEA3R,EAAApW,WAKA,QAAA6qB,KACAvlC,KAAAulC,OAAArE,EACApQ,EAAA9c,OAAAyuB,WAAA,GAlBA,GAAA3R,GAAA9wB,IACAA,MAAAgU,OAAAyuB,WAAA,GAoBAziC,KAAAkvC,QAAAlvC,KAAAi5B,QAAA,QAEA5B,EAAA8B,gBAAAn5B,KAAAkvC,kBAAA/V,gBACAn5B,KAAAkvC,QAAA3J,OAAAvlC,KAAAkvC,QAAAjsC,QAAAsiC,EAEAvlC,KAAAkvC,QAAA34B,mBAAAy4B,EAGAhvC,KAAAkvC,QAAA54B,KAAAT,IAUAi5B,EAAA1uB,UAAAvT,MAAA,WAEA,MADA7M,MAAA0a,UACA1a,MAYA8uC,EAAA1uB,UAAA6Y,QAAA,SAAAxjB,GACA,GAAA05B,GAAAj8B,EAAAykB,KAAAsB,QAAAj5B,KAAAgU,OAAAgtB,aACAznB,EAAArG,EAAAykB,KAAApe,MAAAvZ,KAAAgU,OAAA1C,QAAAiI,MAAA,UAAAlG,MAIA,IAFA87B,EAAA3lC,KAAAiM,GAAA,MAAAzV,KAAAggC,aAAAzmB,GAAA,GAEA,QAAA9D,EACA,IACA05B,EAAA94B,iBACA84B,EAAA94B,iBAAA,2CAGA84B,EAAAC,YAAA,aAEO,MAAAtnC,IAGP,MAAAqnC,IASAL,EAAA1uB,UAAA6f,OAAA,WACA,MAAAjgC,MAAAgU,OAAA1C,QAAAgI,OAAA,gBAWAw1B,EAAA/M,MAAA,SAAA/tB,EAAAklB,GACA,IACA,GAAAD,GAAA/lB,EAAAykB,KAAAsB,QAAAC,GACAmW,EAAAhY,EAAA8B,gBAAAF,YAAAE,gBACAmW,EAAAt7B,KAAA1C,SAAA0C,EAAA1C,QAAAgI,OAAA,iBACAi2B,EAAAlY,EAAA3rB,UAAA4jC,GAAAjY,EAAA3rB,SAAAsN,QACA,IAAAigB,KAAAoW,IAAAE,GACA,SAEK,MAAAznC,IAEL,UAUAgnC,EAAA9M,aAAA,SAAAhuB,GACA,MAAA86B,GAAA/M,MAAA/tB,GAAA,KAIA,mBAAAd,OAAA+rB,UAAAp/B,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,QACAI,MAQA,SAAAJ,EAAAsT,GAmBA,QAAAs8B,KACAt8B,EAAA+rB,UAAA6P,IAAAtqC,MAAAxE,KAAAyE,WAdA7E,EAAA6vC,SAAAD,EAqBAt8B,EAAAykB,KAAAsC,QAAAuV,EAAAt8B,EAAA+rB,UAAA6P,KAQAU,EAAApvB,UAAAna,KAAA,WAUAupC,EAAApvB,UAAAqP,IAAA,WACAzvB,KAAA0vC,IAAA,IAAAptC,QAAA,UAAA8xB,OAAA,UAAAhvB,KAAA,mBACApF,KAAA0vC,IAAAlmC,OACAxJ,KAAA0vC,IAAAC,MAAA,iBACA3vC,KAAA0vC,IAAA7iC,QACA7M,KAAA0vC,IAAAE,aAAAxK,EAAAplC,IAEA,IAAA6vC,GAAA7vC,KAAA0vC,IAAAhtC,cAAA,MACAmtC,GAAAhqC,UAAA,WAEA7F,KAAA0vC,IAAA19B,KAAA6yB,YAAAgL,GACA7vC,KAAA8vC,OAAA9vC,KAAA0vC,IAAAhtC,cAAA,UAEAmtC,EAAAhL,YAAA7kC,KAAA8vC,OAEA,IAAAhf,GAAA9wB,KACAuZ,EAAArG,EAAAykB,KAAApe,MAAAvZ,KAAAgU,OAAA1C,QAAAiI,MAAA,UAAAlG,MAEArT,MAAA8vC,OAAA/sC,IAAA/C,KAAAggC,aAAAzmB,EAEArG,EAAAykB,KAAAnf,GAAAlW,OAAA,oBACAwuB,EAAAif,aAcAP,EAAApvB,UAAA4vB,EAAA,SAAAn6B,EAAA65B,GAEA75B,IAAAL,QAAA,aACAxV,KAAAo/B,OAAAvpB,EACA,KACA,GAAA4rB,GAAAiO,EAAA9sC,qBAAA,YACA6+B,GAAA5+B,WAAA6+B,YAAAD,GACK,MAAA35B,MAWL0nC,EAAApvB,UAAA2vB,QAAA,WACA,GAAA/vC,KAAA8vC,OAAA,CACA,IACA9vC,KAAA8vC,OAAA/sC,IAAA,cACO,MAAA+E,IAEP9H,KAAA0vC,IAAA,KACA1vC,KAAA8vC,OAAAjtC,WAAA6+B,YAAA1hC,KAAA8vC,QACA9vC,KAAA8vC,OAAA,KAEAG,mBAWAT,EAAApvB,UAAAvT,MAAA,WAEA,MADA7M,MAAA+vC,UACA78B,EAAA+rB,UAAA6P,IAAA1uB,UAAAvT,MAAAtM,KAAAP,OAWAwvC,EAAAzN,MAAA,SAAA/tB,GACA,sBAAA1R,UAAA,UAAA8xB,OAAA,UAAAhvB,KAAA,MAAA9C,QACA,IACA,GAAA6F,GAAA,IAAA7F,QAAA,UAAA8xB,OAAA,UAAAhvB,KAAA,kBACA,OAAA+C,IAAA+K,EAAA+rB,UAAA6P,IAAA/M,MAAA/tB,GACO,MAAAlM,IAEP,UAUA0nC,EAAAxN,aAAA,WAGA,UASA9uB,EAAAokB,WAAA/zB,KAAA,aAGA,mBAAA2P,OAAA+rB,UAAAp/B,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,SASA,SAAAA,EAAAsT,EAAAmkB,GAgBA,QAAA6Y,KACAh9B,EAAA+rB,UAAA6P,IAAAtqC,MAAAxE,KAAAyE,WAsDA,QAAAy8B,MAjEAthC,EAAA,eAAAswC,EAkBAh9B,EAAAykB,KAAAsC,QAAAiW,EAAAh9B,EAAA+rB,UAAA6P,KAMA57B,EAAAykB,KAAAG,MAAAoY,EAAAh9B,EAAA+rB,UAAA6P,KAQAoB,EAAA9vB,UAAAna,KAAA,cAQAiqC,EAAA9vB,UAAA+e,WAAA,WACA,UAWA+Q,EAAA9vB,UAAA5W,KAAA,WACA,GAAAsnB,GAAA9wB,IAGA,OADAkT,GAAA+rB,UAAA6P,IAAA1uB,UAAA5W,KAAAjJ,KAAAuwB,IACA,GAWAof,EAAA9vB,UAAAqP,IAAA,WAKA,QAAAuf,KACA,GAAAhvC,KAAAwW,aACAxW,KAAAuW,mBAAA2qB,EAEA,KAAAlhC,KAAAyW,QACAqa,EAAAsO,OAAAp/B,KAAA2hC,cACA7Q,EAAArB,OAEAqB,EAAApW,WAKA,QAAA6qB,KACAvlC,KAAAulC,OAAArE,EACAlhC,KAAAiD,QAAAi+B,EACApQ,EAAAqf,aAAA,EACArf,EAAAsO,OAAAp/B,KAAA2hC,cACA7Q,EAAArB,MAGA,QAAAxsB,KACA6tB,EAAAqf,gBACArf,EAAAqf,cAAArf,EAAAqf,aAAA,EACArf,EAAApW,UAEAoW,EAAArB,MA9BA,GAAAzvB,KAAA4/B,OAAA,CAEA,GAAA9O,GAAA9wB,IAgCAA,MAAAoW,IAAApW,KAAAi5B,UAEA5B,EAAA8B,gBAAAn5B,KAAAoW,cAAA+iB,iBACAn5B,KAAAoW,IAAAmvB,SACAvlC,KAAAoW,IAAAnT,WAEAjD,KAAAoW,IAAAG,mBAAAy4B,EAGAhvC,KAAAoW,IAAAE,KAAA,QASA45B,EAAA9vB,UAAA1F,QAAA,WAGA,GAFAxH,EAAA+rB,UAAA6P,IAAA1uB,UAAA1F,QAAAna,KAAAP,MAEAA,KAAAoW,IAAA,CACApW,KAAAoW,IAAAG,mBAAAvW,KAAAoW,IAAAmvB,OAAAvlC,KAAAoW,IAAAnT,QAAAi+B,CACA,KACAlhC,KAAAoW,IAAAg6B,QACO,MAAAtoC,IACP9H,KAAAoW,IAAA,OAeA85B,EAAA9vB,UAAA+f,MAAA,SAAAnsB,EAAAF,GACA,GAAAgd,GAAA9wB,IAEAkT,GAAAykB,KAAA1uB,MAAA,WACA6K,EAAAvT,KAAAuwB,MAUA5d,EAAAokB,WAAA/zB,KAAA,gBAGA,mBAAA2P,OAAA+rB,UAAAp/B,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,QACAI,MASA,SAAAJ,EAAAsT,EAAAmkB,GA6BA,QAAAgZ,KACAn9B,EAAA+rB,UAAA,eAAAz6B,MAAAxE,KAAAyE,WAEAzE,KAAAuL,MAAA2H,EAAAqkB,EAAAhvB,MAEA,IAAAuoB,GAAA9wB,IAEAkT,GAAAqkB,EAAAh0B,KAAA,SAAA+sC,GACAxf,EAAAkf,EAAAM,KA5BA,GAAAC,GAAAlZ,EAAA50B,UAAA,iBACA40B,GAAA50B,SAAA0nC,gBAAA/B,KAMAxoC,GAAA,iBAAAywC,EA6BAn9B,EAAAykB,KAAAsC,QAAAoW,EAAAn9B,EAAA+rB,UAAA,gBAQAoR,EAAAjwB,UAAAna,KAAA,gBAYAoqC,EAAAjwB,UAAAyP,KAAA,SAAAha,GA+BA,QAAA0rB,KACAiP,IACA1f,EAAA9c,OAAAyuB,WAAA,GAGA,QAAA+N,KACA1f,EAAAgf,QACAhf,EAAA2f,KAAA/O,YAAA5Q,EAAAgf,OAGA,KAEAA,EAAArtC,SAAAC,cAAA,iBAAAouB,EAAA4f,SAAA,MACO,MAAA5oC,GACPgoC,EAAArtC,SAAAC,cAAA,UACAotC,EAAA7pC,KAAA6qB,EAAA4f,SAGAZ,EAAAzvC,GAAAywB,EAAA4f,SAEA5f,EAAA2f,KAAA5L,YAAAiL,GACAhf,EAAAgf,SAnDA,GAAAhf,GAAA9wB,KACAuZ,EAAArG,EAAAykB,KAAApe,MACAvZ,KAAAgU,OAAA1C,QAAAiI,MACA,UAAAlG,MAAA,MAAArT,KAAAuL,MAGA,KAAAvL,KAAAywC,KAAA,CACA,GAGAX,GAHAW,EAAAhuC,SAAAC,cAAA,QACAiuC,EAAAluC,SAAAC,cAAA,YACArC,EAAAL,KAAA0wC,SAAA,mBAAA1wC,KAAAuL,KAGAklC,GAAA5qC,UAAA,WACA4qC,EAAArI,MAAAwF,SAAA,WACA6C,EAAArI,MAAA8B,IAAA,MACAuG,EAAArI,MAAA0F,KAAA,MACA2C,EAAArI,MAAAC,QAAA,OACAoI,EAAA9nC,OAAAtI,EACAowC,EAAAh7B,OAAA,OACAg7B,EAAAztC,aAAA,0BACA2tC,EAAA1qC,KAAA,IACAwqC,EAAA5L,YAAA8L,GACAluC,SAAAuP,KAAA6yB,YAAA4L,GAEAzwC,KAAAywC,OACAzwC,KAAA2wC,OAGA3wC,KAAAywC,KAAA34B,OAAA9X,KAAAggC,aAAAzmB,EA0BAi3B,IAIAxwC,KAAA2wC,KAAAh6B,MAAAzD,EAAAnF,KAAAE,UAAA4H,EAEA,KACA7V,KAAAywC,KAAAG,SACK,MAAA9oC,IAEL9H,KAAA8vC,OAAA/W,YACA+W,EAAAv5B,mBAAA,WACA,YAAAua,EAAAgf,OAAAt5B,YACA+qB,KAIAvhC,KAAA8vC,OAAAvK,OAAAhE,EAGAvhC,KAAAgU,OAAAyuB,WAAA,IAUA4N,EAAAjwB,UAAAqP,IAAA,WACA,GAAAqB,GAAA9wB,KACAyhC,EAAAh/B,SAAAC,cAAA,UACA6W,EAAArG,EAAAykB,KAAApe,MACAvZ,KAAAgU,OAAA1C,QAAAiI,MACA,UAAAlG,MAAA,MAAArT,KAAAuL,MAGAvL,MAAAyhC,SACAzhC,KAAAyhC,OAAA5+B,WAAA6+B,YAAA1hC,KAAAyhC,QACAzhC,KAAAyhC,OAAA,MAGAA,EAAAtR,OAAA,EACAsR,EAAA1+B,IAAA/C,KAAAggC,aAAAzmB,EACAkoB,EAAAx+B,QAAA,WACA6tB,EAAApW,UAGA,IAAA8mB,GAAA/+B,SAAAG,qBAAA,YACA4+B,GAAA3+B,WAAAC,aAAA2+B,EAAAD,GACAxhC,KAAAyhC,SAEA8O,GACA3nC,WAAA,WACA,GAAAknC,GAAArtC,SAAAC,cAAA,SACAD,UAAAuP,KAAA6yB,YAAAiL,GACArtC,SAAAuP,KAAA0vB,YAAAoO,IACO,MAWPO,EAAAjwB,UAAA4vB,EAAA,SAAAM,GAKA,MAJAtwC,MAAAo/B,OAAAkR,GACAtwC,KAAA4/B,QACA5/B,KAAAyvB,MAEAzvB,MAWAqwC,EAAAjwB,UAAA+f,MAAA,SAAAnsB,EAAAF,GACA,GAAAgd,GAAA9wB,IACA,OAAAuwC,IAEAr9B,EAAAykB,KAAAiB,KAAA,WACA9kB,EAAAvT,KAAAuwB,KADA5d,QAFAY,EAAAvT,KAAAP,OAcAqwC,EAAAtO,MAAA,WACA,kBAAA1K,IAUAgZ,EAAArO,aAAA,WACA,UASA9uB,EAAAokB,WAAA/zB,KAAA,kBAGA,mBAAA2P,OAAA+rB,UAAAp/B,OAAAD,QACA,mBAAAsT,OAAArT,OAAAu7B,OAAAx7B,QACAI,MAIAm3B,gCAAAC,8BAAA,WAA0B,MAAAlkB,KAAa1O,MAAA,KAAA2yB,gCAAApzB,SAAAqzB,gCAAAv3B,OAAAD,QAAAw3B,qCtBu+YT72B,KAAKX,QAASM,oBAAoB,IAAIL,UAI9D,SAASA,IuB/vgBf,SAAAH,EAAAC,GACA,YAOAE,GAAAD,QAAAD,KAaCK,KAAA,WAED,YA6RA,SAAA6wC,GAAA/uB,EAAA7b,GACAjG,KAAA8hB,MACA9hB,KAAAiG,OAkDA,QAAA6qC,GAAA/7B,EAAAoQ,GACAnlB,KAAA+U,OACA/U,KAAAmlB,OAjVA,GAAArE,GAAA,SAAAiwB,GACA,IAAAA,EACA,SAAA9sC,OAAA,sBAWA4c,GAEAoE,IAAA,SAAA+rB,GACAA,QACAhxC,KAAAgE,MAAAgtC,EAAAhtC,MAAAgtC,EAAAhtC,MAAA,aACAhE,KAAAixC,UAAAjxC,KAAAqjB,cACArjB,KAAA2f,KAAA,OAGAsxB,UAAA,SAAA5tB,GACArjB,KAAAkxC,QAAAlxC,KAAAkqC,MACAlqC,KAAAmxC,SAAAnxC,KAAAob,MAAA,WAGApb,KAAAujB,OAAA6tB,SACAlQ,MAAA,WACAlhC,KAAAqxC,gBAAAhuB,IAGA,IAAAiuB,GAAA,WAAqC,YAGrCtxC,MAAAujB,OAAAguB,KACAztB,MAAAwtB,EACA7tB,KAAA6tB,EACA3xB,KAAA2xB,EACApQ,MAAAoQ,GAEAtxC,KAAAwxC,WAKA7xB,KAAA,SAAA8xB,GACA3wB,EAAA9gB,KAAAkxC,UAAAlxC,KAAAkqC,OAAA,OAAAlqC,KAAAmxC,SACA,IAAA/L,GAAAplC,KAAAkxC,OAKA,KAJAlxC,KAAAmxC,SAAAO,QAAAD,GACA3wB,EAAAskB,EAAAuM,OAAA3xC,KAAAkxC,QAAAU,eACAxM,EAAAplC,KAAAkxC,QACA9L,EAAAvT,QACA,OAAAuT,EAAAzlB,QACAmB,EAAAskB,EAAAuM,OAAA3xC,KAAAkxC,QAAAU,eACAxM,EAAAplC,KAAAkxC,QACA9L,EAAAvT,SAIAzW,MAAA,SAAAy2B,GACA,MAAAA,gBAAAhB,GAAAgB,EAAA,GAAAhB,GAAA7wC,KAAA6xC,IAGA3H,IAAA,WAEA,MAAAlqC,MAAA8xC,YAAA9xC,KAAA8xC,UAAA,GAAAjB,GAAA7wC,KAAA,SAGAqlB,aAAA,WACA,MAAArlB,MAAAkxC,SAGAM,QAAA,WACAxxC,KAAA+xC,YAAA/xC,KAAA+xC,gBACA/xC,KAAAgyC,SAAAhyC,KAAAujB,OAAAvjB,KAAAkqC,MAAAjkC,OAGA+rC,SAAA,SAAAzuB,EAAA6X,GACA,GAAA7X,EAIA,OAAAnI,KAAAmI,GACAA,EAAA7C,eAAAtF,KACApb,KAAA+xC,YAAA32B,GAAAmI,EAAAnI,GACApb,KAAA+xC,YAAA32B,GAAAggB,SACAp7B,KAAAgyC,SAAAzuB,EAAAnI,GAAAmI,OAAAnI,KAKA62B,YAAA,SAAAC,GACA,MAAAlyC,MAAA+xC,YAAAG,IAGAzF,cAAA,SAAA0F,EAAA/2B,EAAAg3B,GAKA,GAJAA,KAAAh3B,EAAA+2B,EAAAp9B,MAIAq9B,YAAArtC,OACA,OAAAE,GAAA,EAA+BA,EAAAmtC,EAAA7pC,OAAgBtD,IAC/CjF,KAAAysC,cAAA0F,EAAA/2B,EAAAg3B,EAAAntC,GAQA,aAAAktC,EAAAp9B,MAAA,gBAAAq9B,GAEA,MADApyC,MAAAqxC,gBAAAe,GACA,IAGA,IAAAA,YAAA7rC,UAEA,MADA6rC,GAAA7xC,KAAAP,KAAAmyC,EAAAhtB,MACA,IACa,IAAAitB,GAEb,IAAAA,EAAAtvB,OAAAsvB,EAAAtvB,OAAAsvB,EAAAtvB,MAAAviB,KAAAP,KAAAmyC,EAAAhtB,MAOA,MANAitB,GAAAt6B,QACAs6B,EAAAt6B,OAAAvX,KAAAP,KAAAmyC,EAAAhtB,MAEAitB,EAAAzpC,QACA3I,KAAAulB,SAAA6sB,EAAAzpC,QAEA,SAGA,IAAAyS,IAAApb,KAAAiyC,YAAA,OAEA,MADAjyC,MAAAqyC,qBAAAF,GACA,IAGA,OAAAnyC,MAAAob,QAAAggB,SAIAiX,qBAAA,SAAAF,GAEA,MADAnyC,MAAAgE,MAAA,oBAAAmuC,EAAAp9B,MACA,MAOAoJ,SAAA,SAAAg0B,EAAAhtB,GAKA,IAJAgtB,eAAArB,KACAqB,EAAA,GAAArB,GAAAqB,EAAAhtB,IAEAnlB,KAAAmxC,SAAAnxC,KAAAkxC,QACAlxC,KAAAmxC,UACAnxC,KAAAmxC,SAAAnxC,KAAAmxC,SAAAO,QAAAS,IAKA5sB,SAAA,SAAA+sB,GACAtyC,KAAAuyC,WAAAvyC,KAAAob,MAAAk3B,KAOAjB,gBAAA,SAAAmB,GAEA,MADAxyC,MAAAkxC,QAAAlxC,KAAAob,MAAAo3B,GACA,MAIAD,WAAA,SAAA5pC,GACAmY,GAAAnY,EAAAgpC,OAAA3xC,KAAAkqC,OAEA,IAAApmB,MACAqtB,EAAAnxC,KAAAmxC,SACA/L,EAAAplC,KAAAkxC,OAKA,KAFApwB,EAAA,OAAAskB,GACAtkB,EAAA,OAAAqwB,IACA/L,EAAAuM,OAAAR,IACA/L,IAAA3hB,QAAA2hB,EAAAwM,YAQA,IAHA9tB,EAAAvgB,KAAAoF,GAGAwoC,EAAAQ,OAAAhpC,GAEA,MADAwoC,GAAA1tB,OACAzjB,KAAAyyC,SAAA9pC,EAAAmb,EAIA,IAAApjB,GAAAiI,EAAAipC,YACA,IAAAT,EAAAQ,OAAAjxC,GACA,MAAAV,MAAAyyC,SAAA9pC,EAAAmb,EAGAhD,GAAA,OAAAqwB,EAGA,IAAAvL,GAAAuL,EAAAS,YACA,IAAAhM,EAAA+L,OAAAjxC,GAEA,MADAywC,GAAA1tB,OACAzjB,KAAAyyC,SAAA9pC,EAAAmb,EAIA,IAAA8hB,EAAA+L,OAAAhpC,GAGA,MAFAwoC,GAAA1tB,OACAK,EAAA4uB,MACA1yC,KAAAyyC,SAAA9pC,EAAAmb,EAMA,KAFAA,EAAAvgB,KAAA7C,GACA0kC,EAAA1kC,EAAAkxC,aACA,OAAAxM,GAAA,CACA,GAAA+L,EAAAQ,OAAAvM,GACA,MAAAplC,MAAAyyC,SAAA9pC,EAAAmb,EAGAA,GAAAvgB,KAAA6hC,GACAA,IAAAwM,aAIAT,EAAA1tB,MAGA,IAGAkvB,GAHAC,EAAA9uB,EAAAvb,MAIA,KAAAoqC,EAAAC,EAAA,EAAuCD,GAAA,EAAUA,GAAA,EACjD,GAAA/M,EAAA+L,OAAA7tB,EAAA6uB,IACA,MAAA3yC,MAAAyyC,SAAA9pC,EAAAmb,EAAAhP,MAAA,EAAA69B,GAMA,KADAvN,EAAAQ,EACA,OAAAR,GAAA,CACA,IAAAuN,EAAAC,EAAA,EAA2CD,GAAA,EAAUA,GAAA,EACrD,GAAAvN,EAAAuM,OAAA7tB,EAAA6uB,IACA,MAAA3yC,MAAAyyC,SAAA9pC,EAAAmb,EAAAhP,MAAA,EAAA69B,GAGAvN,GAAA3hB,OACA2hB,IAAAwM,eAMAa,SAAA,SAAA9pC,EAAAmb,GAIA,IADA,GAAA+uB,GAAA/uB,EAAAvb,OACAsqC,EAAA,GACAA,IACA/uB,EAAA+uB,GAAAhhB,OAIA,KADA7xB,KAAAkxC,QAAAvoC,EACA,OAAAA,EAAAgX,QAEAmB,EAAAnY,EAAAgpC,OAAA3xC,KAAAkxC,QAAAU,eACAjpC,EAAA3I,KAAAkxC,QACAvoC,EAAAkpB,SAaAgf,GAAAzwB,WACAuxB,OAAA,SAAAv2B,GACA,MAAApb,MAAAiG,OAAAmV,EAAAnV,MAAAjG,KAAA8hB,MAAA1G,EAAA0G,KAGA2qB,cAAA,SAAA0F,EAAA/2B,GACA,MAAApb,MAAA8hB,IAAA2qB,cAAA0F,EAAA/2B,IAGAs2B,QAAA,SAAAS,GACA,GAAAvqC,GAAAuqC,GAAAW,EACA13B,EAAApb,KAAA8hB,IAAAmwB,YAAAjyC,KAAAiG,KACA,OAAAjG,MAAAysC,cAAA7kC,EAAAwT,IAGAyW,MAAA,WAEA,MADA7xB,MAAA8hB,IAAA9d,MAAA,IAAAhE,KAAAiG,KAAA,WACAjG,KAAA0xC,QAAAqB,IAGAtvB,KAAA,WAEA,MADAzjB,MAAA8hB,IAAA9d,MAAA,IAAAhE,KAAAiG,KAAA,UACAjG,KAAA0xC,QAAAsB,IAGArzB,KAAA,WAEA,MADA3f,MAAA8hB,IAAA9d,MAAA,IAAAhE,KAAAiG,KAAA,UACAjG,KAAA0xC,QAAAuB,IAIArB,WAAA,WACA,GAAAA,GAAA5xC,KAAA0xC,QAAAoB,EACA,OAAAlB,gBAAAf,GACAe,GAEAA,EAAA5xC,KAAA8hB,IAAAooB,MACAlqC,KAAAiG,OAAA2rC,EAAA3rC,KACA,KAEA2rC,IAeA,IAAAmB,GAAA,GAAAjC,GAAA,SACAkC,EAAA,GAAAlC,GAAA,QACAmC,EAAA,GAAAnC,GAAA,QACAgC,EAAA,GAAAhC,GAAA,QAGA,OAAAjwB,MvBixgBM,SAAShhB,GwBjphBfA,EAAAD,QAAA,SAAAC,GAQA,MAPAA,GAAAqzC,kBACArzC,EAAA0sB,UAAA,aACA1sB,EAAAszC,SAEAtzC,EAAAuzC,YACAvzC,EAAAqzC,gBAAA,GAEArzC","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn ","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*global Bugsnag: true*/\n\t/*jshint bitwise: false*/\n\t\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t *\n\t * Copyright (c) 2014 Digium, Inc.\n\t * All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar log = __webpack_require__(19);\n\tlog.setLevel('warn');\n\t\n\tvar Q = __webpack_require__(18);\n\tQ.longStackSupport = true;\n\tQ.stackJumpLimit = 5;\n\tQ.longStackJumpLimit = 20;\n\tQ.stopUnhandledRejectionTracking();\n\t\n\t__webpack_require__(17);\n\t\n\t/**\n\t * `respoke` is a global static class.\n\t * \n\t * \n\t * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or \n\t * [choose a previous release](http://cdn.respoke.io/list.html).\n\t * \n\t * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n\t * \n\t *      var client = respoke.createClient();\n\t *\n\t * \n\t * **Development mode without brokered auth**\n\t * \n\t *      var client = respoke.createClient({\n\t *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n\t *          developmentMode: true,\n\t *          endpointId: \"billy\"\n\t *      });\n\t *      \n\t *      client.listen('connect', function () {\n\t *          console.log('connected to respoke!');\n\t *      });\n\t *      \n\t *      client.listen('error', function (err) {\n\t *          console.error('Connection to Respoke failed.', err);\n\t *      });\n\t *\n\t *      client.connect();\n\t *\n\t * \n\t * **Production mode with brokered auth**\n\t * \n\t *      var client = respoke.createClient();\n\t *      \n\t *      client.listen('connect', function () {\n\t *          console.log('connected to respoke!');\n\t *      });\n\t *\n\t *      client.listen('error', function (err) {\n\t *          console.error('Connection to Respoke failed.', err);\n\t *      });\n\t *\n\t *      // Respoke auth token obtained by your server. \n\t *      // This is how you control who can connect to Respoke app.\n\t *      // See API docs for POST [base]/tokens\n\t *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n\t *\n\t *      // connect to respoke with the token\n\t *      client.connect({\n\t *          reconnect: false,\n\t *          token: tokenId\n\t *      });\n\t *\n\t *      // fetch a new token from your server if it expires\n\t *      client.listen('disconnect', function (evt) {\n\t *          // fetch another token from your server.\n\t *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n\t *          client.connect({\n\t *              reconnect: false,\n\t *              token: newTokenId\n\t *          });\n\t *      });\n\t * \n\t *\n\t * \n\t * ### Event listeners vs callback handlers\n\t *\n\t * There are two ways to attach listeners. It is highly recommended that you choose one pattern \n\t * and stick to it throughout your app.\n\t * \n\t * For every `event-name`, there is a corresponding callback `onEventName`.\n\t *\n\t * **With a listener**\n\t *\n\t *      var client = respoke.createClient();\n\t *      client.listen('connect', function () { });\n\t * \n\t * **or with a callback**\n\t *\n\t *      var client = respoke.createClient({\n\t *          // other options go here\n\t *          \n\t *          onConnect: function () { }\n\t *      });\n\t * \n\t * \n\t * @namespace respoke\n\t * @class respoke\n\t * @global\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t */\n\tvar respoke = module.exports = {\n\t    buildNumber: 'NO BUILD NUMBER',\n\t    streams: {},\n\t    instances: {}\n\t};\n\t\n\t/**\n\t * `\"v0.0.0\"`\n\t * \n\t * The respoke.min.js version.\n\t * \n\t * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n\t * @type {string}\n\t */\n\trespoke.version = respoke.buildNumber + \"\";\n\t\n\trespoke.EventEmitter = __webpack_require__(2);\n\trespoke.Client = __webpack_require__(3);\n\trespoke.Presentable = __webpack_require__(4);\n\trespoke.Connection = __webpack_require__(5);\n\trespoke.Endpoint = __webpack_require__(6);\n\trespoke.TextMessage = __webpack_require__(7);\n\trespoke.SignalingMessage = __webpack_require__(8);\n\trespoke.Group = __webpack_require__(9);\n\trespoke.SignalingChannel = __webpack_require__(10);\n\trespoke.DirectConnection = __webpack_require__(11);\n\trespoke.PeerConnection = __webpack_require__(12);\n\trespoke.CallState = __webpack_require__(13);\n\trespoke.Call = __webpack_require__(14);\n\trespoke.LocalMedia = __webpack_require__(15);\n\trespoke.RemoteMedia = __webpack_require__(16);\n\trespoke.log = log;\n\trespoke.Q = Q;\n\t\n\tif (!window.skipBugsnag) {\n\t    // Use airbrake.\n\t    var airbrake = document.createElement('script');\n\t    var first = document.getElementsByTagName('script')[0];\n\t    first.parentNode.insertBefore(airbrake, first);\n\t\n\t    airbrake.src = \"https://ssljscdn.airbrake.io/0.3/airbrake.min.js\";\n\t    airbrake.setAttribute('defer', 'defer');\n\t    airbrake.setAttribute('data-airbrake-project-id', '98133');\n\t    airbrake.setAttribute('data-airbrake-project-key', 'cd3e085acc5e554658ebcdabd112a6f4');\n\t    airbrake.setAttribute('data-airbrake-project-environment-name', 'production');\n\t\n\t    window.onerror = function (message, file, line) {\n\t        \"use strict\";\n\t        //Only send errors from the respoke.js file to Airbrake\n\t        if (file.match(/respoke/)) {\n\t            Airbrake.push({error: {message: message, fileName: file, lineNumber: line}});\n\t        }\n\t    };\n\t}\n\t\n\t/**\n\t * This is one of two possible entry points for interating with the library. \n\t * \n\t * This method creates a new Client object\n\t * which represents your user's connection to your Respoke app. \n\t * \n\t * This method **automatically calls client.connect(params)** after the client is created.\n\t * \n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to the respoke.Client constructor.\n\t * @param {string} [params.appId]\n\t * @param {string} [params.baseURL]\n\t * @param {string} [params.token]\n\t * @param {RTCConstraints} [params.constraints] - A set of default WebRTC call constraints if you wish to use\n\t * different parameters than the built-in defaults.\n\t * @param {RTCICEServers} [params.servers] - A set of default WebRTC ICE/STUN/TURN servers if you wish to use\n\t * different parameters than the built-in defaults.\n\t * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n\t * @param {function} [params.onError] - Error handler for this invocation of this method only.\n\t * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n\t * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n\t * direct connection.\n\t * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n\t * debugging information.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.connect = function (params) {\n\t    \"use strict\";\n\t    var client = respoke.Client(params);\n\t    client.connect(params);\n\t    return client;\n\t};\n\t\n\t/**\n\t * Getter for the respoke client.\n\t *\n\t * You can have more than one active client, so this method provides a way to retrieve a specific instance. \n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {number} id The Client ID.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.getClient = function (id) {\n\t    \"use strict\";\n\t    if (id === undefined) {\n\t        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n\t    }\n\t    if (!respoke.instances[id]) {\n\t        log.debug(\"No client instance with id\", id);\n\t    }\n\t    return respoke.instances[id];\n\t};\n\t\n\t/**\n\t * This is one of two possible entry points for interating with the library. \n\t * \n\t * This method creates a new Client object which represents your user's connection to your Respoke app.\n\t * \n\t * It **does NOT automatically call the client.connect() method** after the client is created. \n\t * \n\t * The `params` argument is the same as `respoke.connect(params)`.\n\t * \n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n\t * @returns {respoke.Client}\n\t */\n\trespoke.createClient = function (params) {\n\t    \"use strict\";\n\t    var client;\n\t    params = params || {};\n\t    if (params.instanceId) {\n\t        client = respoke.getClient(params.instanceId);\n\t        if (client) {\n\t            return client;\n\t        }\n\t    }\n\t    return respoke.Client(params);\n\t};\n\t\n\t/**\n\t * Build a closure from a listener that will ensure the listener can only be called once.\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @param {function} func\n\t * @return {function}\n\t */\n\trespoke.once = function (func) {\n\t    \"use strict\";\n\t    return (function () {\n\t        var called = false;\n\t        return function () {\n\t            if (called === false) {\n\t                func.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t    })();\n\t};\n\t\n\t/**\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @returns {number}\n\t */\n\trespoke.makeGUID = function () {\n\t    \"use strict\";\n\t    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\t    var uuid = new Array(36);\n\t    var rnd = 0;\n\t    var r;\n\t    for (var i = 0; i < 36; i += 1) {\n\t        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n\t            uuid[i] = '-';\n\t        } else if (i === 14) {\n\t            uuid[i] = '4';\n\t        } else {\n\t            if (rnd <= 0x02) {\n\t                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n\t            }\n\t            r = rnd & 0xf;\n\t            rnd = rnd >> 4;\n\t            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n\t        }\n\t    }\n\t    return uuid.join('');\n\t};\n\t\n\t/**\n\t * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n\t * It's not recommended that this method be used by developers and apps.\n\t * @private\n\t * @static\n\t * @memberof respoke\n\t * @param {Promise} promise\n\t * @param {function} onSuccess\n\t * @param {function} onError\n\t * @returns {Promise|undefined}\n\t */\n\trespoke.handlePromise = function (promise, onSuccess, onError) {\n\t    \"use strict\";\n\t    var returnUndef = false;\n\t    if (onSuccess || onError) {\n\t        returnUndef = true;\n\t    }\n\t\n\t    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n\t    onError = typeof onError === 'function' ? onError : function () {};\n\t    promise.done(onSuccess, onError);\n\t    return (returnUndef ? undefined : promise);\n\t};\n\t\n\t/**\n\t * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.  Copy all\n\t * params that were passed in onto the base object. Add the class name.\n\t * @class respoke.Class\n\t * @classdesc Empty base class.\n\t * @constructor\n\t * @private\n\t */\n\trespoke.Class = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = params.that || {};\n\t    var client = params.client;\n\t\n\t    that.className = 'respoke.Class';\n\t    delete params.that;\n\t    delete that.client;\n\t\n\t    Object.keys(params).forEach(function copyParam(name) {\n\t        that[name] = params[name];\n\t    });\n\t\n\t    return that;\n\t}; // end of respoke.Class\n\t\n\t/**\n\t * Does the browser support `UserMedia`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasUserMedia = function () {\n\t    \"use strict\";\n\t    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser support `RTCPeerConnection`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasRTCPeerConnection = function () {\n\t    \"use strict\";\n\t    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n\t            window.mozRTCPeerConnection) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser support `WebSocket`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasWebsocket = function () {\n\t    \"use strict\";\n\t    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCSessionDescription}\n\t * @returns {boolean}\n\t */\n\trespoke.sdpHasAudio = function (sdp) {\n\t    \"use strict\";\n\t    return sdp.indexOf('m=audio') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCSessionDescription}\n\t * @returns {boolean}\n\t */\n\trespoke.sdpHasVideo = function (sdp) {\n\t    \"use strict\";\n\t    return sdp.indexOf('m=video') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate a data channel?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCSessionDescription}\n\t * @returns {boolean}\n\t */\n\trespoke.sdpHasDataChannel = function (sdp) {\n\t    \"use strict\";\n\t    return sdp.indexOf('m=application') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {MediaConstraints}\n\t * @returns {boolean}\n\t */\n\trespoke.constraintsHasAudio = function (constraints) {\n\t    \"use strict\";\n\t    return (constraints.audio === true);\n\t};\n\t\n\t/**\n\t * Does the constraints indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {MediaConstraints}\n\t * @returns {boolean}\n\t */\n\trespoke.constraintsHasVideo = function (constraints) {\n\t    \"use strict\";\n\t    return (constraints.video === true || typeof constraints.video === 'object');\n\t};\n\t\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\tvar respoke = __webpack_require__(1);\n\tvar log = __webpack_require__(19);\n\t\n\t/**\n\t * A generic class for emitting and listening to events.\n\t * \n\t * @class respoke.EventEmitter\n\t * @inherits respoke.Class\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @returns {respoke.EventEmitter}\n\t */\n\tvar EventEmitter = module.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respoke.Class(params);\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.EventEmitter\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.EventEmitter';\n\t\n\t    /**\n\t     * @memberof! respoke.EventEmitter\n\t     * @name eventList\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var eventList = {};\n\t\n\t    /**\n\t     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n\t     * event in the case that the same\n\t     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n\t     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n\t     * count when we are trying to determine if an event has listeners placed by the developer.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - A developer-specified string identifying the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n\t     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n\t     * not be used by developers who are using the library, only by developers who are working on the library itself.\n\t     */\n\t    that.once = function (eventType, listener, isInternal) {\n\t        listener = respoke.once(listener);\n\t        listener.once = true;\n\t        that.listen(eventType, listener, isInternal);\n\t    };\n\t\n\t    /**\n\t     * Add a listener to an object.  This method adds the given listener to the given event in the case that the same\n\t     * listener is not already registered to this even and the listener is a function.  The third argument 'isInternal'\n\t     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n\t     * count when we are trying to determine if an event has listeners placed by the developer.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - A developer-specified string identifying the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n\t     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n\t     * not be used by developers who are using the library, only by developers who are working on the library itself.\n\t     */\n\t    that.listen = function (eventType, listener, isInternal) {\n\t        if (listener === undefined) {\n\t            return;\n\t        }\n\t\n\t        eventList[eventType] = eventList[eventType] || [];\n\t        listener.isInternal = !!isInternal; // boolify\n\t\n\t        if (typeof listener === 'function' && eventList[eventType].map(function eachListener(a) {\n\t            return a.toString();\n\t        }).indexOf(listener.toString()) === -1) {\n\t            eventList[eventType].push(listener);\n\t        } else if (eventList[eventType].indexOf(listener) !== -1) {\n\t            log.warn(\"not adding duplicate listener.\");\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n\t     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n\t     * removed from the specified eventType.  If a listener is also specified, only that listener\n\t     * will be removed.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.ignore\n\t     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n\t     * @param {function} [listener] - An optional function to remove from the specified event.\n\t     */\n\t    that.ignore = function (eventType, listener) {\n\t        // Remove all events from this object\n\t        if (eventType === undefined) {\n\t            eventList = {};\n\t            return;\n\t        }\n\t\n\t        // Remove all listeners from this event.\n\t        if (listener === undefined || !eventList[eventType]) {\n\t            eventList[eventType] = [];\n\t            return;\n\t        }\n\t\n\t        // Remove only one listener from this event.\n\t        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n\t            if (listener === eventList[eventType][i]) {\n\t                eventList[eventType].splice(i, 1);\n\t                return;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Trigger an event on an object. All listeners for the specified eventType will be called.\n\t     * Listeners will be bound to the object ('this' will refer to the object), and additional\n\t     * arguments to fire() will be passed into each listener.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.fire\n\t     * @param {string} eventType - A developer-specified string identifying the event to fire.\n\t     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n\t     * the listener\n\t     */\n\t    that.fire = function (eventType, evt) {\n\t        var args = null;\n\t        var count = 0;\n\t\n\t        evt = evt || {};\n\t        evt.name = eventType;\n\t        evt.target = that;\n\t\n\t        if (!eventType) {\n\t            return;\n\t        }\n\t\n\t        if (!eventList[eventType]) {\n\t            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n\t            return;\n\t        }\n\t\n\t        for (var i = eventList[eventType].length; i > -1; i -= 1) {\n\t            var listener = eventList[eventType][i];\n\t            if (typeof listener === 'function') {\n\t                setTimeout(listenerBuilder(listener, evt, eventType));\n\t\n\t                count += 1;\n\t                if (listener.once) {\n\t                    eventList[eventType].splice(i, 1);\n\t                }\n\t            }\n\t        }\n\t        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n\t    };\n\t\n\t    function listenerBuilder(listener, evt, eventType) {\n\t        return function () {\n\t            try {\n\t                listener.call(that, evt);\n\t            } catch (e) {\n\t                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n\t            }\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Determine if an object has had any listeners registered for a given event outside the library. This method\n\t     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n\t     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n\t     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n\t     * {respoke.Client#call}, we'll need to reject the call immediately.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.hasListeners\n\t     * @param {string} eventType - The name of the event\n\t     * @returns {boolean} Whether this event has any listeners that are external to this library.\n\t     */\n\t    that.hasListeners = function (eventType) {\n\t        if (eventType === undefined) {\n\t            throw new Error(\"Missing required parameter event type.\");\n\t        }\n\t\n\t        if (!eventList[eventType]) {\n\t            return false;\n\t        }\n\t\n\t        return !eventList[eventType].every(function eachListener(listener) {\n\t            return listener.isInternal;\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.EventEmitter\n\t/**\n\t * @callback respoke.EventEmitter.eventListener\n\t * @param {respoke.Event} evt\n\t */\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\tvar log = __webpack_require__(19);\n\tvar Q = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n\t * a `respoke.Client` instance.\n\t * \n\t * There are two ways to get a client:\n\t * \n\t *      var client = respoke.createClient(clientParams);\n\t *      // . . . set stuff up, then . . .\n\t *      client.connect(connectParams);\n\t *\n\t * or\n\t *\n\t *      // creates client and connects to Respoke all at once\n\t *      var client = respoke.connect(allParams);\n\t *\n\t * A client does the following things:\n\t *\n\t * 1. authentication with the Respoke API\n\t * 1. receives server-side app-specific information\n\t * 1. tracks connections and presence\n\t * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n\t * 1. stores default settings for calls and direct connections\n\t * 1. automatically reconnects to the API when network activity is lost*\n\t *\n\t * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n\t * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n\t * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n\t *\n\t * @class respoke.Client\n\t * @constructor\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t * respoke.connect, respoke.createClient, or to client.connect.\n\t * @param {string} [params.token] - The endpoint's authentication token.\n\t * @param {RTCConstraints} [params.constraints] - A set of default WebRTC call constraints if you wish to use\n\t * different parameters than the built-in defaults.\n\t * @param {RTCICEServers} [params.servers] - A set of default WebRTC ICE/STUN/TURN servers if you wish to use\n\t * different parameters than the built-in defaults.\n\t * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t * endpoint. This is only used when `developmentMode` is set to `true`.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n\t * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n\t * from anywhere on the system.\n\t * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n\t * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n\t * receives a request for a direct connection.\n\t * @returns {respoke.Client}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId || respoke.makeGUID();\n\t    params.instanceId = instanceId;\n\t    var that = respoke.Presentable(params);\n\t    respoke.instances[instanceId] = that;\n\t    delete that.instanceId;\n\t    that.connectTries = 0;\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.Client\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Client';\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name host\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    var host = window.location.hostname;\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name port\n\t     * @type {number}\n\t     * @private\n\t     */\n\t    var port = window.location.port;\n\t    /**\n\t     * A simple POJO to store some methods we will want to override but reference later.\n\t     * @memberof! respoke.Client\n\t     * @name superClass\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var superClass = {\n\t        setPresence: that.setPresence\n\t    };\n\t    /**\n\t     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n\t     * @memberof! respoke.Client\n\t     * @name clientSettings\n\t     * @type {object}\n\t     * @private\n\t     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n\t     * @property {string} [token] - The endpoint's authentication token.\n\t     * @property {string} [appId] - The id of your Respoke app.\n\t     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @property {boolean} [reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @property {onJoin} [onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @property {onLeave} [onLeave] - Callback for when this client's endpoint leaves a group.\n\t     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n\t     * from anywhere on the system.\n\t     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n\t     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n\t     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n\t     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n\t     * receives a request for a direct connection.\n\t     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n\t     * information to the API? Defaults to `true`.\n\t     */\n\t    var clientSettings = {\n\t        baseURL: params.baseURL,\n\t        token: params.token,\n\t        appId: params.appId,\n\t        developmentMode: typeof params.developmentMode === 'boolean' ? params.developmentMode : false,\n\t        reconnect: typeof params.developmentMode === 'boolean' ? params.developmentMode : true,\n\t        endpointId: params.endpointId,\n\t        onJoin: params.onJoin,\n\t        onLeave: params.onLeave,\n\t        onMessage: params.onMessage,\n\t        onConnect: params.onConnect,\n\t        onDisconnect: params.onDisconnect,\n\t        onReconnect: params.onReconnect,\n\t        onCall: params.onCall,\n\t        onDirectConnection: params.onDirectConnection,\n\t        resolveEndpointPresence: params.resolveEndpointPresence,\n\t        enableCallDebugReport: typeof params.enableCallDebugReport === 'boolean' ? params.enableCallDebugReport : true\n\t    };\n\t    delete that.appId;\n\t    delete that.baseURL;\n\t    delete that.developmentMode;\n\t    delete that.token;\n\t    delete that.resolveEndpointPresence;\n\t\n\t    /**\n\t     * Internal list of known groups.\n\t     * @memberof! respoke.Client\n\t     * @name groups\n\t     * @type {Array<respoke.Group>}\n\t     * @private\n\t     */\n\t    var groups = [];\n\t    /**\n\t     * Internal list of known endpoints.\n\t     * @memberof! respoke.Client\n\t     * @name endpoints\n\t     * @type {Array<respoke.Endpoint>}\n\t     * @private\n\t     */\n\t    var endpoints = [];\n\t    /**\n\t     * Array of calls in progress, made accessible for informational purposes only.\n\t     * **Never modify this array directly.**\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @name calls\n\t     * @type {array}\n\t     */\n\t    that.calls = [];\n\t    log.debug(\"Client ID is \", instanceId);\n\t\n\t    /**\n\t     * Default call settings:\n\t     *\n\t     *      constraints: {\n\t     *          video : true,\n\t     *          audio : true,\n\t     *          optional: [],\n\t     *          mandatory: {}\n\t     *      },\n\t     *      servers: {\n\t     *          iceServers: []\n\t     *      }\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @name callSettings\n\t     * @type {object}\n\t     */\n\t    that.callSettings = {\n\t        constraints: params.constraints || {\n\t            video : true,\n\t            audio : true,\n\t            optional: [],\n\t            mandatory: {}\n\t        },\n\t        servers: params.servers || {\n\t            iceServers: []\n\t        }\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = respoke.SignalingChannel({\n\t        instanceId: instanceId,\n\t        clientSettings: clientSettings\n\t    });\n\t\n\t    /**\n\t     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n\t     *\n\t     * After `\"connect\"`, the app auth session token is stored so it can be used in API requests.\n\t     *\n\t     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n\t     *\n\t     * #### Usage\n\t     *\n\t     *      client.connect({\n\t     *          appId: \"XXXX-XXX-XX-XXXX\",\n\t     *          token: \"XXXX-XXX-XX-XXXX\", // if not developmentMode\n\t     *          developmentMode: false || true\n\t     *          // if developmentMode, otherwise your server will set endpointId\n\t     *          endpointId: \"billy\"\n\t     *      });\n\t     *      client.listen(\"connect\", function () { } );\n\t     *\n\t     *\n\t     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n\t     * automatically. You must set an `endpointId`.\n\t     *\n\t     *\n\t     * #### App auth session token expiration\n\t     *\n\t     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n\t     * will attempt to keep reconnecting each time the app auth session expires.\n\t     *\n\t     * If not using `developmentMode`, disable automatic reconnect by sending `reconnect: false`.\n\t     * Then listen to the Client's disconnect event to fetch a new brokered auth token and call\n\t     * `client.connect()` with the new token.\n\t     *\n\t     *      client.listen('disconnect', function () {\n\t     *\n\t     *          // example method you implemented to get a new token from your server\n\t     *          myServer.getNewRespokeAccessToken(function (newToken) {\n\t     *              // reconnect with respoke.Client\n\t     *              client.connect({ token: newToken });\n\t     *          });\n\t     *\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.connect\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {RTCConstraints} [params.constraints] - A set of default WebRTC call constraints if you wish to use\n\t     * different parameters than the built-in defaults.\n\t     * @param {RTCICEServers} [params.servers] - A set of default WebRTC ICE/STUN/TURN servers if you wish to use\n\t     * different parameters than the built-in defaults.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @returns {Promise|undefined}\n\t     * @fires respoke.Client#connect\n\t     */\n\t    that.connect = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t        log.debug('Client.connect');\n\t        that.connectTries += 1;\n\t\n\t        Object.keys(params).forEach(function eachParam(key) {\n\t            if (['onSuccess', 'onError'].indexOf(key) === -1 && params[key] !== undefined) {\n\t                clientSettings[key] = params[key];\n\t            }\n\t        });\n\t        that.endpointId = clientSettings.endpointId;\n\t        promise = actuallyConnect(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        promise.then(function successHandler() {\n\t            /**\n\t             * This event is fired the first time the library connects to the cloud infrastructure.\n\t             * @event respoke.Client#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('connect');\n\t\n\t            /**\n\t             * This event fires only when the initial `connect` fails.\n\t             *\n\t             * @ignore **This comment is for documentation purposes**, since #error bubbles\n\t             * up from other classes, but it should show on `respoke.Client` docs.\n\t             *\n\t             * @event respoke.Client#error\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n\t     *\n\t     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.actuallyConnect\n\t     * @private\n\t     * @param {object} params\n\t     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    function actuallyConnect(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!clientSettings.token &&\n\t                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n\t            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n\t                \"to client.connect().\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        signalingChannel.open({\n\t            actuallyConnect: actuallyConnect,\n\t            endpointId: that.endpointId,\n\t            token: clientSettings.token\n\t        }).then(function successHandler() {\n\t            return signalingChannel.authenticate();\n\t        }).done(function successHandler() {\n\t            // set initial presence for the connection\n\t            if (clientSettings.presence) {\n\t                that.setPresence({presence: clientSettings.presence});\n\t            }\n\t\n\t            /*\n\t             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n\t             * not to be duplicated on reconnect.\n\t             */\n\t\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, `evt.call.answer()`.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('call', clientSettings.onCall);\n\t            /**\n\t             * This event is fired when the local end of the directConnection is available. It still will not be\n\t             * ready to send and receive messages until the 'open' event fires.\n\t             * @event respoke.Client#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {respoke.DirectConnection} directConnection\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.listen('direct-connection', clientSettings.onDirectConnection);\n\t            that.listen('join', clientSettings.onJoin);\n\t            /**\n\t             * This event is fired every time the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.listen('leave', clientSettings.onLeave);\n\t            /**\n\t             * A generic message handler when a message was received by the client.\n\t             *\n\t             * @event respoke.Client#message\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n\t             * @property {respoke.Group} group - If the message was to a group, this is the group.\n\t             * @property {respoke.TextMessage} message - The generic message object.\n\t             * @property {string} message.connectionId\n\t             * @property {string} message.endpointId\n\t             * @property {string} message.message - Message body text.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('message', clientSettings.onMessage);\n\t            that.listen('connect', clientSettings.onConnect);\n\t            /**\n\t             * Client has disconnected from Respoke.\n\t             *\n\t             * @event respoke.Client#disconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('disconnect', clientSettings.onDisconnect);\n\t            /**\n\t             * Client has reconnected to Respoke.\n\t             *\n\t             * @event respoke.Client#reconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('reconnect', clientSettings.onReconnect);\n\t\n\t            log.info('logged in as ' + that.endpointId, that);\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(\"Couldn't create an endpoint.\");\n\t            log.error(err.message, err.stack);\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.disconnect\n\t     * @returns {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#disconnect\n\t     */\n\t    that.disconnect = function (params) {\n\t        // TODO: also call this on socket disconnect\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\t\n\t        var leaveGroups = groups.map(function eachGroup(group) {\n\t            group.leave();\n\t        });\n\t\n\t        Q.all(leaveGroups).fin(function successHandler() {\n\t            return signalingChannel.close();\n\t        }).fin(function finallyHandler() {\n\t            that.presence = 'unavailable';\n\t            endpoints = [];\n\t            groups = [];\n\t            /**\n\t             * This event is fired when the library has disconnected from the cloud infrastructure.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('disconnect');\n\t            deferred.resolve();\n\t        }).done();\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Set the presence for this client.\n\t     *\n\t     * The value of presence can be a string, number, object, or array - in any format -\n\t     * depending on the needs of your application. The only requirement is that\n\t     * `JSON.stringify()` must work (no circular references).\n\t     *\n\t     *      var myPresence = 'At lunch'\n\t     *                      || 4\n\t     *                      || { status: 'Away', message: 'At lunch' }\n\t     *                      || ['Away', 'At lunch'];\n\t     *\n\t     *      client.setPresence({\n\t     *          presence: myPresence, \n\t     *          onSuccess: function (evt) {\n\t     *              // successfully updated my presence\n\t     *          }\n\t     *      });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|array} params.presence\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @overrides Presentable.setPresence\n\t     * @return {Promise|undefined}\n\t     */\n\t    that.setPresence = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        log.info('sending my presence update ' + params.presence);\n\t\n\t        promise = signalingChannel.sendPresence({\n\t            presence: params.presence\n\t        });\n\t\n\t        promise.then(function successHandler(p) {\n\t            superClass.setPresence(params);\n\t            clientSettings.presence = params.presence;\n\t        });\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Get the Call with the endpoint specified.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getCall\n\t     * @param {object} params\n\t     * @param {string} [params.id] - Call ID.\n\t     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n\t     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n\t     * pass in the call ID, too.\n\t     * @param {boolean} params.create - whether or not to create a new call if the specified endpointId isn't found\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.getCall = function (params) {\n\t        var call = null;\n\t        var endpoint = null;\n\t\n\t        that.calls.every(function findCall(one) {\n\t            if (params.id && one.id === params.id) {\n\t                call = one;\n\t                return false;\n\t            }\n\t\n\t            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n\t                call = one;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (call === null && params.create === true) {\n\t            if (params.fromType === 'did') {\n\t                try {\n\t                    call = that.startPhoneCall({\n\t                        id: params.id,\n\t                        number: params.endpointId, //phone number\n\t                        caller: false,\n\t                        fromType: 'web',\n\t                        toType: 'did'\n\t                    });\n\t                } catch (e) {\n\t                    log.error(\"Couldn't create Call.\", e.message, e.stack);\n\t                }\n\t            } else {\n\t                endpoint = that.getEndpoint({id: params.endpointId});\n\t                try {\n\t                    call = endpoint.startCall({\n\t                        id: params.id,\n\t                        caller: false\n\t                    });\n\t                } catch (e) {\n\t                    log.error(\"Couldn't create Call.\", e.message, e.stack);\n\t                }\n\t            }\n\t        }\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Add the call to internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.call\n\t     * @param {respoke.Endpoint} evt.endpoint\n\t     * @private\n\t     */\n\t    function addCall(evt) {\n\t        log.debug('addCall');\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't add call without a call parameter.\");\n\t        }\n\t        if (that.calls.indexOf(evt.call) === -1) {\n\t            that.calls.push(evt.call);\n\t        }\n\t\n\t        evt.call.listen('hangup', function () {\n\t            removeCall({call: evt.call});\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Remove the call or direct connection from internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.removeCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.target\n\t     * @private\n\t     */\n\t    function removeCall(evt) {\n\t        var match = 0;\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't remove call without a call parameter.\");\n\t        }\n\t\n\t        // Loop backward since we're modifying the array in place.\n\t        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n\t            if (that.calls[i].id === evt.call.id) {\n\t                that.calls.splice(i, 1);\n\t                match += 1;\n\t            }\n\t        }\n\t\n\t        if (match !== 1) {\n\t            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Convenience method for setting presence to `\"available\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOnline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     * @private\n\t     */\n\t    that.setOnline = function (params) {\n\t        var promise;\n\t\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        return that.setPresence(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to an endpoint.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The endpoint id of the recipient.\n\t     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n\t     * broadcast to all connections for this endpoint.\n\t     * @param {string} params.message - a string message.\n\t     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var endpoint;\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\t        endpoint = that.getEndpoint({id: params.endpointId});\n\t        delete params.endpointId;\n\t        return endpoint.sendMessage(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio and/or video call to an endpoint.\n\t     * \n\t     *     // defaults to video when no constraints are supplied\n\t     *     client.startCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     * \n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {RTCServers} [params.servers]\n\t     * @param {RTCConstraints} [params.constraints]\n\t     * @param {string} [params.connectionId]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var endpoint;\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\t\n\t        endpoint = that.getEndpoint({id: params.endpointId});\n\t        delete params.endpointId;\n\t        return endpoint.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio call with a phone number.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startPhoneCall\n\t     * @param {object} params\n\t     * @param {string} params.number - The phone number that should be called.\n\t     * @param {RTCServers} [params.servers]\n\t     * @param {RTCConstraints} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     * @private\n\t     */\n\t    that.startPhoneCall = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var call = null;\n\t        var recipient = {};\n\t        var combinedCallSettings = JSON.parse(JSON.stringify(that.callSettings)); //clone\n\t        params = params || {};\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\t\n\t        if (params.caller === undefined) {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!params.number) {\n\t            log.error(\"Can't start a phone call without a number.\");\n\t            promise = Q.reject(new Error(\"Can't start a phone call without a number.\"));\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\t\n\t        recipient.id = params.number;\n\t\n\t        // Apply call-specific callSettings to the app's defaults\n\t        combinedCallSettings.constraints = params.constraints || combinedCallSettings.constraints;\n\t        combinedCallSettings.servers = params.servers || combinedCallSettings.servers;\n\t        // Audio only phone calls allowed\n\t        combinedCallSettings.constraints.audio = true;\n\t        combinedCallSettings.constraints.video = false;\n\t        log.debug('Final callSettings is', combinedCallSettings);\n\t\n\t        params.callSettings = combinedCallSettings;\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\t        \n\t        params.toType = params.toType || 'did';\n\t        params.fromType = params.fromType || 'web';\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send candidate.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Assert that we are connected to the backend infrastructure.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.verifyConnected\n\t     * @throws {Error}\n\t     * @private\n\t     */\n\t    that.verifyConnected = function () {\n\t        if (!signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Check whether this client is connected to the Respoke API.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.isConnected\n\t     * @returns boolean\n\t     */\n\t    that.isConnected = function () {\n\t        return signalingChannel.isConnected();\n\t    };\n\t\n\t    /**\n\t     * Join a group and begin keeping track of it.\n\t     * \n\t     * You can leave the group by calling `group.leave()`;\n\t     * \n\t     * ##### Joining and leaving a group\n\t     * \n\t     *      var group;\n\t     * \n\t     *      client.join({ \n\t     *          id: \"book-club\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I joined', evt.group.id);\n\t     *              // \"I joined book-club\"\n\t     *              group = evt.group;\n\t     *              group.sendMessage({\n\t     *                  message: 'sup'\n\t     *              });\n\t     *          }\n\t     *      });\n\t     * \n\t     *      // . . .\n\t     *      // Some time later, leave the group.\n\t     *      // . . .\n\t     *      group.leave({\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I left', evt.group.id);\n\t     *              // \"I left book-club\"\n\t     *          }\n\t     *      });\n\t     * \n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.join\n\t     * @param {object} params\n\t     * @param {string} params.id - The name of the group.\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n\t     * this group only.\n\t     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\t\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.joinGroup({\n\t            id: params.id\n\t        }).done(function successHandler() {\n\t            var group;\n\t            params.signalingChannel = signalingChannel;\n\t            params.instanceId = instanceId;\n\t\n\t            group = that.getGroup({id: params.id});\n\t\n\t            if (!group) {\n\t                group = respoke.Group(params);\n\t                that.addGroup(group);\n\t            }\n\t\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t\n\t            group.addMember({\n\t                connection: that.getConnection({\n\t                    endpointId: that.endpointId,\n\t                    connectionId: that.connectionId\n\t                })\n\t            });\n\t\n\t            /**\n\t             * This event is fired every time the client joins a group. If the client leaves\n\t             * a group, this event will be fired again on the next time the client joins the group.\n\t             * @event respoke.Client#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('join', {\n\t                group: group\n\t            });\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addGroup\n\t     * @param {respoke.Group}\n\t     * @private\n\t     */\n\t    that.addGroup = function (newGroup) {\n\t        if (!newGroup || newGroup.className !== 'respoke.Group') {\n\t            throw new Error(\"Can't add group to internal tracking without a group.\");\n\t        }\n\t\n\t        newGroup.listen('leave', function leaveHandler(evt) {\n\t            newGroup.removeMember({connectionId: evt.connection.id});\n\t            checkEndpointForRemoval(evt.connection.getEndpoint());\n\t        }, true);\n\t\n\t        groups.push(newGroup);\n\t    };\n\t\n\t    /**\n\t     * Get a list of all the groups the client is currently a member of.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroups\n\t     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n\t     */\n\t    that.getGroups = function () {\n\t        return groups;\n\t    };\n\t\n\t    /**\n\t     * Find a group by id and return it.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroup\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n\t     * received to a group.\n\t     * @returns {respoke.Group|undefined} The group whose ID was specified.\n\t     */\n\t    that.getGroup = function (params) {\n\t        var group;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get a group without group id.\");\n\t        }\n\t\n\t        groups.every(function eachGroup(grp) {\n\t            if (grp.id === params.id) {\n\t                group = grp;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (group) {\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t        }\n\t\n\t        return group;\n\t    };\n\t\n\t    /**\n\t     * Remove an Endpoint. Since an endpoint can be a member of multiple groups, we can't just remove it from\n\t     * our list on respoke.Endpoint#leave. We must see if it's a member of any more groups. If it's not\n\t     * a member of any other groups, we can stop keeping track of it.\n\t     * @todo TODO Need to account for Endpoints not created as part of a group. These do not need to be\n\t     * deleted based on group membership.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.checkEndpointForRemoval\n\t     * @param {object} params\n\t     * @param {string} params.id - The ID of the Endpoint to check for removal.\n\t     * @private\n\t     */\n\t    function checkEndpointForRemoval(params) {\n\t        params = params || {};\n\t        if (!params.id) {\n\t            throw new Error(\"Can't remove endpoint from internal tracking without group id.\");\n\t        }\n\t\n\t        Q.all(groups.map(function eachGroup(group) {\n\t            return group.getMembers();\n\t        })).done(function successHandler(connectionsByGroup) {\n\t            // connectionsByGroup is a two-dimensional array where the first dimension is a group\n\t            // and the second dimension is a connection.\n\t            var absent = connectionsByGroup.every(function eachConnectionList(connectionList) {\n\t                return connectionList.every(function eachConnection(conn) {\n\t                    return (conn.endpointId !== params.id);\n\t                });\n\t            });\n\t            if (absent) {\n\t                endpoints.every(function eachEndpoint(ept, index) {\n\t                    if (ept.id === params.id) {\n\t                        endpoints.splice(index, 1);\n\t                        return false;\n\t                    }\n\t                    return true;\n\t                });\n\t            }\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Find an endpoint by id and return the `respoke.Endpoint` object.\n\t     *\n\t     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n\t     * its presence will be determined, and will be available in `client.getEndpoints()`.\n\t     *\n\t     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n\t     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n\t     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoint\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Endpoint.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Endpoint.\n\t     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n\t     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n\t     */\n\t    that.getEndpoint = function (params) {\n\t        var endpoint;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get an endpoint without endpoint id.\");\n\t        }\n\t\n\t        endpoints.every(function eachEndpoint(ept) {\n\t            if (ept.id === params.id) {\n\t                endpoint = ept;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (!endpoint && params && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            params.signalingChannel = signalingChannel;\n\t            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n\t            params.addCall = addCall;\n\t\n\t            endpoint = respoke.Endpoint(params);\n\t            signalingChannel.registerPresence({\n\t                endpointList: [endpoint.id]\n\t            }).done(null, function (err) {\n\t                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n\t            });\n\t            endpoints.push(endpoint);\n\t        }\n\t\n\t        if (endpoint) {\n\t            endpoint.listen('presence', params.onPresence);\n\t            endpoint.listen('message', params.onMessage);\n\t        }\n\t\n\t        return endpoint;\n\t    };\n\t\n\t    /**\n\t     * Find a Connection by id and return it.\n\t     *\n\t     * @ignore In most cases, if we don't find it we will create it. This is useful\n\t     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n\t     * to return undefined if the Connection is not already known.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getConnection\n\t     * @param {object} params\n\t     * @param {string} params.connectionId\n\t     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Connection.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Connection.\n\t     * @returns {respoke.Connection} The connection whose ID was specified.\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection;\n\t        var endpoint;\n\t        var endpointsToSearch = endpoints;\n\t\n\t        params = params || {};\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't get a connection without connection id.\");\n\t        }\n\t        if (!params.endpointId && !params.skipCreate) {\n\t            throw new Error(\"Can't create a connection without endpoint id.\");\n\t        }\n\t\n\t        if (params.endpointId) {\n\t            endpoint = that.getEndpoint({\n\t                id: params.endpointId,\n\t                skipCreate: params.skipCreate\n\t            });\n\t\n\t            endpointsToSearch = [];\n\t            if (endpoint) {\n\t                endpointsToSearch = [endpoint];\n\t            }\n\t        }\n\t\n\t        endpointsToSearch.every(function eachEndpoint(ept) {\n\t            connection = ept.getConnection(params);\n\t            return !connection;\n\t        });\n\t\n\t        if (!connection && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            connection = respoke.Connection(params);\n\t            endpoint.connections.push(connection);\n\t        }\n\t\n\t        return connection;\n\t    };\n\t\n\t    /**\n\t     * Get the list of **all endpoints** that the library has knowledge of.\n\t     * These are `respoke.Endpoint` objects, not just the endpointIds.\n\t     *\n\t     * The library gains knowledge of an endpoint in two ways:\n\t     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n\t     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n\t     *\n\t     * *If an endpoint that the library does not know about sends a message to the client, you\n\t     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n\t     * watching of the sender's endpoint.\n\t     *\n\t     *      client.on('message', function (data) {\n\t     *          if (data.endpoint) {\n\t     *              // start tracking this endpoint.\n\t     *              client.getEndpoint({ id: data.endpoint.id });\n\t     *          }\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoints\n\t     * @returns {Array<respoke.Endpoint>}\n\t     */\n\t    that.getEndpoints = function () {\n\t        return endpoints;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Client\n\t\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.Client.successHandler\n\t */\n\t/**\n\t * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n\t * @callback respoke.Client.joinHandler\n\t * @param {respoke.Group} group\n\t */\n\t/**\n\t * Receive notification that the client has joined a group. This callback is called everytime\n\t * respoke.Client#join is fired.\n\t * @callback respoke.Client.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client has left a group. This callback is called everytime\n\t * respoke.Client#leave is fired.\n\t * @callback respoke.Client.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that a message has been received. This callback is called every time\n\t * respoke.Client#message is fired.\n\t * @callback respoke.Client.onClientMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n\t * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t * group is undefined instead of null, the message is not a group message at all.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification that the client is receiving a call from a remote party. This callback is called every\n\t * time respoke.Client#call is fired.\n\t * @callback respoke.Client.onCall\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.call\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client is receiving a request for a direct connection from a remote party.\n\t * This callback is called every time respoke.Client#direct-connection is fired.\n\t * @callback respoke.Client.onDirectConnection\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.directConnection\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n\t * respoke.Client#connect is fired.\n\t * @callback respoke.Client.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n\t * respoke.Client#disconnect is fired.\n\t * @callback respoke.Client.onDisconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n\t * respoke.Client#reconnect is fired.\n\t * @callback respoke.Client.onReconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Handle disconnection to the cloud successfully.\n\t * @callback respoke.Client.disconnectSuccessHandler\n\t */\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Client.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle connection to the cloud successfully.\n\t * @callback respoke.Client.connectSuccessHandler\n\t */\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * The purpose of the class is to allow multiple types of entities to expose presence functionality.\n\t * \n\t * Setting the presence on a client is provided via `client.setPresence({ presence: \"At lunch\" })`.\n\t * \n\t * @class respoke.Presentable\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @param {string} params.id\n\t * @returns {respoke.Presentable}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Presentable\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Presentable\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Presentable';\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     * \n\t     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n\t     * \n\t     * @memberof! respoke.Presentable\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     * @private\n\t     */\n\t    that.presence = 'unavailable';\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * Set the presence on the object for this session.\n\t     * \n\t     * @memberof! respoke.Presentable\n\t     * @method respoke.Presentable.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} params.connectionId\n\t     * @fires respoke.Presentable#presence\n\t     * @private\n\t     */\n\t    that.setPresence = function (params) {\n\t        var connection;\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t        params.connectionId = params.connectionId || that.connectionId;\n\t\n\t        if (that.className === 'respoke.Client' || that.className === 'respoke.Connection') {\n\t            that.presence = params.presence;\n\t            if (that.className === 'respoke.Connection') {\n\t                that.getEndpoint().resolvePresence();\n\t            }\n\t        } else if (that.className === 'respoke.Endpoint') {\n\t            if (!params.connectionId) {\n\t                throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n\t            }\n\t\n\t            connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n\t                connectionId: params.connectionId,\n\t                skipCreate: false,\n\t                endpointId: that.id\n\t            });\n\t\n\t            connection.presence = params.presence;\n\t            that.resolvePresence();\n\t        }\n\t\n\t        /**\n\t         * This event indicates that the presence for this endpoint has been updated.\n\t         * @event respoke.Presentable#presence\n\t         * @type {respoke.Event}\n\t         * @property {string|number|object|Array} presence\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Presentable} target\n\t         */\n\t        that.fire('presence', {\n\t            presence: that.presence\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Get the presence of a Presentable instance.\n\t     * \n\t     *      var billy = client.getEndpoint({ id: \"billychia\" });\n\t     *      var pres = billy.getPresence();\n\t     *      console.log('Billy is', pres); // \"Billy is available\"\n\t     * \n\t     * @memberof! respoke.Presentable\n\t     * @method respoke.Presentable.getPresence\n\t     * @returns {string|number|object|array} the current presence of this endpoint.\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Presentable\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A `respoke.Connection` always belongs to an Endpoint.\n\t * \n\t * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated \n\t * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection. \n\t * A Client can choose to interact with connections of the same endpoint in different ways.\n\t * \n\t * @constructor\n\t * @class respoke.Connection\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @returns {respoke.Connection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Connection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.Presentable(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * The connection id.\n\t     * @memberof! respoke.Connection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.id || that.connectionId;\n\t    if (!that.id) {\n\t        throw new Error(\"Can't make a connection without an id.\");\n\t    }\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Connection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Connection';\n\t\n\t    /**\n\t     * Send a message to this connection of an endpoint. If the endpoint has mutliple connections, \n\t     * it will only receive the message at this connection.\n\t     * \n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().sendMessage(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n\t     * by another connection of this Endpoint.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {RTCServers} [params.servers]\n\t     * @param {RTCConstraints} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new audio-only call.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startAudioCall\n\t     * @param {object} params\n\t     * @param {RTCServers} [params.servers]\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        params.constraints = {\n\t            video : false,\n\t            audio : true,\n\t            optional: [],\n\t            mandatory: {}\n\t        };\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call with audio and video.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startVideoCall\n\t     * @param {object} params\n\t     * @param {RTCServers} [params.servers]\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n\t     * been hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n\t     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n\t     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n\t     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @param {RTCServers} [params.servers] - Additional ICE/STUN/TURN servers to use in connecting.\n\t     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startDirectConnection(params);\n\t    };\n\t\n\t    /**\n\t     * Get the Endpoint that this Connection belongs to.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.getEndpoint\n\t     * @returns {respoke.Endpoint}\n\t     */\n\t    that.getEndpoint = function () {\n\t        return client.getEndpoint({id: that.endpointId});\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Connection\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar log = __webpack_require__(19);\n\tvar Q = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * `respoke.Endpoint`s are users of a Respoke app.\n\t * \n\t * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n\t * \n\t * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n\t * \n\t * An Endpoint may be authenticated from multiple devices to the same app (each of\n\t * which is represented by a Connection).\n\t * \n\t * \n\t * @constructor\n\t * @class respoke.Endpoint\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @param {string} params.instanceId\n\t * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence for an endpoint.\n\t * @returns {respoke.Endpoint}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Endpoint\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.Presentable(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t\n\t    var clone = function (source) {\n\t        return JSON.parse(JSON.stringify(source));\n\t    };\n\t\n\t    var addCall = params.addCall;\n\t\n\t    delete that.signalingChannel;\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t    delete that.addCall;\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Endpoint\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Endpoint';\n\t    /**\n\t     * A direct connection to this endpoint. This can be used to send direct messages.\n\t     * @memberof! respoke.Endpoint\n\t     * @name directConnection\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    that.directConnection = null;\n\t\n\t    /**\n\t     * Array of connections for this endpoint.\n\t     * @memberof! respoke.Endpoint\n\t     * @name connections\n\t     * @type {Array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        that.connections = [];\n\t    });\n\t\n\t\n\t    var resolveEndpointPresence = params.resolveEndpointPresence;\n\t    delete that.resolveEndpointPresence;\n\t\n\t\n\t    /**\n\t     * Send a message to the endpoint through the infrastructure.\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {string} [params.connectionId]\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n\t     * only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t\n\t        promise = signalingChannel.sendMessage({\n\t            connectionId: params.connectionId,\n\t            message: params.message,\n\t            recipient: that\n\t        });\n\t\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Create a new audio-only call.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startAudioCall\n\t     * @param {object} params\n\t     * @param {RTCServers} [params.servers]\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        params = params || {};\n\t        params.constraints = {\n\t            video : false,\n\t            audio : true,\n\t            optional: [],\n\t            mandatory: {}\n\t        };\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call with audio and video.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startVideoCall\n\t     * @param {object} params\n\t     * @param {RTCServers} [params.servers]\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        params = params || {};\n\t        params.constraints = {\n\t            video : true,\n\t            audio : true,\n\t            optional: [],\n\t            mandatory: {}\n\t        };\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {RTCServers} [params.servers]\n\t     * @param {RTCConstraints} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        var call = null;\n\t        var combinedCallSettings = clone(client.callSettings);\n\t        params = params || {};\n\t\n\t        log.debug('Endpoint.call');\n\t        client.verifyConnected();\n\t        log.debug('Default callSettings is', combinedCallSettings);\n\t        if (params.caller === undefined) {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!that.id) {\n\t            log.error(\"Can't start a call without endpoint ID!\");\n\t            return;\n\t        }\n\t\n\t        // Apply call-specific callSettings to the app's defaults\n\t        combinedCallSettings.constraints = params.constraints || combinedCallSettings.constraints;\n\t        combinedCallSettings.servers = params.servers || combinedCallSettings.servers;\n\t        log.debug('Final callSettings is', combinedCallSettings);\n\t\n\t        params.callSettings = combinedCallSettings;\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = that;\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendSDP(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.call.connectionId;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n\t                log.warn(\"Couldn't send candidate.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams).done(null, function errorHandler(err) {\n\t                log.warn(\"Couldn't debug report.\", err.message, err.stack);\n\t            });\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n\t     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n\t     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n\t     * a direct connection open, this method will resolve the promise with that direct connection instead of\n\t     * attempting to create a new one.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {RTCServers} [params.servers] - Additional ICE/STUN/TURN servers to use in connecting.\n\t     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n\t     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n\t     * in from multiple locations.\n\t     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        params = params || {};\n\t        var combinedConnectionSettings = clone(client.callSettings);\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        var call;\n\t\n\t        try {\n\t            client.verifyConnected();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        if (that.directConnection || params.create === false) {\n\t            deferred.resolve(that.directConnection);\n\t            return retVal;\n\t        }\n\t\n\t        log.debug('Endpoint.startDirectConnection', params);\n\t        if (params.caller === undefined) {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!that.id) {\n\t            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n\t            return retVal;\n\t        }\n\t\n\t        // Apply connection-specific connectionSettings to the app's defaults\n\t        combinedConnectionSettings.constraints = params.constraints || combinedConnectionSettings.constraints;\n\t        combinedConnectionSettings.servers = params.servers || combinedConnectionSettings.servers;\n\t\n\t        params.callSettings = combinedConnectionSettings;\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalParams.signalType = 'answer';\n\t            signalingChannel.sendSDP(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send candidate.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            signalParams.report.target = 'directConnection';\n\t            log.debug(\"Not sending report\");\n\t            log.debug(signalParams.report);\n\t        };\n\t        params.needDirectConnection = true;\n\t        // Don't include audio in the offer SDP\n\t        params.offerOptions = {\n\t            mandatory: {\n\t                OfferToReceiveAudio: false\n\t            }\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        call.listen('direct-connection', function directConnectionHandler(evt) {\n\t            that.directConnection = evt.directConnection;\n\t            if (params.caller !== true) {\n\t                if (!client.hasListeners('direct-connection') &&\n\t                        !client.hasListeners('direct-connection') &&\n\t                        !call.hasListeners('direct-connection')) {\n\t                    that.directConnection.reject();\n\t                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n\t                    return;\n\t                }\n\t\n\t                deferred.resolve(that.directConnection);\n\t                that.directConnection.listen('close', function closeHandler(evt) {\n\t                    that.directConnection = undefined;\n\t                }, true);\n\t            }\n\t        }, true);\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Find the presence out of all known connections with the highest priority (most availability)\n\t     * and set it as the endpoint's resolved presence.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.resolvePresence\n\t     * @private\n\t     */\n\t    that.resolvePresence = function () {\n\t\n\t        var presenceList = that.connections.map(function (connection) {\n\t            return connection.presence;\n\t        });\n\t\n\t        if (resolveEndpointPresence !== undefined) {\n\t            that.presence = resolveEndpointPresence(presenceList);\n\t        } else {\n\t            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n\t            var idList;\n\t\n\t            /*\n\t             * Sort the connections array by the priority of the value of the presence of that\n\t             * connectionId. This will cause the first element in the list to be the id of the\n\t             * session with the highest priority presence so we can access it by the 0 index.\n\t             * TODO: If we don't really care about the sorting and only about the highest priority\n\t             * we could use Array.prototype.every to improve this algorithm.\n\t             */\n\t            idList = that.connections.sort(function sorter(a, b) {\n\t                var indexA = options.indexOf(a.presence);\n\t                var indexB = options.indexOf(b.presence);\n\t                // Move it to the end of the list if it isn't one of our accepted presence values\n\t                indexA = indexA === -1 ? 1000 : indexA;\n\t                indexB = indexB === -1 ? 1000 : indexB;\n\t                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n\t            });\n\t\n\t            if (idList[0]) {\n\t                that.presence = idList[0].presence;\n\t            } else {\n\t                that.presence = 'unavailable';\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.getConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId]\n\t     * @return {respoke.Connection}\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection = null;\n\t        params = params || {};\n\t        if (that.connections.length === 1 &&\n\t                (!params.connectionId || that.connections[0] === params.connectionId)) {\n\t            return that.connections[0];\n\t        }\n\t\n\t        if (!params || !params.connectionId) {\n\t            throw new Error(\"Can't find a connection without the connectionId.\");\n\t        }\n\t\n\t        that.connections.every(function eachConnection(conn) {\n\t            if (conn.id === params.connectionId) {\n\t                connection = conn;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        return connection;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Endpoint\n\t/**\n\t * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message - the message\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t/**\n\t * Handle presence notifications from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onPresence\n\t * @param {respoke.Event} evt\n\t * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t /**\n\t * Handle resolving presence for this endpoint\n\t * @callback respoke.Client.resolveEndpointPresence\n\t * @param {Array<object>} connectionPresence\n\t * @returns {object|string|number}\n\t */\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\t/**\n\t * A text message and the information needed to route it.\n\t * @class respoke.TextMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n\t * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n\t * @param {string} [params.message] - If sending, a message to send\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.TextMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.TextMessage\n\t     * @method respoke.TextMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that.endpointId = params.rawMessage.header.from;\n\t                that.connectionId = params.rawMessage.header.fromConnection;\n\t                that.timestamp = params.rawMessage.header.timestamp;\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.rawMessage.message || params.rawMessage.body;\n\t            if (params.rawMessage.header.channel) {\n\t                that.recipient = params.rawMessage.header.channel;\n\t            }\n\t        } else {\n\t            try {\n\t                that.to = params.endpointId;\n\t                that.toConnection = params.connectionId;\n\t                that.requestConnectionReply = (params.requestConnectionReply === true);\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.message;\n\t        }\n\t    }\n\t\n\t    parse();\n\t    return that;\n\t}; // End respoke.TextMessage\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\t/**\n\t * A signaling message and the information needed to route it.\n\t * @class respoke.SignalingMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n\t * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n\t * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n\t * @param {string} [params.signal] - If sending, a message to send\n\t * @param {respoke.Endpoint} [params.recipient]\n\t * @param {string} [params.signalType]\n\t * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n\t * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n\t * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n\t * @param {RTCSessionDescription} [params.sdp]\n\t * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n\t * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {string} [params.reason] - Human readable reason for hanging up.\n\t * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n\t * state. Not implemented.\n\t * @param {string} [params.status] - \"Ringing\". Not implemented.\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.SignalingMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t    /**\n\t     * Attributes without which we cannot build a signaling message.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n\t    /**\n\t     * Attributes which we will copy onto the signal if defined.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var allowed = [\n\t        'signalType', 'sessionId', 'callerId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId',\n\t        'requesting', 'reason', 'error', 'status', 'connectionId', 'version'\n\t    ];\n\t\n\t    params.version = '1.0';\n\t\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @method respoke.SignalingMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that = JSON.parse(params.rawMessage.body); // Incoming message\n\t            } catch (e) {\n\t                that = params.rawMessage.body;\n\t            }\n\t            that.fromType = params.rawMessage.header.fromType;\n\t            that.fromEndpoint = params.rawMessage.header.from;\n\t            that.fromConnection = params.rawMessage.header.fromConnection;\n\t            that.timestamp = params.rawMessage.header.timestamp;\n\t\n\t            if (!that.target) {\n\t                that.target = 'call';\n\t            }\n\t        } else {\n\t            required.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || !params[attr]) {\n\t                    throw new Error(\"Can't build a signaling without \" + attr);\n\t                }\n\t            });\n\t\n\t            allowed.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || params[attr]) {\n\t                    that[attr] = params[attr];\n\t                }\n\t            });\n\t        }\n\t    }\n\t\n\t    parse();\n\t    return that;\n\t}; // End respoke.SignalingMessage\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar Q = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A `respoke.Group` represents a collection of endpoints.\n\t *\n\t * There are methods to communicate with the endpoints at the group level and track\n\t * their presence in the group.\n\t *\n\t * @class respoke.Group\n\t * @augments respoke.EventEmitter\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n\t * endpoint has joined the group. This callback does not get called when the client joins the group.\n\t * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n\t * remote endpoints.\n\t * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n\t * endpoint has left the group. This callback does not get called when the client leaves the group.\n\t * @returns {respoke.Group}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.Group\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    if (!that.id) {\n\t        throw new Error(\"Can't create a group without an ID.\");\n\t    }\n\t\n\t    /**\n\t     * Internal reference to the api signaling channel.\n\t     * @memberof! respoke.Group\n\t     * @name signalingChannel\n\t     * @type respoke.SignalingChannel\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t    delete params.signalingChannel;\n\t\n\t    /**\n\t     * The connections to members of this group.\n\t     * @memberof! respoke.Group\n\t     * @name endpoints\n\t     * @type {array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Group\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Group';\n\t    that.listen('join', params.onJoin);\n\t    /**\n\t     * Indicates that a message has been sent to this group.\n\t     *\n\t     * @event respoke.Group#message\n\t     * @type {respoke.Event}\n\t     * @property {respoke.TextMessage} message\n\t     * @property {string} name - The event name.\n\t     * @property {respoke.Group} target\n\t     */\n\t    that.listen('message', params.onMessage);\n\t    that.listen('leave', params.onLeave);\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        that.connections = [];\n\t    });\n\t\n\t    delete that.instanceId;\n\t    delete that.onMessage;\n\t    delete that.onPresence;\n\t    delete that.onJoin;\n\t    delete that.onLeave;\n\t\n\t    /**\n\t     * Join this group.\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.join\n\t     * @return {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function () {\n\t        var params = {\n\t            id: that.id\n\t        };\n\t        var promise;\n\t        var deferred;\n\t        var retVal;\n\t\n\t        try {\n\t            validateConnection();\n\t        } catch (err) {\n\t            deferred = Q.defer();\n\t            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        promise = client.join(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Leave this group.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.leave\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @return {Promise|undefined}\n\t     * @fires respoke.Client#leave\n\t     */\n\t    that.leave = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.leaveGroup({\n\t            id: that.id\n\t        }).done(function successHandler() {\n\t            /**\n\t             * This event is fired when the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             * @private\n\t             */\n\t            client.fire('leave', {\n\t                group: that\n\t            });\n\t            that.connections = [];\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject();\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @private\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.removeMember\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId] - Endpoint's connection id\n\t     * @fires respoke.Group#leave\n\t     */\n\t    that.removeMember = function (params) {\n\t        params = params || {};\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            return;\n\t        }\n\t\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n\t        }\n\t\n\t        that.connections.every(function eachConnection(conn, index) {\n\t            if (conn.id === params.connectionId) {\n\t                that.connections.splice(index, 1);\n\t\n\t                /**\n\t                 * This event is fired when a member leaves a group the client is a member of.\n\t                 * @event respoke.Group#leave\n\t                 * @type {respoke.Event}\n\t                 * @property {respoke.Connection} connection - The connection that left the group.\n\t                 * @property {string} name - The event name.\n\t                 * @property {respoke.Group} target\n\t                 */\n\t                that.fire('leave', {\n\t                    connection: conn\n\t                });\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Return true if the logged-in user is a member of this group and false if not.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.isJoined\n\t     * @returns {boolean}\n\t     */\n\t    that.isJoined = function () {\n\t        // connections array contains some connections and ours is among them.\n\t        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n\t            return conn.id !== client.connectionId;\n\t        }));\n\t    };\n\t\n\t    /**\n\t     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @memberof! respoke.Group\n\t     * @private\n\t     * @method respoke.Group.addMember\n\t     * @param {object} params\n\t     * @param {respoke.Connection} params.connection\n\t     * @fires respoke.Group#join\n\t     */\n\t    that.addMember = function (params) {\n\t        params = params || {};\n\t        var absent;\n\t\n\t        validateConnection();\n\t\n\t        if (!params.connection) {\n\t            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n\t        }\n\t\n\t        absent = that.connections.every(function eachConnection(conn) {\n\t            return (conn.id !== params.connection.id);\n\t        });\n\t\n\t        if (absent) {\n\t            that.connections.push(params.connection);\n\t            if (params.skipEvent) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n\t             * of.\n\t             * @event respoke.Group#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Connection} connection - The connection that joined the group.\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            that.fire('join', {\n\t                connection: params.connection\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Validate that the client is connected to the Respoke infrastructure.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateConnection\n\t     * @private\n\t     */\n\t    function validateConnection() {\n\t        if (!signalingChannel || !signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Validate that the client is a member of this group.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateMembership\n\t     * @private\n\t     */\n\t    function validateMembership() {\n\t        if (!that.isJoined()) {\n\t            throw new Error(\"Not a member of this group anymore.\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     *\n\t     * Send a message to all of the endpoints in the group.\n\t     *\n\t     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n\t     *\n\t     *      group.sendMessage({\n\t     *          message: \"Cat on keyboard\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('Message was sent');\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message - The message.\n\t     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n\t     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n\t     * @returns {Promise}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.id = that.id;\n\t        var promise;\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            promise = Q.reject(err);\n\t        }\n\t\n\t        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n\t                params.onSuccess, params.onError);\n\t    };\n\t\n\t    /**\n\t     * Get group members\n\t     *\n\t     * Get an array containing the members of the group. Accepts `onSuccess` or `onError` parameters,\n\t     * or a promise.\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.getMembers\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n\t     * @returns {Promise<Array>} A promise to an array of Connections.\n\t     */\n\t    that.getMembers = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.getGroupMembers({\n\t            id: that.id\n\t        }).done(function successHandler(list) {\n\t            var endpointList = [];\n\t            list.forEach(function eachMember(params) {\n\t                var connection = client.getConnection({\n\t                    endpointId: params.endpointId,\n\t                    connectionId: params.connectionId,\n\t                    skipCreate: true\n\t                });\n\t\n\t                if (!connection) {\n\t                    // Create the connection\n\t                    connection = client.getConnection({\n\t                        endpointId: params.endpointId,\n\t                        connectionId: params.connectionId\n\t                    });\n\t                }\n\t\n\t                if (endpointList.indexOf(params.endpointId) === -1) {\n\t                    endpointList.push(params.endpointId);\n\t                }\n\t                that.addMember({\n\t                    connection: connection,\n\t                    skipEvent: true\n\t                });\n\t            });\n\t\n\t            deferred.resolve(that.connections);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Group\n\t/**\n\t * Receive notification that an endpoint has joined this group. This callback is called everytime\n\t * respoke.Group#join is fired.\n\t * @callback respoke.Group.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that an endpoint has left this group. This callback is called everytime\n\t * respoke.Group#leave is fired.\n\t * @callback respoke.Group.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that a message has been received to a group. This callback is called every time\n\t * respoke.Group#message is fired.\n\t * @callback respoke.Group.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Get a list of the Connections which are members of this Group.\n\t * @callback respoke.Group.connectionsHandler\n\t * @param {Array<respoke.Connection>} connections\n\t */\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar log = __webpack_require__(19);\n\tvar Q = __webpack_require__(18);\n\tvar io = __webpack_require__(20);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * Returns a timestamp, measured in milliseconds.\n\t *\n\t * This method will use high resolution time, if available. Otherwise it falls back to just\n\t * using the wall clock.\n\t *\n\t * @return {number} Number of milliseconds that have passed since some point in the past.\n\t * @private\n\t */\n\tvar now;\n\t\n\tif (performance && performance.now) {\n\t    now = performance.now.bind(performance);\n\t} else if (Date.now) {\n\t    now = Date.now.bind(Date);\n\t} else {\n\t    now = function () {\n\t        return new Date().getTime();\n\t    }\n\t}\n\t\n\t/**\n\t * Container for holding requests that are currently waiting on responses.\n\t * @returns {PendingRequests}\n\t * @private\n\t * @constructor\n\t */\n\tvar PendingRequests = function () {\n\t    /**\n\t     * Pending requests.\n\t     * @private\n\t     * @type {Array}\n\t     */\n\t    var contents = [];\n\t    /**\n\t     * Counter to provide the next id.\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var counter = 0;\n\t    var that = {};\n\t\n\t    /**\n\t     * Add a new pending request.\n\t     *\n\t     * @memberof PendingRequests\n\t     * @param obj\n\t     * @returns {*} The key to use for the `remove` method.\n\t     */\n\t    that.add = function (obj) {\n\t        contents[counter] = obj;\n\t        return counter++;\n\t    };\n\t\n\t    /**\n\t     * Remove a pending request.\n\t     *\n\t     * @param {*} key Key returned from `add` method.\n\t     */\n\t    that.remove = function (key) {\n\t        delete contents[key];\n\t    };\n\t\n\t    /**\n\t     * Disposes of any currently pending requests, synchronously invoking the provided function on\n\t     * each.\n\t     *\n\t     * @param {function} [fn] Callback for pending requests.\n\t     */\n\t    that.reset = function (fn) {\n\t        if (fn) {\n\t            contents.forEach(fn);\n\t        }\n\t        contents = [];\n\t    };\n\t\n\t    return that;\n\t};\n\t\n\t/**\n\t * The purpose of this class is to make a method call for each API call\n\t * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n\t * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n\t * @class respoke.SignalingChannel\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @private\n\t * @returns {respoke.SignalingChannel}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.SignalingChannel';\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name socket\n\t     * @private\n\t     * @type {Socket.io.Socket}\n\t     */\n\t    var socket = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name clientSettings\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var clientSettings = params.clientSettings;\n\t    delete that.clientSettings;\n\t    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n\t    /**\n\t     * Informational property for confirmation that call debugs are enabled or disabled.\n\t     * Helps to make call debugs more testable without putting clientSettings into modifiable scope.\n\t     * @private\n\t     * @name callDebugReportEnabled\n\t     * @type {boolean}\n\t     */\n\t    that.callDebugReportEnabled = clientSettings.enableCallDebugReport;\n\t    /**\n\t     * A map to avoid duplicate endpoint presence registrations.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name presenceRegistered\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var presenceRegistered = {};\n\t    /**\n\t     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n\t     * don't have to make it public.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name actuallyConnect\n\t     * @private\n\t     * @type {function}\n\t     */\n\t    var actuallyConnect = null;\n\t    /**\n\t     * Set of promises for any pending requests on the WebSocket.\n\t     * @private\n\t     * @type {PendingRequests}\n\t     */\n\t    var pendingRequests = PendingRequests();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name reconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var reconnectTimeout = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name maxReconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var maxReconnectTimeout = 5 * 60 * 1000;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name endpointId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var endpointId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name token\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var token = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appToken\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appToken = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name xhr\n\t     * @private\n\t     * @type {XMLHttpRequest}\n\t     */\n\t    var xhr = new XMLHttpRequest();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name routingMethods\n\t     * @private\n\t     * @type {object}\n\t     * @desc The methods contained in this object are statically defined methods that are called by constructing\n\t     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n\t     */\n\t    var routingMethods = {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name handlerQueue\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var handlerQueue = {\n\t        'message': [],\n\t        'signal': [],\n\t        'presence': []\n\t    };\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name errors\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var errors = {\n\t        // TODO convert this to strings\n\t        400: \"Can't perform this action: missing or invalid parameters.\",\n\t        401: \"Can't perform this action: not authenticated.\",\n\t        403: \"Can't perform this action: not authorized.\",\n\t        404: \"Item not found.\",\n\t        409: \"Can't perform this action: item in the wrong state.\",\n\t        500: \"Can't perform this action: server problem.\"\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the signaling channel has a valid connection to Respoke.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnected\n\t     * @return {boolean}\n\t     */\n\t    that.isConnected = function () {\n\t        return !!(socket && socket.socket.connected);\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnecting\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    function isConnecting() {\n\t        return !!(socket && socket.socket.connecting);\n\t    }\n\t\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.open\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.token] - The Endpoint's auth token\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise}\n\t     */\n\t    that.open = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.open', params, clientSettings);\n\t        token = params.token || token;\n\t        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\t\n\t        Q.fcall(function tokenPromise() {\n\t            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n\t                return that.getToken({\n\t                    appId: clientSettings.appId,\n\t                    endpointId: params.endpointId\n\t                });\n\t            }\n\t            return null;\n\t        }).then(function successHandler(newToken) {\n\t            token = newToken || token;\n\t            return doOpen({token: token});\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t            log.debug('client', client);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get a developer mode token for an endpoint. App must be in developer mode.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getToken\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise<String>}\n\t     */\n\t    that.getToken = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.getToken', params);\n\t\n\t        var callParams = {\n\t            path: '/v1/tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                appId: clientSettings.appId,\n\t                endpointId: params.endpointId,\n\t                ttl: 60 * 60 * 6\n\t            }\n\t        };\n\t\n\t        call(callParams).done(function (response) {\n\t            if (response.code === 200 && response.result && response.result.tokenId) {\n\t                token = response.result.tokenId;\n\t                deferred.resolve(response.result.tokenId);\n\t                return;\n\t            }\n\t            deferred.reject(new Error(\"Couldn't get a developer mode token.\"));\n\t        }, function (err) {\n\t            log.error(\"Network call failed:\", err.message);\n\t            deferred.reject(new Error(\"Couldn't get a developer mode token.\"));\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.doOpen\n\t     * @param {object} params\n\t     * @param {string} params.token - The Endpoint's auth token\n\t     * @return {Promise}\n\t     * @private\n\t     */\n\t    function doOpen(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.doOpen', params);\n\t\n\t        if (!params.token) {\n\t            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        call({\n\t            path: '/v1/session-tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                tokenId: params.token\n\t            }\n\t        }).done(function (response) {\n\t            if (response.code === 200) {\n\t                appToken = response.result.token;\n\t                deferred.resolve();\n\t                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n\t            } else {\n\t                deferred.reject(new Error(\"Couldn't authenticate app.\"));\n\t            }\n\t        }, function (err) {\n\t            log.error(\"Network call failed:\", err.message);\n\t            deferred.reject(new Error(\"Couldn't authenticate app.\"));\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Close a connection to the REST API. Invalidate the session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.close\n\t     * @private\n\t     * @param {object} params\n\t     * @return {Promise}\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        wsCall({\n\t            path: '/v1/connections/%s/',\n\t            httpMethod: 'DELETE',\n\t            objectId: client.endpointId\n\t        }).fin(function finallyHandler() {\n\t            return call({\n\t                path: '/v1/session-tokens',\n\t                httpMethod: 'DELETE'\n\t            });\n\t        }).fin(function finallyHandler() {\n\t            if (socket) {\n\t                socket.removeAllListeners();\n\t                socket.disconnect();\n\t            }\n\t            deferred.resolve();\n\t        }).done();\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Generate and send a presence message representing the client's current status. This triggers\n\t     * the server to send the client's endpoint's presence.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} [params.status] - Non-enumeration human-readable status.\n\t     * @param {string} [params.show] - I can't remember what this is.\n\t     * @returns {Promise}\n\t     */\n\t    that.sendPresence = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug(\"Signaling sendPresence\");\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/presence',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                'presence': {\n\t                    show: params.show,\n\t                    'status': params.status,\n\t                    type: params.presence || \"available\"\n\t                }\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get or create a group in the infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroup\n\t     * @private\n\t     * @returns {Promise<respoke.Group>}\n\t     * @param {object} params\n\t     * @param {string} name\n\t     */\n\t    that.getGroup = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('signalingChannel.getGroup');\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'POST',\n\t            path: '/v1/channels/',\n\t            parameters: {\n\t                name: params.name\n\t            }\n\t        }).then(function successHandler(group) {\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            // Group was already created, just return back the same params we were given.\n\t            deferred.resolve({id: params.name});\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Join a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.leaveGroup\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.leaveGroup = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/channels/%s/subscribers/',\n\t            objectId: params.id,\n\t            httpMethod: 'DELETE'\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Join a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.joinGroup\n\t     * @private\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.joinGroup = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/channels/%s/subscribers/',\n\t            objectId: params.id,\n\t            httpMethod: 'POST'\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Publish a message to a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.publish\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {string} params.message\n\t     */\n\t    that.publish = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.id,\n\t            message: params.message\n\t        });\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/channels/%s/publish/',\n\t            objectId: params.id,\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Register as an observer of presence for the specified endpoint ids.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.registerPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<string>} params.endpointList\n\t     */\n\t    that.registerPresence = function (params) {\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return wsCall({\n\t            httpMethod: 'POST',\n\t            path: '/v1/presenceobservers',\n\t            parameters: {\n\t                endpointList: params.endpointList\n\t            }\n\t        }).then(function successHandler() {\n\t            params.endpointList.forEach(function eachId(id) {\n\t                presenceRegistered[id] = true;\n\t            });\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Join a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroupMembers\n\t     * @private\n\t     * @returns {Promise<Array>}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.getGroupMembers = function (params) {\n\t        var deferred = Q.defer();\n\t        var promise;\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        promise = wsCall({\n\t            path: '/v1/channels/%s/subscribers/',\n\t            objectId: params.id,\n\t            httpMethod: 'GET'\n\t        });\n\t\n\t        promise.done(function successHandler(list) {\n\t            list.forEach(function eachSubscriber(params) {\n\t                presenceRegistered[params.endpointId] = true;\n\t            });\n\t        });\n\t        return promise;\n\t    };\n\t\n\t    /**\n\t     * Send a chat message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendMessage\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n\t     * @param {respoke.Endpoint} params.recipient\n\t     * @param {string} [params.connectionId]\n\t     * @returns {Promise}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.recipient.id,\n\t            connectionId: params.connectionId,\n\t            message: params.message\n\t        });\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/messages',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send an ACK signal to acknowlege reception of a signal.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendACK\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.signal\n\t     * @return {Promise}\n\t     */\n\t    that.sendACK = function (params) {\n\t        var endpoint;\n\t        params = params || {};\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (!params.signal) {\n\t            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n\t        }\n\t\n\t        endpoint = client.getEndpoint({id: params.signal.fromEndpoint});\n\t        if (!endpoint) {\n\t            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n\t        }\n\t\n\t        return that.sendSignal({\n\t            recipient: endpoint,\n\t            signalType: 'ack',\n\t            signalId: params.signal.signalId,\n\t            sessionId: params.signal.sessionId,\n\t            target: params.signal.target,\n\t            ackedSignalType: params.signal.signalType\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a signaling message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSignal\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSignal = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var signal;\n\t        var to;\n\t        var toConnection;\n\t        var toType;\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (params.call) {\n\t            params.sessionId = params.call.id;\n\t            if (params.call.connectionId) { // the recipient's connectionId\n\t                params.connectionId = params.call.connectionId;\n\t            }\n\t        }\n\t\n\t        to = params.recipient.id;\n\t        toConnection = params.connectionId;\n\t        toType = params.toType || 'web';\n\t\n\t        try {\n\t            params.signalId = respoke.makeGUID();\n\t            // This will strip off non-signaling attributes.\n\t            signal = respoke.SignalingMessage(params);\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/signaling',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                signal: JSON.stringify(signal),\n\t                to: to,\n\t                toConnection: toConnection,\n\t                toType: toType\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send an ICE candidate.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendCandidate\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n\t     * @return {Promise}\n\t     */\n\t    that.sendCandidate = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'iceCandidates';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send an SDP.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSDP\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSDP = function (params) {\n\t        params = params || {};\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n\t            return Q.reject(\"Not an SDP type signal.\");\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a call report to the cloud infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendReport\n\t     * @private\n\t     * @param {object} params\n\t     * @todo TODO document the params.\n\t     * @return {Promise}\n\t     */\n\t    that.sendReport = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = {\n\t            debugData: params\n\t        };\n\t\n\t        if (!clientSettings.enableCallDebugReport) {\n\t            log.debug('not sending call debugs - disabled');\n\t            deferred.resolve();\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/call-debugs',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function () {\n\t            deferred.resolve();\n\t        }, function (err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send a message hanging up the WebRTC session.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendHangup\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {string} params.reason - The reason the session is being hung up.\n\t     * @return {Promise}\n\t     */\n\t    that.sendHangup = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'bye';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendConnected\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @return {Promise}\n\t     */\n\t    that.sendConnected = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'connected';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to the remote party indicating a desire to renegotiate media.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendModify\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n\t     * @return {Promise}\n\t     */\n\t    that.sendModify = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'modify';\n\t\n\t        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n\t            return Q.reject(\"No valid action in modify signal.\");\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Uppercase the first letter of the word.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.firstUpper\n\t     * @private\n\t     */\n\t    function firstUpper(str) {\n\t        return str[0].toUpperCase() + str.slice(1);\n\t    }\n\t\n\t    /**\n\t     * Route different types of signaling messages via events.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routeSignal\n\t     * @private\n\t     * @param {respoke.SignalingMessage} message - A message to route\n\t     * @fires respoke.Call#offer\n\t     * @fires respoke.Call#connected\n\t     * @fires respoke.Call#answer\n\t     * @fires respoke.Call#iceCandidates\n\t     * @fires respoke.Call#hangup\n\t     * @fires respoke.DirectConnection#offer\n\t     * @fires respoke.DirectConnection#connected\n\t     * @fires respoke.DirectConnection#answer\n\t     * @fires respoke.DirectConnection#iceCandidates\n\t     * @fires respoke.DirectConnection#hangup\n\t     */\n\t    that.routeSignal = function (signal) {\n\t        var target = null;\n\t        var method = 'do';\n\t\n\t        if (signal.signalType !== 'iceCandidates') { // Too many of these!\n\t            log.debug(signal.signalType, signal);\n\t        }\n\t\n\t        if (signal.target === undefined) {\n\t            throw new Error(\"target undefined\");\n\t        }\n\t\n\t        // Only create if this signal is an offer.\n\t        Q.fcall(function makePromise() {\n\t            var endpoint;\n\t            /*\n\t             * This will return calls regardless of whether they are associated\n\t             * with a direct connection or not, and it will create a call if no\n\t             * call is found and this signal is an offer. Direct connections get\n\t             * created in the next step.\n\t             */\n\t            target = client.getCall({\n\t                id: signal.sessionId,\n\t                endpointId: signal.fromEndpoint,\n\t                fromType: signal.fromType,\n\t                create: (signal.target === 'call' && signal.signalType === 'offer')\n\t            });\n\t            if (target) {\n\t                return target;\n\t            }\n\t\n\t            if (signal.target === 'directConnection') {\n\t                // return a promise\n\t                endpoint = client.getEndpoint({\n\t                    id: signal.fromEndpoint\n\t                });\n\t\n\t                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n\t                    return endpoint.directConnection;\n\t                }\n\t\n\t                return endpoint.startDirectConnection({\n\t                    id: signal.sessionId,\n\t                    create: (signal.signalType === 'offer'),\n\t                    caller: (signal.signalType !== 'offer')\n\t                });\n\t            }\n\t        }).done(function successHandler(target) {\n\t            // target might be null, a Call, or a DirectConnection.\n\t            if (target) {\n\t                target = target.call || target;\n\t            }\n\t            if (!target || target.id !== signal.sessionId) {\n\t                // orphaned signal\n\t                log.warn(\"Couldn't associate signal with a call.\", signal);\n\t                return;\n\t            }\n\t\n\t            method += firstUpper(signal.signalType);\n\t            routingMethods[method]({\n\t                call: target,\n\t                signal: signal\n\t            });\n\t        }, null);\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doOffer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-offer\n\t     */\n\t    routingMethods.doOffer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * @event respoke.Call#signal-offer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-offer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doConnected\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-connected\n\t     */\n\t    routingMethods.doConnected = function (params) {\n\t        /**\n\t         * @event respoke.Call#signal-connected\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-connected', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.dModify\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-modify\n\t     */\n\t    routingMethods.doModify = function (params) {\n\t        /**\n\t         * @event respoke.Call#signal-modify\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-modify', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doAnswer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-answer\n\t     */\n\t    routingMethods.doAnswer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * @event respoke.Call#signal-answer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-answer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-icecandidates\n\t     */\n\t    routingMethods.doIceCandidates = function (params) {\n\t        /**\n\t         * @event respoke.Call#signal-icecandidates\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-icecandidates', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doBye\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-hangup\n\t     */\n\t    routingMethods.doBye = function (params) {\n\t        /**\n\t         *  We may receive hangup from one or more parties after connectionId is set if the call is rejected\n\t         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n\t         *  we are already on a call. TODO: this should really be inside PeerConnection.\n\t         */\n\t        if (params.call.connectionId && params.call.connectionId !== params.signal.fromConnection) {\n\t            return;\n\t        }\n\t        /**\n\t         * @event respoke.Call#signal-hangup\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-hangup', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doUnknown\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     */\n\t    routingMethods.doUnknown = function (params) {\n\t        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n\t    };\n\t\n\t    /**\n\t     * Add a handler to the connection for messages of different types.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.addHandler\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n\t     * @param {function} params.handler - A function to which to pass the message\n\t     * @todo TODO See if this is necessary anymore\n\t     */\n\t    that.addHandler = function (params) {\n\t        if (socket.socket && socket.socket.open) {\n\t            socket.on(params.type, params.handler);\n\t        } else {\n\t            handlerQueue[params.type].push(params.handler);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for pub-sub messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPubSub\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Group#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onPubSub = function onPubSub(message) {\n\t        var group;\n\t        var groupMessage;\n\t\n\t        if (message.header.from === client.endpointId) {\n\t            return;\n\t        }\n\t\n\t        groupMessage = respoke.TextMessage({\n\t            rawMessage: message\n\t        });\n\t\n\t        group = client.getGroup({id: message.header.channel});\n\t        if (group) {\n\t            /**\n\t             * @event respoke.Group#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            group.fire('message', {\n\t                message: groupMessage\n\t            });\n\t        }\n\t        /**\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n\t         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t         * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t         * group is undefined instead of null, the message is not a group message at all.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            message: groupMessage,\n\t            group: group || null\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Socket handler for join messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onJoin\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onJoin = function onJoin(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        var connection;\n\t\n\t        if (message.connectionId === client.connectionId) {\n\t            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n\t            group = client.getGroup({id: message.header.channel});\n\t            if (!group) {\n\t                group = respoke.Group({\n\t                    id: message.header.channel,\n\t                    instanceId: instanceId,\n\t                    signalingChannel: that\n\t                });\n\t                client.addGroup(group);\n\t            }\n\t            if (!group.isJoined()) {\n\t                group.addMember({connection: connection});\n\t                client.fire('join', {\n\t                    group: group\n\t                });\n\t            }\n\t        } else {\n\t\n\t            endpoint = client.getEndpoint({\n\t                id: message.endpointId,\n\t                instanceId: instanceId,\n\t                name: message.endpointId\n\t            });\n\t\n\t\n\t            // Handle presence not associated with a channel\n\t            if (message.header.channel.indexOf('system') > -1 || !connection) {\n\t                endpoint.setPresence({\n\t                    connectionId: message.connectionId\n\t                });\n\t                connection = client.getConnection({\n\t                    connectionId: message.connectionId,\n\t                    endpointId: message.endpointId\n\t                });\n\t                if (message.header.channel.indexOf('system') > -1) {\n\t                    log.error(\"Still getting these weird join presence messages.\", message);\n\t                    return;\n\t                }\n\t            }\n\t\n\t            group = client.getGroup({id: message.header.channel});\n\t\n\t            if (group && connection) {\n\t                group.addMember({connection: connection});\n\t            } else {\n\t                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for leave messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onLeave\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onLeave = function onLeave(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        if (message.connectionId === client.connectionId) {\n\t            group = client.getGroup({id: message.header.channel});\n\t            client.fire('leave', {\n\t                group: group\n\t            });\n\t        } else {\n\t\n\t            endpoint = client.getEndpoint({\n\t                id: message.endpointId\n\t            });\n\t\n\t            endpoint.connections.every(function eachConnection(conn, index) {\n\t                if (conn.id === message.connectionId) {\n\t                    endpoint.connections.splice(index, 1);\n\t                    return false;\n\t                }\n\t                return true;\n\t            });\n\t\n\t            group = client.getGroup({id: message.header.channel});\n\t            group.removeMember({connectionId: message.connectionId});\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onMessage\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Endpoint#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onMessage = function onMessage(message) {\n\t        var endpoint;\n\t        message = respoke.TextMessage({rawMessage: message});\n\t        if (message.endpointId) {\n\t            endpoint = client.getEndpoint({\n\t                id: message.endpointId,\n\t                skipCreate: true\n\t            });\n\t        }\n\t        if (endpoint) {\n\t            /**\n\t             * @event respoke.Endpoint#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Endpoint} target\n\t             */\n\t            endpoint.fire('message', {\n\t                message: message\n\t            });\n\t        }\n\t        /**\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n\t         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n\t         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            endpoint: endpoint || null,\n\t            message: message\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Create a socket handler for the onConnect event with all the right things in scope.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.generateConnectHandler\n\t     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @private\n\t     */\n\t    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n\t        onSuccess = onSuccess || function () {};\n\t        onError = onError || function () {};\n\t        return function onConnect() {\n\t            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n\t                if (!handlerQueue[category]) {\n\t                    return;\n\t                }\n\t\n\t                handlerQueue[category].forEach(function addEachHandler(handler) {\n\t                    socket.on(category, handler);\n\t                });\n\t                handlerQueue[category] = [];\n\t            });\n\t\n\t            wsCall({\n\t                path: '/v1/connections',\n\t                httpMethod: 'POST'\n\t            }).done(function successHandler(res) {\n\t                log.debug('connections result', res);\n\t                client.endpointId = res.endpointId;\n\t                client.connectionId = res.id;\n\t                onSuccess();\n\t            }, onError);\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPresence\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    function onPresence(message) {\n\t        var endpoint;\n\t        var groups;\n\t\n\t        if (message.header.from === client.endpointId) {\n\t            // Skip ourselves\n\t            return;\n\t        }\n\t        log.debug('socket.on presence', message);\n\t\n\t        endpoint = client.getEndpoint({\n\t            id: message.header.from,\n\t            instanceId: instanceId,\n\t            name: message.header.from,\n\t            connection: message.header.fromConnection\n\t        });\n\t\n\t        endpoint.setPresence({\n\t            connectionId: message.header.fromConnection,\n\t            presence: message.type\n\t        });\n\t\n\t        if (endpoint.getPresence() === 'unavailable') {\n\t            var groups = client.getGroups();\n\t            if (groups) {\n\t                groups.forEach(function eachGroup(group) {\n\t                    group.removeMember({connectionId: message.header.fromConnection});\n\t                });\n\t            }\n\t        }\n\t    }\n\t\n\t    /*\n\t     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n\t     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.reconnect\n\t     * @private\n\t     */\n\t    function reconnect() {\n\t        appToken = undefined;\n\t        token = undefined;\n\t        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\t\n\t        if (reconnectTimeout > (maxReconnectTimeout)) {\n\t            reconnectTimeout = maxReconnectTimeout;\n\t        }\n\t\n\t        setTimeout(function doReconnect() {\n\t            actuallyConnect().then(function successHandler() {\n\t                reconnectTimeout = null;\n\t                log.debug('socket reconnected');\n\t                return Q.all(client.getGroups().map(function iterGroups(group) {\n\t                    client.join({\n\t                        id: group.id,\n\t                        onMessage: clientSettings.onMessage,\n\t                        onJoin: clientSettings.onJoin,\n\t                        onLeave: clientSettings.onLeave\n\t                    });\n\t                }));\n\t            }).done(function successHandler(user) {\n\t                /**\n\t                 * @event respoke.Client#reconnect\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.Client}\n\t                 */\n\t                client.fire('reconnect');\n\t            }, function (err) {\n\t                log.error(\"Couldn't rejoin previous groups.\", err.message, err.stack);\n\t                reconnect();\n\t            });\n\t        }, reconnectTimeout);\n\t    }\n\t\n\t    /**\n\t     * Authenticate to the cloud and call the handler on state change.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.authenticate\n\t     * @private\n\t     * @param {object} params\n\t     * @return {Promise}\n\t     */\n\t    that.authenticate = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var pieces = [];\n\t        var protocol = null;\n\t        var host = null;\n\t        var port = null;\n\t\n\t        if (!appToken) {\n\t            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n\t        }\n\t\n\t        pieces = clientSettings.baseURL.split(/:\\/\\//);\n\t        protocol = pieces[0];\n\t        pieces = pieces[1].split(/:/);\n\t        host = pieces[0];\n\t        port = pieces[1];\n\t\n\t        /*\n\t         * Try to connect for 2 seconds before failing.\n\t         * @private\n\t         */\n\t        var connectParams = {\n\t            'connect timeout': 2000,\n\t            'force new connection': true, // Don't try to reuse old connection.\n\t            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n\t            reconnect: false,\n\t            host: host,\n\t            port: port || '443',\n\t            protocol: protocol,\n\t            secure: (protocol === 'https'),\n\t            query: 'app-token=' + appToken\n\t        };\n\t\n\t        if (that.isConnected() || isConnecting()) {\n\t            return;\n\t        }\n\t        socket = io.connect(clientSettings.baseURL + '?app-token=' + appToken, connectParams);\n\t\n\t        socket.on('connect', generateConnectHandler(function onSuccess() {\n\t            deferred.resolve();\n\t        }, function onError(err) {\n\t            deferred.reject(err);\n\t        }));\n\t\n\t        socket.on('join', onJoin);\n\t        socket.on('leave', onLeave);\n\t        socket.on('pubsub', onPubSub);\n\t        socket.on('message', onMessage);\n\t        socket.on('presence', onPresence);\n\t\n\t        // connection timeout\n\t        socket.on('connect_failed', function connectFailedHandler(res) {\n\t            deferred.reject(new Error(\"WebSocket connection failed.\"));\n\t            log.error('Socket.io connect timeout.', res || \"\");\n\t            reconnect();\n\t        });\n\t\n\t        // handshake error, 403\n\t        socket.on('error', function errorHandler(res) {\n\t            log.debug('Socket.io request failed.', res || \"\");\n\t            reconnect();\n\t        });\n\t\n\t        that.addHandler({\n\t            type: 'signal',\n\t            handler: function signalHandler(message) {\n\t                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n\t                var signal = respoke.SignalingMessage({\n\t                    rawMessage: message\n\t                });\n\t\n\t                if (signal.signalType === 'ack') {\n\t                    return;\n\t                }\n\t\n\t                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n\t                    log.error(\"Got malformed signal.\", signal);\n\t                    throw new Error(\"Can't route signal without target or type.\");\n\t                }\n\t\n\t                that.routeSignal(signal);\n\t            }\n\t        });\n\t\n\t        socket.on('disconnect', function onDisconnect() {\n\t            pendingRequests.reset(function (pendingRequest) {\n\t                log.debug('Failing pending requests');\n\t                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n\t            });\n\t\n\t            /**\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('disconnect');\n\t\n\t            if (clientSettings.reconnect !== true) {\n\t                socket = null;\n\t                return;\n\t            }\n\t            reconnect();\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n\t     * sent or received, prior to creating a PeerConnection\n\t     *\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.getTurnCredentials\n\t     * @return {Promise<Array>}\n\t     */\n\t    that.getTurnCredentials = function () {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'GET',\n\t            path: '/v1/turn'\n\t        }).done(function successHandler(creds) {\n\t            var result = [];\n\t\n\t            if (!creds || !creds.uris) {\n\t                deferred.reject(new Error(\"Turn credentials empty.\"));\n\t                return;\n\t            }\n\t\n\t            creds.uris.forEach(function saveTurnUri(uri) {\n\t                var cred = null;\n\t\n\t                if (!uri) {\n\t                    return;\n\t                }\n\t\n\t                cred = createIceServer(uri, creds.username, creds.password);\n\t                result.push(cred);\n\t            });\n\t\n\t            if (result.length === 0) {\n\t                deferred.reject(new Error(\"Got no TURN credentials.\"));\n\t            }\n\t\n\t            log.debug('TURN creds', result);\n\t            deferred.resolve(result);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Construct a websocket API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.wsCall\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.path\n\t     * @param {string} params.objectId\n\t     * @param {object} params.parameters\n\t     * @return {Promise<object>}\n\t     */\n\t    function wsCall(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var start = now();\n\t        // Too many of these!\n\t        var logRequest = params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1;\n\t        var pendingRequestsKey;\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\t\n\t        if (params.objectId) {\n\t            params.path = params.path.replace(/\\%s/ig, params.objectId);\n\t        }\n\t\n\t        if (logRequest) {\n\t            log.debug('socket request', {\n\t                method: params.httpMethod,\n\t                path: params.path,\n\t                parameters: params.parameters\n\t            });\n\t        }\n\t\n\t        pendingRequestsKey = pendingRequests.add(deferred);\n\t        socket.emit(params.httpMethod, JSON.stringify({\n\t            url: params.path,\n\t            data: params.parameters,\n\t            headers: {'App-Token': appToken}\n\t        }), function handleResponse(response) {\n\t            var durationMillis = now() - start;\n\t            pendingRequests.remove(pendingRequestsKey);\n\t\n\t            try {\n\t                response = JSON.parse(response);\n\t            } catch (e) {\n\t                deferred.reject(new Error(\"Server response could not be parsed!\"));\n\t                return;\n\t            }\n\t\n\t            if (logRequest) {\n\t                log.debug('socket response', {\n\t                    method: params.httpMethod,\n\t                    path: params.path,\n\t                    durationMillis: durationMillis,\n\t                    response: response\n\t                });\n\t            }\n\t\n\t            if (response && response.error) {\n\t                deferred.reject(new Error(response.error + '(' + params.httpMethod + ' ' + params.path + ')'));\n\t            } else {\n\t                deferred.resolve(response);\n\t            }\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Construct an API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.call\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.objectId\n\t     * @param {string} params.path\n\t     * @param {object} params.parameters\n\t     * @returns {Promise}\n\t     */\n\t    function call(params) {\n\t        /* Params go in the URI for GET, DELETE, same format for\n\t         * POST and PUT, but they must be sent separately after the\n\t         * request is opened. */\n\t        var deferred = Q.defer();\n\t        var paramString = null;\n\t        var uri = null;\n\t        var response = {\n\t            'result': null,\n\t            'code': null\n\t        };\n\t        var start = now();\n\t\n\t        uri = clientSettings.baseURL + params.path;\n\t\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return;\n\t        }\n\t\n\t        if (!params.httpMethod) {\n\t            deferred.reject(new Error('No HTTP method.'));\n\t            return;\n\t        }\n\t\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return;\n\t        }\n\t\n\t        if (params.objectId) {\n\t            params.path = params.path.replace(/\\%s/ig, params.objectId);\n\t        }\n\t\n\t        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n\t            uri += makeParamString(params.parameters);\n\t        }\n\t\n\t        xhr.open(params.httpMethod, uri);\n\t        if (appToken) {\n\t            xhr.setRequestHeader(\"App-Token\", appToken);\n\t        }\n\t        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n\t            paramString = JSON.stringify(params.parameters);\n\t            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n\t            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n\t            return;\n\t        }\n\t        log.debug('request', {\n\t            method: params.httpMethod,\n\t            uri: uri,\n\t            params: paramString\n\t        });\n\t\n\t        try {\n\t            xhr.send(paramString);\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return;\n\t        }\n\t\n\t        xhr.onreadystatechange = function () {\n\t            var durationMillis = now() - start;\n\t            if (this.readyState !== 4) {\n\t                return;\n\t            }\n\t            if (this.status === 0) {\n\t                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n\t                return;\n\t            }\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n\t                response.code = this.status;\n\t                response.uri = uri;\n\t                response.params = params.parameters;\n\t                if (this.response) {\n\t                    try {\n\t                        response.result = JSON.parse(this.response);\n\t                    } catch (e) {\n\t                        response.result = this.response;\n\t                        response.error = \"Invalid JSON.\";\n\t                    }\n\t                }\n\t                log.debug('response', {\n\t                    method: params.httpMethod,\n\t                    durationMillis: durationMillis,\n\t                    response: response });\n\t                deferred.resolve(response);\n\t            } else {\n\t                deferred.reject(new Error('unexpected response ' + this.status));\n\t                return;\n\t            }\n\t        };\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n\t     * var1=value1&var2=value2,value3,value4\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.makeParamString\n\t     * @private\n\t     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n\t     * @returns {string}\n\t     */\n\t    function makeParamString(params) {\n\t        var strings = [];\n\t        if (!params) {\n\t            return '';\n\t        }\n\t\n\t        Object.keys(params).forEach(function formatParam(name) {\n\t            var value = params[name];\n\t            /* Skip objects -- We won't know how to name these. */\n\t            if (value instanceof Array) {\n\t                strings.push([name, value.join(',')].join('='));\n\t            } else if (typeof value !== 'object' && typeof value !== 'function') {\n\t                strings.push([name, value].join('='));\n\t            }\n\t        });\n\t\n\t        if (strings.length > 0) {\n\t            return '?' + strings.join('&');\n\t        } else {\n\t            return '';\n\t        }\n\t    }\n\t\n\t    return that;\n\t}; // End respoke.SignalingChannel\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.SignalingChannel.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.SignalingChannel.sendHandler\n\t */\n\t/**\n\t * Receive a group.\n\t * @callback respoke.SignalingChannel.groupHandler\n\t * @param {respoke.Group}\n\t */\n\t/**\n\t * Receive a list of groups.\n\t * @callback respoke.SignalingChannel.groupListHandler\n\t * @param {Array}\n\t */\n\t/**\n\t * Receive a list of TURN credentials.\n\t * @callback respoke.SignalingChannel.turnSuccessHandler\n\t * @param {Array}\n\t */\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar log = __webpack_require__(19);\n\tvar Q = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A direct connection via RTCDataChannel, including state and path negotation.\n\t * @class respoke.DirectConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {string} params\n\t * @param {string} params.instanceId - client id\n\t * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n\t * begins. The direct connection will not be open yet.\n\t * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n\t * direct connection setup or media renegotiation.\n\t * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n\t * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n\t * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n\t * for a direct connection and setup is about to begin.\n\t * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n\t * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n\t * @returns {respoke.DirectConnection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.DirectConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.DirectConnection';\n\t    /**\n\t     * The unique identifier of the direct connection.\n\t     * \n\t     * @memberof! respoke.DirectConnection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name call\n\t     * @type {respoke.Call}\n\t     */\n\t    if (!that.call.caller) {\n\t        that.call.caller = false;\n\t    }\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name dataChannel\n\t     * @type {RTCDataChannel}\n\t     * @private\n\t     */\n\t    var dataChannel = null;\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name pc\n\t     * @type {RTCPeerConnection}\n\t     * @private\n\t     */\n\t    var pc = params.pc;\n\t    delete params.pc;\n\t\n\t    /**\n\t     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n\t     * only fires for the callee.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.listenDataChannel\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function listenDataChannel(evt) {\n\t        dataChannel = evt.channel;\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        if (dataChannel.readyState === 'open') {\n\t            dataChannel.onopen = null;\n\t            onDataChannelOpen();\n\t        } else {\n\t            dataChannel.onopen = onDataChannelOpen;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Register any event listeners passed in as callbacks\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n\t     * is closed.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n\t     * is open.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n\t     * is being set up. The direct connection will not be open yet.\n\t     * @param {array} [params.servers] - Additional resources for determining network connectivity between two\n\t     * endpoints.\n\t     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t     * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('open', params.onOpen);\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('close', params.onClose);\n\t        /**\n\t         * Incoming message on this direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('message', params.onMessage);\n\t        // documented elsewhere\n\t        that.listen('start', params.onStart);\n\t        /**\n\t         * An error occurred while setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {string} reason - A human-readable description of the error.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('error', params.onError);\n\t        pc.listen('direct-connection', listenDataChannel, true);\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about the direct connection\n\t             * becomes available.\n\t             * @event respoke.DirectConnection#stats\n\t             * @type {respoke.Event}\n\t             * @property {object} stats - an object with stats in it.\n\t             * @property {respoke.DirectConnection} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\t\n\t    }\n\t    saveParameters(params);\n\t\n\t    delete that.onOpen;\n\t    delete that.onClose;\n\t    delete that.onMessage;\n\t\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.getStats\n\t     * @returns {Promise<object>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n\t     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n\t     * contain stats but the developer will not receive them on the client-side.\n\t     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n\t     * this method only.\n\t     */\n\t    that.getStats = function (params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            delete params.onStats;\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    };\n\t\n\t    if (!respoke.MediaStats) {\n\t        delete that.getStats;\n\t    }\n\t\n\t    /**\n\t     * Detect datachannel errors for internal state.\n\t     * @memberof! respoke.DirectConnection\n\t     * @private\n\t     * @method respoke.DirectConnection.onDataChannelError\n\t     */\n\t    function onDataChannelError(error) {\n\t        /**\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {object} error\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('error', {\n\t            error: error\n\t        });\n\t        that.close();\n\t    }\n\t\n\t    /**\n\t     * Receive and route messages to the Endpoint.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelMessage\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#message\n\t     */\n\t    function onDataChannelMessage(evt) {\n\t        var message;\n\t        try {\n\t            message = JSON.parse(evt.data);\n\t        } catch (e) {\n\t            message = evt.data;\n\t        }\n\t        /**\n\t         * @event respoke.Endpoint#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.call.remoteEndpoint.fire('message', {\n\t            message: message,\n\t            directConnection: that\n\t        });\n\t        /**\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('message', {\n\t            message: message,\n\t            endpoint: that.call.remoteEndpoint\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Detect when the channel is open.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelOpen\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#open\n\t     */\n\t    function onDataChannelOpen(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('open');\n\t    }\n\t\n\t    /**\n\t     * Detect when the channel is closed.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelClose\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    function onDataChannelClose(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t    }\n\t\n\t    /**\n\t     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n\t     * datachannel's state and to receive messages.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.createDataChannel\n\t     * @private\n\t     */\n\t    function createDataChannel() {\n\t        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n\t        dataChannel.binaryType = 'arraybuffer';\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        dataChannel.onopen = onDataChannelOpen;\n\t\n\t        /**\n\t         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n\t         * DirectConnection#open for that notification.\n\t         * @event respoke.DirectConnection#start\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('start');\n\t    }\n\t\n\t    /**\n\t     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n\t     * since the library calls this method for the caller. Developers will use this method to pass in\n\t     * callbacks for the callee.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.accept\n\t     * @fires respoke.DirectConnection#accept\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose]\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart]\n\t     */\n\t    that.accept = function (params) {\n\t        params = params || {};\n\t        log.debug('DirectConnection.accept');\n\t        saveParameters(params);\n\t\n\t        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\t\n\t        if (pc.state.caller === true) {\n\t            createDataChannel();\n\t        }\n\t        that.call.answer();\n\t\n\t        /**\n\t         * @event respoke.DirectConnection#accept\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('accept');\n\t    };\n\t\n\t    /**\n\t     * Tear down the connection.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.close\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        log.debug(\"DirectConnection.close\");\n\t        if (dataChannel) {\n\t            dataChannel.close();\n\t        }\n\t\n\t        /**\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t\n\t        that.ignore();\n\t\n\t        if (params.skipRemove !== true) {\n\t            that.call.removeDirectConnection();\n\t        }\n\t\n\t        dataChannel = null;\n\t        that.call.remoteEndpoint.directConnection = null;\n\t        that.call = null;\n\t        pc = null;\n\t    };\n\t\n\t    /**\n\t     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n\t     * attribute may be given: either a string 'message' or an object 'object'.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} [params.message] - The message to send.\n\t     * @param {object} [params.object] - An object to send.\n\t     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n\t     * of this method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        if (that.isActive()) {\n\t            dataChannel.send(JSON.stringify(params.object || {\n\t                message: params.message\n\t            }));\n\t            deferred.resolve();\n\t        } else {\n\t            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n\t        }\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Expose close as reject for approve/reject workflow.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.reject\n\t     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.reject = that.close;\n\t\n\t    /**\n\t     * Indicate whether a datachannel is being setup or is in progress.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n\t        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n\t        return (dataChannel && dataChannel.readyState === 'open');\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.DirectConnection\n\t\n\t/**\n\t * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n\t * fires.\n\t * @callback respoke.DirectConnection.onClose\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n\t * callback is called every time respoke.DirectConnection#start fires.\n\t * @callback respoke.DirectConnection.onStart\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n\t * fires.\n\t * @callback respoke.DirectConnection.onOpen\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when a message is received over the direct connection.  This callback is called every time\n\t * respoke.DirectConnection#message fires.\n\t * @callback respoke.DirectConnection.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.message\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n\t * @callback respoke.DirectConnection.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.DirectConnection#error.\n\t * @callback respoke.DirectConnection.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the callee accepts the direct connection. This callback is called every time\n\t * respoke.DirectConnection#accept is fired.\n\t * @callback respoke.DirectConnection.onAccept\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.DirectConnection.statsSuccessHandler\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.stats - an object with stats in it.\n\t * @param {respoke.DirectConnection} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.DirectConnection.sendHandler\n\t */\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar log = __webpack_require__(19);\n\tvar Q = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n\t * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n\t * or the not-yet-implemented ScreenShare.\n\t * @class respoke.PeerConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n\t * candidates.\n\t * @param {respoke.Call} params.call\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalModify - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n\t * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n\t * @param {object} [params.callSettings]\n\t * @param {object} [params.pcOptions]\n\t * @param {object} [params.offerOptions]\n\t * @returns {respoke.PeerConnection}\n\t */\n\t\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.PeerConnection';\n\t\n\t    /**\n\t     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n\t     * @memberof! respoke.PeerConnection\n\t     * @name toSendHangup\n\t     * @type {respoke.Endpoint}\n\t     */\n\t    var toSendHangup;\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @private\n\t     * @name pc\n\t     * @type RTCPeerConnection\n\t     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n\t     * raw data transfer occurs within the PeerConnection.\n\t     */\n\t    var pc = null;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n\t     * handling, or sending of some information.\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     * @desc A callback provided by the developer that we'll call after receiving local media and before\n\t     * approve() is called.\n\t     */\n\t    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateSendingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateSendingQueue = [];\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateReceivingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateReceivingQueue = [];\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name callSettings\n\t     * @private\n\t     * @type {object}\n\t     * @desc A container for constraints and servers.\n\t     */\n\t    var callSettings = params.callSettings || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalOffer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalOffer = params.signalOffer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalConnected\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalConnected = params.signalConnected;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalModify\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalModify = params.signalModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalAnswer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalAnswer = params.signalAnswer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalHangup\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalHangup = respoke.once(params.signalHangup);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalReport\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalReport = params.signalReport;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidateOrig\n\t     * @private\n\t     * @type {function}\n\t     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n\t     */\n\t    var signalCandidateOrig = params.signalCandidate;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidate\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n\t     * to facilitate candidate logging.\n\t     */\n\t    function signalCandidate(params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        params.iceCandidates = [params.candidate];\n\t        signalCandidateOrig(params);\n\t        that.report.candidatesSent.push({candidate: params.candidate});\n\t    }\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name offerOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var offerOptions = params.offerOptions || null;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name pcOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var pcOptions = params.pcOptions || {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name report\n\t     * @type {object}\n\t     */\n\t    that.report = {\n\t        callStarted: 0,\n\t        callStopped: 0,\n\t        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n\t        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n\t        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n\t        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n\t        sessionId: that.call.id,\n\t        lastSDPString: '',\n\t        sdpsSent: [],\n\t        sdpsReceived: [],\n\t        candidatesSent: [],\n\t        candidatesReceived: [],\n\t        stats: [],\n\t        userAgent: navigator.userAgent,\n\t        os: navigator.platform\n\t    };\n\t\n\t    /**\n\t     * Start the process of network and media negotiation. Called after local video approved.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.initOffer\n\t     * @fires respoke.PeerConnection#initOffer\n\t     * @private\n\t     */\n\t    function initOffer() {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        log.info('creating offer', offerOptions);\n\t        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n\t            log.error('createOffer failed');\n\t        }, offerOptions);\n\t    }\n\t\n\t    /**\n\t     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n\t     * the callee has answered the call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processOffer\n\t     * @param {RTCSessionDescriptor}\n\t     * @returns {Promise}\n\t     */\n\t    that.processOffer = function (oOffer) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('processOffer', oOffer);\n\t\n\t        that.report.sdpsReceived.push(oOffer);\n\t        that.report.lastSDPString = oOffer.sdp;\n\t\n\t        //set flags for audio / video being offered\n\t        that.call.hasAudio = respoke.sdpHasAudio(oOffer.sdp);\n\t        that.call.hasVideo = respoke.sdpHasVideo(oOffer.sdp);\n\t        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\t\n\t        try {\n\t            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n\t                function successHandler() {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\t\n\t                    log.debug('set remote desc of offer succeeded');\n\t                    that.call.incomingMedia.setSDP(oOffer); // callee's incoming media\n\t                    pc.createAnswer(function successHandler(oSession) {\n\t                        that.state.processedRemoteSDP = true;\n\t                        that.call.outgoingMedia.setSDP(oSession); // callee's outgoing media\n\t                        saveAnswerAndSend(oSession);\n\t                    }, function errorHandler(err) {\n\t                        err = new Error(\"Error creating SDP answer.\" + err.message);\n\t                        that.report.callStoppedReason = err.message;\n\t                        /**\n\t                         * This event is fired on errors that occur during call setup or media negotiation.\n\t                         * @event respoke.Call#error\n\t                         * @type {respoke.Event}\n\t                         * @property {string} reason - A human readable description about the error.\n\t                         * @property {respoke.Call} target\n\t                         * @property {string} name - the event name.\n\t                         */\n\t                        that.call.fire('error', {\n\t                            message: err.message\n\t                        });\n\t                        log.error('create answer failed');\n\t                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                        that.close();\n\t                    });\n\t                }, function errorHandler(err) {\n\t                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n\t                    that.report.callStoppedReason = err.message;\n\t                    /**\n\t                     * This event is fired on errors that occur during call setup or media negotiation.\n\t                     * @event respoke.Call#error\n\t                     * @type {respoke.Event}\n\t                     * @property {string} reason - A human readable description about the error.\n\t                     * @property {respoke.Call} target\n\t                     * @property {string} name - the event name.\n\t                     */\n\t                    that.call.fire('error', {\n\t                        message: err.message\n\t                    });\n\t                }\n\t            );\n\t        } catch (err) {\n\t            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n\t            that.report.callStoppedReason = newErr.message;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: newErr.message\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getStats\n\t     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.PeerConnection#stats\n\t     */\n\t    function getStats(params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        if (!respoke.MediaStats) {\n\t            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n\t            return retVal;\n\t        }\n\t\n\t        function onConnect() {\n\t            var stats = respoke.MediaStatsParser({\n\t                peerConnection: pc,\n\t                interval: params.interval,\n\t                onStats: function statsHandler(stats) {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\t\n\t                    /**\n\t                     * @event respoke.PeerConnection#stats\n\t                     * @type {respoke.Event}\n\t                     * @property {object} stats - an object with stats in it.\n\t                     * @property {string} name - the event name.\n\t                     * @property {respoke.PeerConnection}\n\t                     */\n\t                    that.fire('stats', {\n\t                        stats: stats\n\t                    });\n\t                    that.report.stats.push(stats);\n\t                }\n\t            });\n\t            that.listen('close', function closeHandler(evt) {\n\t                stats.stopStats();\n\t            }, true);\n\t            deferred.resolve();\n\t        }\n\t\n\t        if (!pc) {\n\t            that.once('stream-received', onConnect);\n\t        } else {\n\t            onConnect();\n\t        }\n\t\n\t        return retVal;\n\t    }\n\t\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.init\n\t     * @param {object} params\n\t     * @param {object} params.constraints\n\t     * @param {array} params.servers\n\t     * @param {boolean} params.disableTurn\n\t     */\n\t    that.init = function init(params) {\n\t        params = params || {};\n\t        callSettings.servers = params.servers || callSettings.servers;\n\t        callSettings.disableTurn = params.disableTurn || callSettings.disableTurn;\n\t\n\t        log.debug('PC.init');\n\t\n\t        if (pc) {\n\t            return;\n\t        }\n\t\n\t        that.report.callStarted = new Date().getTime();\n\t\n\t        pc = new RTCPeerConnection(callSettings.servers, pcOptions);\n\t        pc.onicecandidate = onIceCandidate;\n\t        pc.onnegotiationneeded = onNegotiationNeeded;\n\t        pc.onaddstream = function onaddstream(evt) {\n\t            /**\n\t             * @event respoke.PeerConnection#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('connect', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.onremovestream = function onremovestream(evt) {\n\t            /**\n\t             * @event respoke.PeerConnection#remote-stream-removed\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-removed', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.ondatachannel = function ondatachannel(evt) {\n\t            /**\n\t             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n\t             * is only called for the callee.\n\t             * @event respoke.PeerConnection#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('direct-connection', {\n\t                channel: evt.channel\n\t            });\n\t        };\n\t\n\t        that.state.listen('offering:entry', function (evt) {\n\t            if (that.state.caller) {\n\t                initOffer();\n\t            }\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Return an array of remote media streams.\n\t     * @muremberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getRemoteStreams\n\t     */\n\t    that.getRemoteStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * Return an array of local media streams.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getLocalStreams\n\t     */\n\t    that.getLocalStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * Create a data channel.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.createDataChannel\n\t     */\n\t    that.createDataChannel = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addStream\n\t     * Expose addStream.\n\t     * @param {RTCMediaStream}\n\t     */\n\t    that.addStream = function (stream) {\n\t        if (!pc) {\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: \"Got local stream in a precall state.\"\n\t            });\n\t            return;\n\t        }\n\t        pc.addStream(stream);\n\t    };\n\t\n\t    /**\n\t     * Process a local ICE Candidate\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceCandidate\n\t     * @private\n\t     * @param {RTCIceCandidate}\n\t     */\n\t    function onIceCandidate(oCan) {\n\t        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n\t        if (!candidate || !candidate.candidate) {\n\t            return;\n\t        }\n\t\n\t        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n\t            log.debug(\"Dropping candidate because forceTurn is on.\");\n\t            return;\n\t        }\n\t\n\t        if (!that.state.sentSDP && !that.state.processedRemoteSDP) {\n\t            candidateSendingQueue.push(candidate);\n\t        } else {\n\t            signalCandidate({\n\t                candidate: candidate,\n\t                call: that.call\n\t            });\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Handle renegotiation\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onNegotiationNeeded\n\t     * @private\n\t     */\n\t    function onNegotiationNeeded() {\n\t        log.warn(\"Negotiation needed.\");\n\t    }\n\t\n\t    /**\n\t     * Process any ICE candidates that we received either from the browser or the other side while\n\t     * we were trying to set up our RTCPeerConnection to handle them.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processQueues\n\t     * @private\n\t     */\n\t    function processQueues() {\n\t        /* We only need to queue (and thus process queues) if\n\t         * we are the caller. The person receiving the call\n\t         * never has a valid PeerConnection at a time when we don't\n\t         * have one. */\n\t        var can = null;\n\t        for (var i = 0; i < candidateSendingQueue.length; i += 1) {\n\t            signalCandidate({\n\t                candidate: candidateSendingQueue[i],\n\t                call: that.call\n\t            });\n\t        }\n\t        candidateSendingQueue = [];\n\t        for (var i = 0; i < candidateReceivingQueue.length; i += 1) {\n\t            that.addRemoteCandidate({\n\t                candidate: candidateReceivingQueue[i],\n\t                processingQueue: true\n\t            });\n\t        }\n\t        candidateReceivingQueue = [];\n\t    }\n\t\n\t    /**\n\t     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n\t     * side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveOfferAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveOfferAndSend(oSession) {\n\t        oSession.type = 'offer';\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('setting and sending offer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\t        that.call.outgoingMedia.setSDP(oSession); // caller's outgoing media\n\t        that.call.incomingMedia.setSDP(oSession); // caller's incoming media estimate\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'offer';\n\t            signalOffer({\n\t                call: that.call,\n\t                sessionDescription: oSession,\n\t                onSuccess: function () {\n\t                    that.state.sentSDP = true;\n\t                    setTimeout(processQueues);\n\t                },\n\t                onError: function (err) {\n\t                    respoke.log.error('offer could not be sent');\n\t                    that.call.hangup({signal: false});\n\t                }\n\t            });\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on offer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n\t     * other side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveAnswerAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveAnswerAndSend(oSession) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (!that.state.caller) {\n\t            that.report.callerconnection = that.call.connectionId;\n\t        }\n\t\n\t        oSession.type = 'answer';\n\t        log.debug('setting and sending answer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\t\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'answer';\n\t            signalAnswer({\n\t                sessionDescription: oSession,\n\t                call: that.call\n\t            });\n\t            that.state.sentSDP = true;\n\t            processQueues();\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on answer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.close\n\t     * @fires respoke.PeerConnection#destoy\n\t     * @param {object} param\n\t     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n\t     * hangup signal.\n\t     * @fires respoke.PeerConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        toSendHangup = true;\n\t\n\t        if (that.state.caller === true) {\n\t            if (!that.state.sentSDP) {\n\t                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n\t                toSendHangup = false;\n\t            }\n\t        }\n\t\n\t        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n\t        if (toSendHangup) {\n\t            log.info('sending hangup');\n\t            signalHangup({\n\t                call: that.call\n\t            });\n\t        }\n\t\n\t        that.report.callStopped = new Date().getTime();\n\t\n\t        /**\n\t         * @event respoke.PeerConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('close', {\n\t            sentSignal: toSendHangup\n\t        });\n\t        that.ignore();\n\t\n\t        if (pc && that.report) {\n\t            pc.close();\n\t        }\n\t        pc = null;\n\t\n\t        if (that.call.callDebugReportEnabled) {\n\t            signalReport({\n\t                report: that.report\n\t            });\n\t        }\n\t        that.report = null;\n\t    };\n\t    that.close = respoke.once(that.close);\n\t\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n\t    };\n\t\n\t    /**\n\t     * Set the estimated media status on incoming and outgoing media.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenOffer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n\t     * answered the call.\n\t     * @private\n\t     */\n\t    function listenOffer(evt) {\n\t        that.call.incomingMedia.setSDP(evt.signal.sessionDescription); // callee's incoming media\n\t        that.call.outgoingMedia.setSDP(evt.signal.sessionDescription); // callee's outgoing media estimate\n\t    }\n\t\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n\t     * answered the call.\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('got answer', evt.signal);\n\t\n\t        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n\t        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\t        //set flags for audio / video for answer\n\t        that.call.hasAudio = respoke.sdpHasAudio(evt.signal.sessionDescription.sdp);\n\t        that.call.hasVideo = respoke.sdpHasVideo(evt.signal.sessionDescription.sdp);\n\t        that.call.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n\t        if (that.state.caller) {\n\t            that.report.calleeconnection = evt.signal.fromConnection;\n\t        }\n\t        that.call.connectionId = evt.signal.fromConnection;\n\t        // TODO don't signal connected more than once.\n\t        signalConnected({\n\t            call: that.call\n\t        });\n\t\n\t        pc.setRemoteDescription(\n\t            new RTCSessionDescription(evt.signal.sessionDescription),\n\t            function successHandler() {\n\t                that.call.incomingMedia.setSDP(evt.signal.sessionDescription); // caller's incoming media\n\t                that.state.dispatch('receiveAnswer');\n\t            }, function errorHandler(p) {\n\t                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n\t                that.report.callStoppedReason = newErr.message;\n\t                /**\n\t                 * This event is fired on errors that occur during call setup or media negotiation.\n\t                 * @event respoke.Call#error\n\t                 * @type {respoke.Event}\n\t                 * @property {string} reason - A human readable description about the error.\n\t                 * @property {respoke.Call} target\n\t                 * @property {string} name - the event name.\n\t                 */\n\t                that.call.fire('error', {\n\t                    message: newErr.message\n\t                });\n\t                log.error('set remote desc of answer failed', evt.signal.sessionDescription);\n\t                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                that.close();\n\t            }\n\t        );\n\t    }\n\t\n\t    /**\n\t     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n\t     * they are both on the same call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenConnected\n\t     * @private\n\t     */\n\t    function listenConnected(evt) {\n\t        if (evt.signal.connectionId !== client.connectionId) {\n\t            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n\t            that.call.hangup({signal: false});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n\t     * renegotiation.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.startModify\n\t     * @param {object} params\n\t     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n\t     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n\t     */\n\t    that.startModify = function (params) {\n\t        defModify = Q.defer();\n\t        signalModify({\n\t            action: 'initiate',\n\t            call: that.call,\n\t            constraints: params.constraints,\n\t            directConnection: params.directConnection\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Indicate a desire from the other side to renegotiate media.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenModify\n\t     * @param {object} evt\n\t     * @param {object} evt.signal\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        var err;\n\t        log.debug('PC.listenModify', evt.signal);\n\t\n\t        if (evt.signal.action === 'accept') {\n\t            if (defModify.promise.isPending()) {\n\t                defModify.resolve();\n\t                /**\n\t                 * @event respoke.PeerConnection#modify-accept\n\t                 * @type {respoke.Event}\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-accept', {signal: evt.signal});\n\t            }\n\t            return;\n\t        } else if (evt.signal.action === 'reject') {\n\t            if (defModify.promise.isPending()) {\n\t                err = new Error(\"Remote party cannot negotiate.\");\n\t                log.debug(err.message);\n\t                defModify.reject(err);\n\t                /**\n\t                 * @event respoke.PeerConnection#modify-reject\n\t                 * @type {respoke.Event}\n\t                 * @property {Error} err\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-reject', {err: err});\n\t            }\n\t            return;\n\t        }\n\t\n\t        // This code only gets executed if signal.action === 'initiate'\n\t        if (defModify && defModify.promise.isPending()) {\n\t            // TODO compare signal request ID and accept if we have the higher request ID,\n\t            // reject if we have the lower request ID.\n\t            err = new Error(\"Got modify in a negotiating state.\");\n\t            log.debug(err.message);\n\t            defModify.reject(err);\n\t            /**\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            return;\n\t        }\n\t\n\t        defModify = Q.defer();\n\t\n\t        if (!that.state.sentSDP || that.state.isState('idle')) {\n\t            err = new Error(\"Got modify in a precall state.\");\n\t            /**\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            defModify.reject(err);\n\t            return;\n\t        }\n\t\n\t       /**\n\t         * @event respoke.PeerConnection#modify-accept\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('modify-accept', {signal: evt.signal});\n\t        signalModify({\n\t            action: 'accept',\n\t            call: that.call\n\t        });\n\t        defModify.resolve();\n\t    }\n\t\n\t    /**\n\t     * Save the candidate. If we initiated the call, place the candidate into the queue so\n\t     * we can process them after we receive the answer.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addRemoteCandidate\n\t     * @param {object} params\n\t     * @param {RTCIceCandidate} params.candidate\n\t     */\n\t    that.addRemoteCandidate = function (params) {\n\t        params = params || {};\n\t\n\t        if (!pc && params.processingQueue) { // we hung up.\n\t            return;\n\t        }\n\t\n\t        if (!params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n\t            log.warn(\"addRemoteCandidate got wrong format!\", params);\n\t            return;\n\t        }\n\t\n\t        if (!pc) {\n\t            candidateReceivingQueue.push(params.candidate);\n\t            log.debug('Queueing a candidate because pc is null.');\n\t            return;\n\t        }\n\t\n\t        if (that.state.sentSDP || that.state.processedRemoteSDP) {\n\t            try {\n\t                pc.addIceCandidate(new RTCIceCandidate(params.candidate));\n\t                log.debug('Got a remote candidate.', params.candidate);\n\t                that.report.candidatesReceived.push(params.candidate);\n\t            } catch (e) {\n\t                log.error(\"Couldn't add ICE candidate: \" + e.message, params.candidate);\n\t                return;\n\t            }\n\t        } else if (!params.processingQueue) {\n\t            candidateReceivingQueue.push(params.candidate);\n\t            log.debug('Queueing a candidate because no offer yet.');\n\t        }\n\t    };\n\t\n\t    that.call.listen('signal-offer', listenOffer, true);\n\t    that.call.listen('signal-answer', listenAnswer, true);\n\t    that.call.listen('signal-connected', listenConnected, true);\n\t    that.call.listen('signal-modify', listenModify, true);\n\t\n\t    return that;\n\t}; // End respoke.PeerConnection\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @ignore\n\t */\n\t\n\tvar log = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\tvar Statechart = __webpack_require__(21);\n\tvar Q = __webpack_require__(18);\n\t\n\t/**\n\t * State machine for WebRTC calling, data channels, and screen sharing.\n\t * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n\t * asynchronously.\n\t * @class respoke.CallState\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {respoke.Call} call\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t * @returns {respoke.CallState}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var fsm;\n\t    var that = respoke.EventEmitter(params);\n\t    that.className = 'respoke.CallState';\n\t\n\t    var allTimers = [];\n\t    var answerTimer;\n\t    var answerTimeout = params.answerTimeout || 10000;\n\t    var receiveAnswerTimer;\n\t    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n\t    var connectionTimer;\n\t    var connectionTimeout = params.connectionTimeout || 10000;\n\t    var modifyTimer;\n\t    var modifyTimeout = params.modifyTimeout || 60000;\n\t    var oldRole;\n\t\n\t    /*\n\t     * These can quite often result in a condition in which they do not cause a transition to occur.\n\t     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n\t     * result in a non-transition error when it's OK, and that is the 'reject' event.\n\t     */\n\t    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n\t        'receiveAnswer'];\n\t\n\t    function assert(condition) {\n\t        if (!condition) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    }\n\t\n\t    that.hasLocalMediaApproval = false;\n\t    that.hasLocalMedia = false;\n\t    that.receivedBye = false;\n\t    that.isAnswered = false;\n\t    that.sentSDP = false;\n\t    that.receivedSDP = false;\n\t    that.processedRemoteSDP = false;\n\t    that.needDirectConnection = !!that.needDirectConnection;\n\t    that.sendOnly = !!that.sendOnly;\n\t    that.receiveOnly = !!that.receiveOnly;\n\t\n\t    // Event\n\t    var rejectEvent = [{\n\t        target: 'connected',\n\t        guard: function (params) {\n\t            // we have any media flowing or data channel open\n\t            if (typeof oldRole === 'boolean') {\n\t                // Reset the role if we have aborted a modify.\n\t                that.caller = oldRole;\n\t            }\n\t\n\t            if (modifyTimer) {\n\t                modifyTimer.clear();\n\t            }\n\t\n\t            return that.hasMedia();\n\t        }\n\t    }, {\n\t        target: 'terminated',\n\t        guard: function (params) {\n\t            params = params || {};\n\t            // we have no media flowing or data channel open\n\t            that.hangupReason = params.reason || \"no media\";\n\t            return !that.hasMedia();\n\t        }\n\t    }];\n\t\n\t    // Event\n\t    function rejectModify() {\n\t        // reject modification\n\t        if (modifyTimer) {\n\t            modifyTimer.clear();\n\t        }\n\t    }\n\t\n\t    // Event\n\t    function clearReceiveAnswerTimer() {\n\t        that.processedRemoteSDP = true;\n\t        if (receiveAnswerTimer) {\n\t            receiveAnswerTimer.clear();\n\t        }\n\t    }\n\t\n\t    // Event\n\t    var hangupEvent = {\n\t        target: 'terminated',\n\t        action: function (params) {\n\t            params = params || {};\n\t            that.signalBye = params.signal;\n\t            that.hangupReason = that.hangupReason || params.reason || \"none\";\n\t        }\n\t    };\n\t\n\t    function needToObtainMedia(params) {\n\t        return (that.needDirectConnection !== true && that.receiveOnly !== true);\n\t    }\n\t\n\t    function needToApproveDirectConnection(params) {\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n\t    }\n\t\n\t    function automaticDirectConnectionCaller(params) {\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function' &&\n\t            that.caller === true);\n\t    }\n\t\n\t    function createTimer(func, name, time) {\n\t        var id = setTimeout(function () {\n\t            id = null;\n\t            respoke.log.error(name, \"timer expired.\");\n\t            func();\n\t        }, time);\n\t        respoke.log.debug('setting timer', name, 'for', time / 1000, 'secs');\n\t        var timer  = {\n\t            name: name,\n\t            clear: function () {\n\t                if (id === null) {\n\t                    return;\n\t                }\n\t                respoke.log.debug('clearing timer', name);\n\t                clearTimeout(id);\n\t                id = null;\n\t            }\n\t        };\n\t        allTimers.push(timer);\n\t        return timer;\n\t    }\n\t\n\t    var stateParams = {\n\t        initialState: 'idle',\n\t        receiveLocalMedia: function () {\n\t            that.hasLocalMedia = true;\n\t        },\n\t        states: {\n\t            // State\n\t            idle: {\n\t                // Event\n\t                exit: function () {\n\t                    that.fire('idle:exit');\n\t                },\n\t                // Event\n\t                initiate: [{\n\t                    target: 'negotiatingContainer',\n\t                    guard: function (params) {\n\t                        assert(typeof params.client === 'object');\n\t                        assert(typeof params.caller === 'boolean');\n\t                        return (params.caller === true || params.client.hasListeners('call'));\n\t                    }\n\t                }, {\n\t                    target: 'terminated',\n\t                    guard: function (params) {\n\t                        if (params.caller !== true && !params.client.hasListeners('call')) {\n\t                            that.hangupReason = 'no call listener';\n\t                            that.signalBye = true;\n\t                            return true;\n\t                        }\n\t                        return false;\n\t                    }\n\t                }],\n\t                // Event\n\t                hangup: hangupEvent\n\t            },\n\t            // State\n\t            negotiatingContainer: {\n\t                init: \"preparing\",\n\t                // Event\n\t                hangup: hangupEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                states: {\n\t                    preparing: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.hasLocalMediaApproval = false;\n\t                                that.hasLocalMedia = false;\n\t                                that.sentSDP = false;\n\t                                that.receivedSDP = false;\n\t                                that.processedRemoteSDP = false;\n\t                                that.isAnswered = false;\n\t                                if (!that.isModifying()) {\n\t                                    answerTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n\t                                    }, 'answer own call', answerTimeout);\n\t                                }\n\t                                that.fire('preparing:entry');\n\t                            }\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('preparing:exit');\n\t                            if (answerTimer) {\n\t                                answerTimer.clear();\n\t                            }\n\t                        },\n\t                        // Event\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveOffer: {\n\t                            action: function (params) {\n\t                                that.receivedSDP = true;\n\t                                if (that.isAnswered) {\n\t                                    // If we get here, we are the callee and we've answered the call before the call\n\t                                    // creation/receive offer promise chain completed.\n\t                                    setTimeout(function () {\n\t                                        that.dispatch('answer', params);\n\t                                    });\n\t                                }\n\t                            }\n\t                        },\n\t                        // Event\n\t                        answer: [{\n\t                            action: function (params) {\n\t                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n\t                                that.isAnswered = true;\n\t                                if (typeof params.previewLocalMedia !== 'function') {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // we are going to send media\n\t                            target: 'approvingDeviceAccess',\n\t                            guard: needToObtainMedia\n\t                        }, {\n\t                            // we are sending a direct connection & developer wants to approve\n\t                            target: 'approvingContent',\n\t                            guard: needToApproveDirectConnection\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: automaticDirectConnectionCaller\n\t                        }, {\n\t                            // we are not sending anything or developer does not want to approve media.\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                // always for callee, caller will always answer before sending offer.\n\t                                // callee should always answer after receiving offer.\n\t                                if (!that.receivedSDP) {\n\t                                    return false;\n\t                                }\n\t\n\t                                if (needToObtainMedia(params) || needToApproveDirectConnection(params) ||\n\t                                        automaticDirectConnectionCaller(params)) {\n\t                                    return false;\n\t                                }\n\t\n\t                                if (!params.previewLocalMedia || that.receiveOnly) {\n\t                                    setTimeout(function () {\n\t                                        params.approve();\n\t                                    });\n\t                                }\n\t                                return (that.receiveOnly === true || that.needDirectConnection === true);\n\t                            }\n\t                        }]\n\t                    },\n\t                    // State\n\t                    gettingMedia: {\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveLocalMedia: [{\n\t                            action: function () {\n\t                                that.hasLocalMedia = true;\n\t                            }\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: function (params) {\n\t                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }, {\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }],\n\t                        states: {\n\t                            // State\n\t                            approvingDeviceAccess: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-device-access:entry');\n\t                                },\n\t                                // Event\n\t                                approve: [{\n\t                                    target: 'approvingContent',\n\t                                    guard: function (params) {\n\t                                        return (typeof params.previewLocalMedia === 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false &&\n\t                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }]\n\t                            },\n\t                            // State\n\t                            approvingContent: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-content:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('approving-content:exit');\n\t                                },\n\t                                // Event\n\t                                approve: [function (params) {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true);\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false && that.hasLocalMedia === true);\n\t                                    }\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    offeringContainer: {\n\t                        init: 'offering',\n\t                        reject: rejectEvent,\n\t                        sentOffer: function () {\n\t                            // start answer timer\n\t                            receiveAnswerTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"receive answer timer\"});\n\t                            }, 'receive answer', receiveAnswerTimeout);\n\t                        },\n\t                        states: {\n\t                            offering: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('offering:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('offering:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [function () {\n\t                                    that.hasLocalMedia = true;\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                },\n\t                                // Event\n\t                                receiveAnswer: [clearReceiveAnswerTimer, {\n\t                                    target: 'connecting'\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    connectingContainer: {\n\t                        init: 'connecting',\n\t                        reject: rejectEvent,\n\t                        receiveAnswer: clearReceiveAnswerTimer,\n\t                        states: {\n\t                            connecting: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('connecting:entry');\n\t\n\t                                    // set connection timer\n\t                                    connectionTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"connection timer\"});\n\t                                    }, 'connection', connectionTimeout);\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    if (connectionTimer) {\n\t                                        connectionTimer.clear();\n\t                                    }\n\t                                    if (modifyTimer) {\n\t                                        modifyTimer.clear();\n\t                                    }\n\t                                    that.fire('connecting:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [{\n\t                                    action: function () {\n\t                                        that.hasLocalMedia = true;\n\t                                    }\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true && that.caller === false);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            // This state is for when we are in limbo between connected and negotiating and we are\n\t            // trying to figure out if the other side will allow us to modify. If we receive modify in\n\t            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n\t            modifyingContainer: {\n\t                init: 'modifying',\n\t                reject: rejectEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    modifying: {\n\t                        // Event\n\t                        entry: function () {\n\t                            modifyTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"modify timer\"});\n\t                            }, 'modify for caller', modifyTimeout);\n\t                            that.fire('modifying:entry');\n\t                        },\n\t                        // Event\n\t                        accept: [function () {\n\t                            that.caller = true;\n\t                        }, {\n\t                            target: 'preparing'\n\t                        }],\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('modifying:exit');\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            connectedContainer: {\n\t                init: 'connected',\n\t                reject: {\n\t                    target: 'terminated',\n\t                    action: function (params) {\n\t                        that.hangupReason = params.reason || \"got reject while connected\";\n\t                    }\n\t                },\n\t                receiveAnswer: clearReceiveAnswerTimer,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    connected: {\n\t                        // Event\n\t                        entry: function () {\n\t                            oldRole = that.caller;\n\t                            that.needDirectConnection = false;\n\t                            that.fire('connected:entry');\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('connected:exit');\n\t                        },\n\t                        // Event\n\t                        modify: [{\n\t                            // be notified that the other side would like modification\n\t                            target: 'preparing',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                if (params.receive === true) {\n\t                                    that.caller = false;\n\t                                    modifyTimer = createTimer(function () {\n\t                                        // If modify gets interrupted, go back to previous roles.\n\t                                        that.dispatch('reject', {reason: \"modify timer\"});\n\t                                    }, 'modify', modifyTimeout);\n\t                                    return true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // request to begin modification\n\t                            target: 'modifying',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                return (params.receive !== true);\n\t                            }\n\t                        }]\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            terminatedContainer: {\n\t                init: 'terminated',\n\t                states: {\n\t                    terminated: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.fire('terminated:entry');\n\t                                allTimers.forEach(function (timer) {\n\t                                    timer.clear();\n\t                                });\n\t                                setTimeout(function () {\n\t                                    fsm = null;\n\t                                    that.ignore();\n\t                                });\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    stateParams.that = Object.create(Statechart);\n\t    fsm = respoke.Class(stateParams);\n\t    fsm.run({\n\t        // rename to 'debug' to enable\n\t        debugOff: function () {\n\t            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n\t            var args = Array.prototype.slice.call(arguments);\n\t            args.splice(0, 0, that.caller);\n\t            respoke.log.debug.apply(respoke.log, args);\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Return the name of the current state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.getState\n\t     * @returns {string}\n\t     */\n\t    that.getState = function () {\n\t        if (!fsm) {\n\t            return 'terminated';\n\t        }\n\t        return fsm.currentState().name;\n\t    };\n\t\n\t    /**\n\t     * Synchronously dispatch an event, which may or may not change the state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.dispatch\n\t     */\n\t    that.dispatch = function (evt, args) {\n\t        var oldState;\n\t        var newState;\n\t\n\t        if (!fsm) {\n\t            return;\n\t        }\n\t\n\t        oldState = that.getState();\n\t        try {\n\t            fsm.dispatch(evt, args);\n\t        } catch (err) {\n\t            respoke.log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n\t            throw err;\n\t        }\n\t        newState = that.getState();\n\t        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n\t            respoke.log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n\t        }\n\t        respoke.log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n\t    };\n\t\n\t    /**\n\t     * Determine whether or not we are in the middle of a call modification.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isModifying\n\t     * @returns {boolean}\n\t     */\n\t    that.isModifying = function () {\n\t        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n\t        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n\t    };\n\t\n\t    /**\n\t     * Helper for testing state name\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isState\n\t     * @param {string} name\n\t     * @returns {boolean}\n\t     */\n\t    that.isState = function (name) {\n\t        return (that.getState() === name);\n\t    };\n\t\n\t    assert(typeof that.hasMedia === 'function');\n\t    assert(typeof that.caller === 'boolean');\n\t    return that;\n\t};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar Q = __webpack_require__(18);\n\tvar log = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia, path and codec negotation,\n\t * and call state.\n\t *\n\t * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n\t *\n\t * @class respoke.Call\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} params.caller - whether or not we initiated the call\n\t * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t * @param {boolean} [params.sendOnly] - whether or not we send media\n\t * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t * relay servers. If it cannot flow through relay servers, the call will fail.\n\t * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t * required to flow peer-to-peer. If it cannot, the call will fail.\n\t * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n\t * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n\t * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t * wants to perform an action between local media becoming available and calling approve().\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t * media renegotiation.\n\t * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t * This callback will be called when media is muted or unmuted.\n\t * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t * for the user to give permission to start getting audio or video.\n\t * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t * the approval was automatic.\n\t * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t * granted by the browser without asking the user to approve it.\n\t * @param {object} params.callSettings\n\t * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local video attached to it.\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote video attached to it.\n\t * @returns {respoke.Call}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * A name to identify the type of object.\n\t     * @memberof! respoke.Call\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Call';\n\t\n\t    /**\n\t     * Whether or not the client is the caller of the call.\n\t     * @memberof! respoke.Call\n\t     * @name caller\n\t     * @type {boolean}\n\t     */\n\t    that.caller = !!that.caller;\n\t\n\t    /**\n\t     * The call ID.\n\t     * @memberof! respoke.Call\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.caller ? respoke.makeGUID() : that.id;\n\t\n\t    if (!that.id) {\n\t        throw new Error(\"Can't start a new call without a call id.\");\n\t    }\n\t\n\t    /**\n\t     * Promise used to trigger actions dependant upon having received media or a datachannel.\n\t     * @memberof! respoke.Call\n\t     * @name defMedia\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defMedia = Q.defer();\n\t    /**\n\t     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n\t     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n\t     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n\t     * resolved or rejected only after the developer or user approves or rejects the modify.\n\t     * @memberof! respoke.Call\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     */\n\t    var previewLocalMedia = params.previewLocalMedia;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.getClient}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name signalingChannel\n\t     * @private\n\t     * @type {respoke.signalingChannel}\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t    /**\n\t     * Informational property. Whether call debugs were enabled on the client during creation.\n\t     * Changing this value will do nothing.\n\t     * @name callDebugReportEnabled\n\t     * @type {boolean}\n\t     */\n\t    that.callDebugReportEnabled = !!params.signalingChannel.callDebugReportEnabled;\n\t    /**\n\t     * A flag indicating whether this call has audio.\n\t     *\n\t     * This becomes available after the call is accepted, for the client being called only.\n\t     *\n\t     * @name hasAudio\n\t     * @type {boolean}\n\t     */\n\t    that.hasAudio = undefined;\n\t    /**\n\t     * A flag indicating whether this call has video.\n\t     *\n\t     * This becomes available after the call is accepted, for the client being called only.\n\t     *\n\t     * @name hasVideo\n\t     * @type {boolean}\n\t     */\n\t    that.hasVideo = undefined;\n\t\n\t    /**\n\t     * Local media\n\t     * @name outgoingMedia\n\t     * @type {respoke.LocalMedia}\n\t     */\n\t    that.outgoingMedia = respoke.LocalMedia(params);\n\t\n\t    /**\n\t     * Remote media\n\t     * @name incomingMedia\n\t     * @type {respoke.RemoteMedia}\n\t     */\n\t    that.incomingMedia = respoke.RemoteMedia(params);\n\t\n\t    /**\n\t     * This event indicates that local video has been unmuted.\n\t     * @event respoke.Call#mute\n\t     * @property {string} name - the event name.\n\t     * @property {respoke.Call} target\n\t     * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t     * has been changed.\n\t     * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t     */\n\t    that.outgoingMedia.listen('mute', function (evt) {\n\t        that.fire('mute', {\n\t            type: evt.type,\n\t            muted: evt.muted\n\t        });\n\t    });\n\t\n\t    delete params.signalingChannel;\n\t    delete that.signalingChannel;\n\t\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name videoIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var videoIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name audioIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var audioIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name callSettings\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var callSettings = params.callSettings;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name directConnection\n\t     * @private\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    var directConnection = null;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name toSendHangup\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var toSendHangup = null;\n\t\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = respoke.PeerConnection({\n\t        instanceId: instanceId,\n\t        state: respoke.CallState({\n\t            caller: that.caller,\n\t            needDirectConnection: params.needDirectConnection,\n\t            sendOnly: params.sendOnly,\n\t            receiveOnly: params.receiveOnly,\n\t            // hasMedia is not defined yet.\n\t            hasMedia: function () {\n\t                return that.hasMedia();\n\t            }\n\t        }),\n\t        forceTurn: !!params.forceTurn,\n\t        call: that,\n\t        callSettings: callSettings,\n\t        pcOptions: {\n\t            optional: [\n\t                { DtlsSrtpKeyAgreement: true },\n\t                { RtpDataChannels: false }\n\t            ]\n\t        },\n\t        offerOptions: params.offerOptions || null,\n\t        signalOffer: function (args) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            params.signalOffer(args);\n\t            pc.state.dispatch('sentOffer');\n\t        },\n\t        signalConnected: params.signalConnected,\n\t        signalAnswer: params.signalAnswer,\n\t        signalModify: params.signalModify,\n\t        signalHangup: params.signalHangup,\n\t        signalReport: params.signalReport,\n\t        signalCandidate: params.signalCandidate\n\t    });\n\t\n\t    /**\n\t     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n\t     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n\t     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n\t     * @method respoke.Call.init\n\t     * @memberof! respoke.Call\n\t     * @fires respoke.Client#call\n\t     * @private\n\t     */\n\t    function init() {\n\t        log.debug('Call.init');\n\t\n\t        if (defModify !== undefined) {\n\t            defMedia = Q.defer();\n\t        }\n\t\n\t        pc.init(callSettings); // instantiates RTCPeerConnection, can't call on modify\n\t        if (defModify === undefined && pc.state.needDirectConnection === true) {\n\t            actuallyAddDirectConnection(params);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {object} [params.callSettings]\n\t     * @param {object} [params.constraints]\n\t     * @param {array} [params.servers]\n\t     * @param {boolean} [params.forceTurn]\n\t     * @param {boolean} [params.receiveOnly]\n\t     * @param {boolean} [params.sendOnly]\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote video attached to it.\n\t     * @private\n\t     * @fires respoke.Call#stats\n\t     */\n\t    function saveParameters(params) {\n\t        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n\t         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n\t         * invocation of this function is an artifact of async code not being finished yet, so we can just\n\t         * skip all of this setup.\n\t         */\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        that.listen('local-stream-received', params.onLocalMedia);\n\t        that.listen('connect', params.onConnect);\n\t        that.listen('hangup', params.onHangup);\n\t        that.listen('allow', params.onAllow);\n\t        that.listen('answer', params.onAnswer);\n\t        that.listen('approve', params.onApprove);\n\t        that.listen('mute', params.onMute);\n\t        that.listen('requesting-media', params.onRequestingMedia);\n\t\n\t        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n\t        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n\t        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ? params.needDirectConnection : pc.state.needDirectConnection;\n\t        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n\t            params.previewLocalMedia : previewLocalMedia;\n\t\n\t        callSettings = params.callSettings || callSettings || {};\n\t        callSettings.servers = params.servers || callSettings.servers;\n\t        callSettings.constraints = params.constraints || callSettings.constraints;\n\t        callSettings.disableTurn = params.disableTurn || callSettings.disableTurn;\n\t\n\t        that.outgoingMedia.element = params.videoLocalElement || that.outgoingMedia.element;\n\t        that.outgoingMedia.setConstraints(callSettings.constraints);\n\t        if (pc.state.caller === true) {\n\t            // Only the person who initiated this round of media negotiation needs to estimate remote\n\t            // media based on what constraints local media is using.\n\t            that.incomingMedia.setConstraints(callSettings.constraints);\n\t        }\n\t        that.incomingMedia.element = params.videoRemoteElement || that.incomingMedia.element;\n\t\n\t\n\t        pc.callSettings = callSettings;\n\t        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : pc.forceTurn;\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about audio and/or video on a call\n\t             * becomes available.\n\t             * @event respoke.Call#stats\n\t             * @type {respoke.Event}\n\t             * @property {respoke.MediaStats} stats - an object with stats in it.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\t\n\t        delete that.signalOffer;\n\t        delete that.signalConnected;\n\t        delete that.signalAnswer;\n\t        delete that.signalHangup;\n\t        delete that.signalReport;\n\t        delete that.signalCandidate;\n\t    }\n\t\n\t    /**\n\t     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n\t     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n\t     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n\t     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.answer\n\t     * @fires respoke.Call#answer\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {object} [params.constraints] - Information about the media for this call.\n\t     * @param {array} [params.servers] - A list of sources of network paths to help with negotiating the connection.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote video attached to it.\n\t     */\n\t    that.answer = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.answer');\n\t\n\t        saveParameters(params);\n\t\n\t        pc.listen('connect', onRemoteStreamAdded, true);\n\t        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\t\n\t        pc.state.once('approving-device-access:entry', function (evt) {\n\t            doAddVideo(params);\n\t        });\n\t        pc.state.dispatch('answer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t        /**\n\t         * The call was answered.\n\t         * @event respoke.Call#answer\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('answer');\n\t    };\n\t\n\t    /**\n\t     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n\t     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n\t     * to accept or reject them.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.accept\n\t     * @fires respoke.Call#accept\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n\t     * remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {object} [params.constraints] - Information about the media for this call.\n\t     * @param {array} [params.servers] - A list of sources of network paths to help with negotiating the connection.\n\t     */\n\t    that.accept = that.answer;\n\t\n\t    /**\n\t     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n\t     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n\t     * audio and/or video is working correctly,\n\t     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n\t     * will progress as expected. If call.reject() is called, the call will be aborted.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.approve\n\t     * @fires respoke.Call#approve\n\t     */\n\t    that.approve = function () {\n\t        log.debug('Call.approve');\n\t        /**\n\t         * Fired when the local media access is approved.\n\t         *\n\t         * @event respoke.Call#approve\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('approve');\n\t        pc.state.dispatch('approve', {\n\t            previewLocalMedia: previewLocalMedia\n\t        });\n\t\n\t        if (defModify && defModify.promise.isPending()) {\n\t            defModify.resolve(true);\n\t            defModify = undefined;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Listen for the remote side to remove media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamRemoved\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onRemoteStreamRemoved(evt) {\n\t        log.debug('pc event: remote stream removed');\n\t    }\n\t\n\t    /**\n\t     * Listen for the remote side to add additional media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamAdded\n\t     * @private\n\t     * @param {object}\n\t     * @fires respoke.Call#connect\n\t     */\n\t    function onRemoteStreamAdded(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('received remote media', evt);\n\t\n\t        that.incomingMedia.setStream(evt.stream);\n\t\n\t        /**\n\t         * Indicates that a remote media stream has been added to the call.\n\t         *\n\t         * @event respoke.Call#connect\n\t         * @event respoke.LocalMedia#connect\n\t         * @type {respoke.Event}\n\t         * @property {Element} element - The HTML5 Video element with the new stream attached.\n\t         * @property {MediaStream} stream - The media stream.\n\t         * @property {string} name - The event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        pc.state.dispatch('receiveRemoteMedia');\n\t        that.fire('connect', {\n\t            stream: evt.stream,\n\t            element: that.incomingMedia.element\n\t        });\n\t    }\n\t\n\t    /**\n\t     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n\t     *\n\t     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n\t     * Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n\t     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n\t     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n\t     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getStats\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n\t     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n\t     * receive them on the client-side.\n\t     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n\t     * @returns {Promise<object>|null}\n\t     */\n\t    function getStats(params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    }\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\t\n\t    /**\n\t     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getLocalElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getLocalElement = function () {\n\t        return that.outgoingMedia.element;\n\t    };\n\t\n\t    /**\n\t     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getRemoteElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getRemoteElement = function () {\n\t        return that.incomingMedia.element;\n\t    };\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n\t     * after answer() so we cannot use this method to set up the DirectConnection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.doAddVideo\n\t     * @todo Find out when we can stop deleting TURN servers\n\t     * @private\n\t     * @param {object} params\n\t     * @param {object} [params.constraints] - getUserMedia constraints\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @fires respoke.Call#requesting-media\n\t     * @fires respoke.Call#allow\n\t     * @fires respoke.Call#local-stream-received\n\t     */\n\t    function doAddVideo(params) {\n\t        log.debug('Call.doAddVideo');\n\t        saveParameters(params);\n\t        that.outgoingMedia.listen('requesting-media', function waitAllowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.Call#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, true);\n\t        that.outgoingMedia.listen('allow', function allowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t             * without asking the user to approve it.\n\t             * @event respoke.Call#allow\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('allow');\n\t            pc.state.dispatch('approve', {\n\t                previewLocalMedia: previewLocalMedia\n\t            });\n\t        }, true);\n\t        that.outgoingMedia.listen('stream-received', function streamReceivedHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            defMedia.resolve(that.outgoingMedia);\n\t            pc.addStream(evt.stream);\n\t            pc.state.dispatch('receiveLocalMedia');\n\t            if (typeof previewLocalMedia === 'function') {\n\t                previewLocalMedia(evt.element, that);\n\t            }\n\t\n\t            /**\n\t             * @event respoke.Call#local-stream-received\n\t             * @type {respoke.Event}\n\t             * @property {Element} element\n\t             * @property {respoke.LocalMedia} stream\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('local-stream-received', {\n\t                element: evt.element,\n\t                stream: that.outgoingMedia\n\t            });\n\t        }, true);\n\t        that.outgoingMedia.listen('error', function errorHandler(evt) {\n\t            pc.state.dispatch('reject', {reason: 'media stream error'});\n\t            pc.report.callStoppedReason = evt.reason;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('error', {\n\t                reason: evt.reason\n\t            });\n\t        });\n\t\n\t        that.outgoingMedia.start();\n\t        return that.outgoingMedia;\n\t    }\n\t\n\t    /**\n\t     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n\t     * If audio is not desired, pass {audio: false}.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=true]\n\t     * @param {object} [params.constraints] - getUserMedia constraints, indicating the media being requested is\n\t     * an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addVideo = function (params) {\n\t        log.debug('Call.addVideo');\n\t        params = params || {};\n\t        params.constraints = params.constraints || {video: true, audio: true};\n\t        params.constraints.audio = typeof params.audio === 'boolean' ? params.audio : params.constraints.audio;\n\t        params.constraints.video = typeof params.video === 'boolean' ? params.video : params.constraints.video;\n\t        params.instanceId = instanceId;\n\t\n\t        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n\t            doAddVideo(params);\n\t        } else { // we're the caller and need to see if we can modify\n\t            pc.startModify({\n\t                constraints: params.constraints\n\t            });\n\t            defModify = Q.defer();\n\t            defModify.promise.then(function modifyAccepted() {\n\t                doAddVideo(params);\n\t            });\n\t        }\n\t        return defModify.promise;\n\t    };\n\t\n\t    /**\n\t     * Add an audio stream to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addAudio\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=false]\n\t     * @param {object} [params.constraints] - getUserMedia constraints, indicating the media being requested is\n\t     * an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addAudio = function (params) {\n\t        params = params || {};\n\t        params.constraints = params.constraints || {video: false, audio: true};\n\t        params.constraints.video = typeof params.constraints.video === 'boolean' ?\n\t            params.constraints.video : false;\n\t        params.constraints.audio = typeof params.audio === 'boolean' ? params.audio : params.constraints.audio;\n\t        params.constraints.video = typeof params.video === 'boolean' ? params.video : params.constraints.video;\n\t        return that.addVideo(params);\n\t    };\n\t\n\t    /**\n\t     * Get the direct connection on this call, if it exists.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getDirectConnection\n\t     */\n\t    that.getDirectConnection = function () {\n\t        return directConnection || null;\n\t    };\n\t\n\t    /**\n\t     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.removeDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     */\n\t    that.removeDirectConnection = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.removeDirectConnection');\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            directConnection.close({skipRemove: true});\n\t        }\n\t\n\t        if (!that.hasMedia()) {\n\t            log.debug('Hanging up because there are no local streams.');\n\t            that.hangup();\n\t            return;\n\t        }\n\t\n\t        if (params.skipModify === true) {\n\t            return;\n\t        }\n\t\n\t        pc.startModify({\n\t            directConnection: false\n\t        });\n\t        defModify = Q.defer();\n\t        defModify.promise.done(function onModifySuccess() {\n\t            defMedia.resolve();\n\t            defModify = undefined;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     */\n\t    that.addDirectConnection = function (params) {\n\t        log.debug('Call.addDirectConnection');\n\t        pc.startModify({\n\t            directConnection: true\n\t        });\n\t        defModify = Q.defer();\n\t        return defModify.promise.then(function onModifySuccess() {\n\t            return actuallyAddDirectConnection(params);\n\t        }, function onModifyError(err) {\n\t            throw err;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.actuallyAddDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     * @fires respoke.Client#direct-connection\n\t     * @fires respoke.Call#direct-connection\n\t     */\n\t    function actuallyAddDirectConnection(params) {\n\t        log.debug('Call.actuallyAddDirectConnection', params);\n\t        params = params || {};\n\t        defMedia.promise.then(params.onSuccess, params.onError);\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            if (defMedia.promise.isPending()) {\n\t                defMedia.resolve(directConnection);\n\t            } else {\n\t                log.warn(\"Not creating a new direct connection.\");\n\t            }\n\t            return defMedia.promise;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.pc = pc;\n\t        params.call = that;\n\t\n\t        directConnection = respoke.DirectConnection(params);\n\t\n\t        directConnection.listen('close', function closeHandler() {\n\t            if (!that.hasMedia()) {\n\t                log.debug('Hanging up because there are no local streams.');\n\t                that.hangup();\n\t            } else {\n\t                if (directConnection && directConnection.isActive()) {\n\t                    that.removeDirectConnection({skipModify: true});\n\t                }\n\t            }\n\t        }, true);\n\t\n\t        directConnection.listen('accept', function acceptHandler() {\n\t            if (pc.state.caller === false) {\n\t                log.debug('Answering as a result of approval.');\n\t            } else {\n\t                defMedia.resolve(directConnection);\n\t            }\n\t        }, true);\n\t\n\t        directConnection.listen('open', function openHandler() {\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }, true);\n\t\n\t        directConnection.listen('error', function errorHandler(err) {\n\t            defMedia.reject(new Error(err));\n\t        }, true);\n\t\n\t        that.remoteEndpoint.directConnection = directConnection;\n\t\n\t        /**\n\t         * This event is fired when the local end of the directConnection is available. It still will not be\n\t         * ready to send and receive messages until the 'open' event fires.\n\t         * @event respoke.Call#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\t\n\t        /**\n\t         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n\t         * to another endpoint.  If the user wishes to allow the direct connection, calling\n\t         * evt.directConnection.accept() will allow the connection to be set up.\n\t         * @event respoke.Client#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @private\n\t         */\n\t        client.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\t\n\t        if (pc.state.caller === true) {\n\t            directConnection.accept();\n\t        }\n\t\n\t        return defMedia.promise;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * Close the direct connection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.closeDirectConnection\n\t     */\n\t    that.closeDirectConnection = function () {\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @param {object} params\n\t     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.hangup = function (params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        params = params || {};\n\t        params.reason = params.reason || \"hangup method called.\";\n\t        pc.state.dispatch('hangup', params);\n\t    };\n\t    that.hangup = respoke.once(that.hangup);\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n\t     * handler added to the state machine via `once`.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @private\n\t     */\n\t    var doHangup = function () {\n\t        log.debug('hangup', that.caller);\n\t\n\t        that.outgoingMedia.stop();\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            directConnection.close();\n\t            that.remoteEndpoint.directConnection = null;\n\t            directConnection.ignore();\n\t            directConnection = null;\n\t        }\n\t\n\t        if (pc) {\n\t            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n\t        }\n\t\n\t        /**\n\t         * This event is fired when the call has hung up.\n\t         * @event respoke.Call#hangup\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('hangup', {\n\t            reason: pc.state.hangupReason || \"No reason specified.\"\n\t        });\n\t\n\t        pc.state.ignore();\n\t        pc.ignore();\n\t        that.ignore();\n\t        pc = null;\n\t    };\n\t    doHangup = respoke.once(doHangup);\n\t\n\t    /**\n\t     * Expose hangup as reject for approve/reject workflow.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.reject\n\t     * @param {object} params\n\t     */\n\t    that.reject = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n\t    };\n\t\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        // TODO: make this look for remote streams, too. Want to make this handle one-way media calls.\n\t        return !!(pc && pc.isActive() && (\n\t            (that.outgoingMedia.hasMedia()) ||\n\t            (directConnection && directConnection.isActive())\n\t        ));\n\t    };\n\t\n\t    /**\n\t     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenOffer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     * @fires respoke.Call#modify\n\t     */\n\t    function listenOffer(evt) {\n\t        log.debug('listenOffer', evt.signal);\n\t        var info = {};\n\t\n\t        that.sessionId = evt.signal.sessionId;\n\t        pc.state.listen('connecting:entry', function () {\n\t            if (!pc.state.caller) {\n\t                pc.processOffer(evt.signal.sessionDescription);\n\t            }\n\t        });\n\t\n\t        if (pc.state.isModifying()) {\n\t            if (pc.state.needDirectConnection === true) {\n\t                info.directConnection = directConnection;\n\t            } else if (pc.state.needDirectConnection === false) {\n\t                // Nothing\n\t            } else {\n\t                info.call = that;\n\t                info.constraints = callSettings.constraints;\n\t            }\n\t            /**\n\t             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n\t             * describes the media the other side has added. In this case, call.approve() must be called in order\n\t             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n\t             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n\t             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n\t             * call.\n\t             * @event respoke.Call#modify\n\t             * @type {respoke.Event}\n\t             * @property {object} [constraints]\n\t             * @property {boolean} [directConnection]\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('modify', info);\n\t        }\n\t\n\t        pc.state.dispatch('receiveOffer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenModify\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        log.debug('Call.listenModify', evt);\n\t        if (evt.signal.action === 'initiate') {\n\t            defModify = Q.defer();\n\t            pc.state.dispatch('modify', {receive: true});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Set up state and media for the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyAccept\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function onModifyAccept(evt) {\n\t        pc.state.dispatch('accept');\n\t\n\t        if (evt.signal.action !== 'initiate') {\n\t            defModify.resolve(); // resolved later for callee\n\t            defModify = undefined;\n\t            return;\n\t        }\n\t\n\t        // callee only from here down\n\t\n\t        // init the directConnection if necessary. We don't need to do anything with\n\t        // audio or video right now.\n\t        if (evt.signal.directConnection === true) {\n\t            actuallyAddDirectConnection().done(function successHandler(dc) {\n\t                directConnection = dc;\n\t                directConnection.accept();\n\t            });\n\t        } else if (evt.signal.directConnection === false) {\n\t            if (directConnection) {\n\t                that.removeDirectConnection({skipModify: true});\n\t                defMedia.resolve(false);\n\t            }\n\t        }\n\t        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ? evt.signal.directConnection : null;\n\t        callSettings.constraints = evt.signal.constraints || callSettings.constraints;\n\t    }\n\t\n\t    /**\n\t     * Ignore the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyReject\n\t     * @param {respoke.Event} evt\n\t     * @param {Error} evt.err\n\t     * @private\n\t     */\n\t    function onModifyReject(evt) {\n\t        if (evt.signal.action !== 'initiate') {\n\t            defMedia.reject(evt.err);\n\t            defModify.reject(evt.err);\n\t            defModify = undefined;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * If video is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleVideo\n\t     */\n\t    that.toggleVideo = function () {\n\t        if (that.isActive()) {\n\t            if (!videoIsMuted) {\n\t                that.muteVideo();\n\t            } else {\n\t                that.unmuteVideo();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * If audio is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleAudio\n\t     */\n\t    that.toggleAudio = function () {\n\t        if (that.isActive()) {\n\t            if (!audioIsMuted) {\n\t                that.muteAudio();\n\t            } else {\n\t                that.unmuteAudio();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the call has media flowing.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hasMedia\n\t     * @returns {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        var local;\n\t        var remote;\n\t\n\t        if (!pc || !pc.getLocalStreams) {\n\t            // PeerConnection.init() has not been called yet\n\t            return false;\n\t        }\n\t\n\t        local = pc.getLocalStreams();\n\t        remote = pc.getRemoteStreams();\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            return true;\n\t        }\n\t\n\t        return (local.length > 0 || remote.length > 0);\n\t    };\n\t\n\t    /**\n\t     * Mute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteVideo();\n\t        videoIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.unmuteVideo();\n\t        videoIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Mute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (audioIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteAudio();\n\t        audioIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!audioIsMuted) {\n\t            return;\n\t        }\n\t\n\t        that.outgoingMedia.unmuteAudio();\n\t        audioIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Save the hangup reason and hang up.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenHangup\n\t     * @params {object} evt\n\t     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n\t     * @private\n\t     */\n\t    function listenHangup(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n\t        pc.state.receivedBye = true;\n\t        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n\t    }\n\t\n\t    pc.state.once('terminated:entry', function (evt) {\n\t        doHangup();\n\t    }, true);\n\t\n\t    that.listen('signal-offer', listenOffer, true);\n\t    that.listen('signal-hangup', listenHangup, true);\n\t    that.listen('signal-modify', listenModify, true);\n\t    pc.listen('modify-reject', onModifyReject, true);\n\t    pc.listen('modify-accept', onModifyAccept, true);\n\t    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n\t        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n\t            return;\n\t        }\n\t        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t            pc.addRemoteCandidate({candidate: candidate});\n\t        });\n\t    }, true);\n\t\n\t    if (pc.state.needDirectConnection !== true) {\n\t        pc.state.once('preparing:entry', function () {\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, the app should call evt.call.answer() to answer the call.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('call', {\n\t                endpoint: that.remoteEndpoint,\n\t                call: that\n\t            });\n\t        }, true);\n\t    }\n\t\n\t    pc.state.listen('idle:exit', function (evt) {\n\t        saveParameters(params);\n\t    });\n\t\n\t    pc.state.listen('preparing:entry', function (evt) {\n\t        init();\n\t\n\t        if (pc.state.caller === true) {\n\t            that.answer();\n\t        }\n\t    }, true);\n\t\n\t    signalingChannel.getTurnCredentials().then(function (result) {\n\t        if (!result) {\n\t            log.warn(\"Relay service not available.\");\n\t            callSettings.servers = {\n\t                iceServers: []\n\t            };\n\t        } else {\n\t            callSettings.servers = client.callSettings.servers;\n\t            callSettings.servers.iceServers = result;\n\t        }\n\t    }).fin(function () {\n\t        pc.state.dispatch('initiate', {\n\t            client: client,\n\t            caller: that.caller\n\t        });\n\t    }).done(null, function (err) {\n\t        // who cares\n\t    });\n\t\n\t    return that;\n\t}; // End respoke.Call\n\t\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Call.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.Call.statsSuccessHandler\n\t * @param {respoke.MediaStatsParser} statsParser\n\t */\n\t/**\n\t * Handle obtaining media successfully.\n\t * @callback respoke.Call.mediaSuccessHandler\n\t * @param {respoke.LocalMedia} localMedia\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to show the user their own video during a call. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element\n\t * @param {respoke.LocalMedia} evt.stream\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n\t * to show the user the other party's video during a call. This callback is called every time\n\t * respoke.Call#connect is fired.\n\t * @callback respoke.Call.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.Call#error.\n\t * @callback respoke.Call.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive notification the call has been hung up. This callback is called every time\n\t * respoke.Call#hangup is fired.\n\t * @callback respoke.Call.onHangup\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n\t * unmuted. This callback is called every time respoke.Call#mute is fired.\n\t * @callback respoke.Call.onMute\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n\t * @callback respoke.Call.onAnswer\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the user approves local media. This callback will be called whether or not the approval was based\n\t * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n\t * respoke.Call#approve is fired.\n\t * @callback respoke.Call.onApprove\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n\t * called every time respoke.Call#allow is fired.\n\t * @callback respoke.Call.onAllow\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n\t * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n\t * respoke.Call#requesting-media is fired.\n\t * @callback respoke.Call.onRequestingMedia\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n\t * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n\t * called every time respoke.Call#stats is fired.\n\t * @callback respoke.MediaStatsParser.statsHandler\n\t * @param {respoke.Event} evt\n\t * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n\t * @param {respoke.Call} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n\t * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n\t * Respoke will proceed without waiting for user input. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.previewLocalMedia\n\t * @param {object} element - the HTML5 Video element with the new stream attached.\n\t * @param {respoke.Call} call\n\t */\n\t/**\n\t * Receive the DirectConnection.\n\t * @callback respoke.Call.directConnectionSuccessHandler\n\t * @param {respoke.DirectConnection} directConnection\n\t */\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar log = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * WebRTC Call including getUserMedia, path and codec negotation, and call state.\n\t * @class respoke.LocalMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {object} params.callSettings\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local video attached to it.\n\t * @returns {respoke.LocalMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.LocalMedia';\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.getClient}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name element\n\t     * @type {Video}\n\t     */\n\t    that.element = params.element;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name videoIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var videoIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name audioIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var audioIsMuted = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name callSettings\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var callSettings = params.callSettings || {};\n\t    callSettings.constraints = params.constraints || callSettings.constraints;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = params.pc;\n\t    delete that.pc;\n\t    /**\n\t     * The local `MediaStream` from `getUserMedia()`.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name stream\n\t     * @private\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = null;\n\t\n\t    /**\n\t     * Save the local stream. Kick off SDP creation.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onReceiveUserMedia\n\t     * @private\n\t     * @param {RTCMediaStream} theStream\n\t     * @fires respoke.LocalMedia#stream-received\n\t     */\n\t    function onReceiveUserMedia(theStream) {\n\t        that.stream = theStream;\n\t        clearTimeout(allowTimer);\n\t        /**\n\t         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t         * without asking the user to approve it.\n\t         * @event respoke.LocalMedia#allow\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('allow');\n\t        log.debug('User gave permission to use media.');\n\t        log.debug('onReceiveUserMedia');\n\t\n\t        // This happens when we get an automatic hangup or reject from the other side.\n\t        if (pc === null) {\n\t            that.hangup({signal: false});\n\t            return;\n\t        }\n\t\n\t        that.element = params.element || that.element || document.createElement('video');\n\t\n\t        // This still needs some work. Using cached streams causes an unused video element to be passed\n\t        // back to the App. This is because we assume at the moment that only one local media video element\n\t        // will be needed. The first one passed back will contain media and the others will fake it. Media\n\t        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n\t        // and the implications of passing back a video element with no media attached.\n\t        if (respoke.streams[that.constraints]) {\n\t            respoke.streams[that.constraints].numPc += 1;\n\t            /**\n\t             * @event respoke.LocalMedia#stream-received\n\t             * @type {respoke.Event}\n\t             * @property {Element} element - the HTML5 Video element with the new stream attached.\n\t             * @property {RTCMediaStream} stream - the HTML5 Video stream\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('stream-received', {\n\t                element: that.element,\n\t                stream: that.stream\n\t            });\n\t        } else {\n\t            that.stream.numPc = 1;\n\t            respoke.streams[that.constraints] = that.stream;\n\t\n\t            that.stream.id = client.endpointId;\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\t\n\t            /**\n\t             * @event respoke.LocalMedia#stream-received\n\t             * @type {respoke.Event}\n\t             * @property {Element} element - the HTML5 Video element with the new stream attached.\n\t             * @property {RTCMediaStream} stream - the HTML5 Video stream\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('stream-received', {\n\t                element: that.element,\n\t                stream: that.stream\n\t            });\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.requestMedia\n\t     * @private\n\t     */\n\t    function requestMedia() {\n\t        log.debug('requestMedia');\n\t\n\t        that.constraints = callSettings.constraints;\n\t\n\t        if (!that.constraints) {\n\t            throw new Error('No constraints.');\n\t        }\n\t\n\t        if (respoke.streams[that.constraints]) {\n\t            log.debug('using old stream');\n\t            onReceiveUserMedia(respoke.streams[that.constraints]);\n\t            return;\n\t        }\n\t\n\t        try {\n\t            log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t            // TODO set respoke.streams[that.constraints] = true as a flag that we are already\n\t            // attempting to obtain this media so the race condition where gUM is called twice with\n\t            // the same constraints when calls are placed too quickly together doesn't occur.\n\t            allowTimer = setTimeout(function allowTimer() {\n\t                /**\n\t                 * The browser is asking for permission to access the User's media. This would be an ideal time\n\t                 * to modify the UI of the application so that the user notices the request for permissions\n\t                 * and approves it.\n\t                 * @event respoke.LocalMedia#requesting-media\n\t                 * @type {respoke.Event}\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.LocalMedia} target\n\t                 */\n\t                that.fire('requesting-media');\n\t            }, 500);\n\t            getUserMedia(callSettings.constraints, onReceiveUserMedia, onUserMediaError);\n\t        } catch (e) {\n\t            log.error(\"Couldn't get user media: \" + e.message);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Handle any error that comes up during the process of getting user media.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onUserMediaError\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onUserMediaError(p) {\n\t        log.debug('onUserMediaError');\n\t        if (p.code === 1) {\n\t            log.warn(\"Permission denied.\");\n\t            /**\n\t             * Indicate there has been an error obtaining media.\n\t             * @event respoke.LocalMedia#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('error', {error: 'Permission denied.'});\n\t        } else {\n\t            log.warn(p);\n\t            /**\n\t             * Indicate there has been an error obtaining media.\n\t             * @event respoke.LocalMedia#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('error', {error: p.code});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Mute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (videoIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t        videoIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!videoIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t        videoIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Mute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (audioIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t        audioIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!audioIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t        audioIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.stop\n\t     * @fires respoke.LocalMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\t\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.stop();\n\t            delete respoke.streams[that.constraints];\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * @event respoke.LocalMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending video.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending audio.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\t\n\t    /**\n\t     * Save and parse the SDP\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t    };\n\t\n\t    /**\n\t     * Parse the constraints\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(constraints);\n\t    };\n\t\n\t    /**\n\t     * Start the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.start\n\t     * @fires respoke.LocalMedia#start\n\t     * @private\n\t     */\n\t    that.start = function () {\n\t        requestMedia();\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.LocalMedia\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n\t * @private\n\t */\n\t\n\tvar log = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * Class for managing the remote media stream.\n\t * @class respoke.RemoteMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {object} params.callSettings\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote video attached to it.\n\t * @returns {respoke.RemoteMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.RemoteMedia';\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.getClient}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name element\n\t     * @type {Video}\n\t     */\n\t    that.element = params.videoRemoteElement;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name videoIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var videoIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name audioIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var audioIsMuted = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name callSettings\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var callSettings = params.callSettings || callSettings || {};\n\t    callSettings.constraints = params.constraints || callSettings.constraints;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = params.pc;\n\t    delete that.pc;\n\t    /**\n\t     * The remote `MediaStream`.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = null;\n\t\n\t    /**\n\t     * Mute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (videoIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t        videoIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!videoIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t        videoIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Mute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (audioIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t        audioIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!audioIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t        audioIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are receiving video.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are receiving audio.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\t\n\t    /**\n\t     * Save and parse the SDP\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t    };\n\t\n\t    /**\n\t     * Parse the constraints\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(constraints);\n\t    };\n\t\n\t    /**\n\t     * Save the media stream\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setStream\n\t     * @param {MediaStream} str\n\t     * @private\n\t     */\n\t    that.setStream = function (str) {\n\t        if (str) {\n\t            that.stream = str;\n\t            that.element = that.element || document.createElement('video');\n\t            attachMediaStream(that.element, that.stream);\n\t            that.element.autoplay = true;\n\t            setTimeout(that.element.play.bind(that.element));\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.stop\n\t     * @fires respoke.RemoteMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\t\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.stop();\n\t            delete respoke.streams[that.constraints];\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * @event respoke.RemoteMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\t\n\t    /**\n\t     * Mute local video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (videoIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t        videoIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute local video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!videoIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t        videoIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Mute local audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (audioIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t        audioIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute local audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!audioIsMuted) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t        audioIsMuted = false;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.RemoteMedia\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n\t *\n\t *  Use of this source code is governed by a BSD-style license\n\t *  that can be found in the LICENSE file in the root of the source\n\t *  tree.\n\t */\n\t\n\t/* More information about these options at jshint.com/docs/options */\n\t\n\t/* jshint browser: true, camelcase: true, curly: true, devel: true,\n\teqeqeq: true, forin: false, globalstrict: true, quotmark: single,\n\tundef: true, unused: strict */\n\t\n\t/* global mozRTCIceCandidate, mozRTCPeerConnection,\n\tmozRTCSessionDescription, webkitRTCPeerConnection */\n\t\n\t/* exported trace */\n\t\n\t'use strict';\n\t\n\tvar RTCPeerConnection = null;\n\tvar getUserMedia = null;\n\tvar attachMediaStream = null;\n\tvar reattachMediaStream = null;\n\tvar webrtcDetectedBrowser = null;\n\tvar webrtcDetectedVersion = null;\n\t\n\tfunction trace(text) {\n\t  // This function is used for logging.\n\t  if (text[text.length - 1] === '\\n') {\n\t    text = text.substring(0, text.length - 1);\n\t  }\n\t  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n\t}\n\t\n\tfunction maybeFixConfiguration(pcConfig) {\n\t  if (!pcConfig) {\n\t    return;\n\t  }\n\t  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n\t    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n\t      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n\t      delete pcConfig.iceServers[i].urls;\n\t    }\n\t  }\n\t}\n\t\n\tif (navigator.mozGetUserMedia) {\n\t  console.log('This appears to be Firefox');\n\t\n\t  webrtcDetectedBrowser = 'firefox';\n\t\n\t  webrtcDetectedVersion =\n\t    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\t\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is not supported in FF yet.\n\t    maybeFixConfiguration(pcConfig);\n\t    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\t\n\t  // The RTCSessionDescription object.\n\t  window.RTCSessionDescription = mozRTCSessionDescription;\n\t\n\t  // The RTCIceCandidate object.\n\t  window.RTCIceCandidate = mozRTCIceCandidate;\n\t\n\t  // getUserMedia shim (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\t\n\t  // Creates ICE server from the URL for FF.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create ICE server with STUN URL.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      if (webrtcDetectedVersion < 27) {\n\t        // Create iceServer with turn url.\n\t        // Ignore the transport parameter from TURN url for FF version <=27.\n\t        var turnUrlParts = url.split('?');\n\t        // Return null for createIceServer if transport=tcp.\n\t        if (turnUrlParts.length === 1 ||\n\t          turnUrlParts[1].indexOf('transport=udp') === 0) {\n\t          iceServer = {\n\t            'url': turnUrlParts[0],\n\t            'credential': password,\n\t            'username': username\n\t          };\n\t        }\n\t      } else {\n\t        // FF 27 and above supports transport parameters in TURN url,\n\t        // So passing in the full url to create iceServer.\n\t        iceServer = {\n\t          'url': url,\n\t          'credential': password,\n\t          'username': username\n\t        };\n\t      }\n\t    }\n\t    return iceServer;\n\t  };\n\t\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    // Use .url for FireFox.\n\t    for (var i = 0; i < urls.length; i++) {\n\t      var iceServer =\n\t        window.createIceServer(urls[i], username, password);\n\t      if (iceServer !== null) {\n\t        iceServers.push(iceServer);\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\t\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    console.log('Attaching media stream');\n\t    element.mozSrcObject = stream;\n\t  };\n\t\n\t  reattachMediaStream = function(to, from) {\n\t    console.log('Reattaching media stream');\n\t    to.mozSrcObject = from.mozSrcObject;\n\t  };\n\t\n\t} else if (navigator.webkitGetUserMedia) {\n\t  console.log('This appears to be Chrome');\n\t\n\t  webrtcDetectedBrowser = 'chrome';\n\t  // Temporary fix until crbug/374263 is fixed.\n\t  // Setting Chrome version to 999, if version is unavailable.\n\t  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\t  if (result !== null) {\n\t    webrtcDetectedVersion = parseInt(result[2], 10);\n\t  } else {\n\t    webrtcDetectedVersion = 999;\n\t  }\n\t\n\t  // Creates iceServer from the url for Chrome M33 and earlier.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create iceServer with stun url.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      // Chrome M28 & above uses below TURN format.\n\t      iceServer = {\n\t        'url': url,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    }\n\t    return iceServer;\n\t  };\n\t\n\t  // Creates iceServers from the urls for Chrome M34 and above.\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    if (webrtcDetectedVersion >= 34) {\n\t      // .urls is supported since Chrome M34.\n\t      iceServers = {\n\t        'urls': urls,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    } else {\n\t      for (var i = 0; i < urls.length; i++) {\n\t        var iceServer =\n\t          window.createIceServer(urls[i], username, password);\n\t        if (iceServer !== null) {\n\t          iceServers.push(iceServer);\n\t        }\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\t\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is supported since Chrome M34.\n\t    if (webrtcDetectedVersion < 34) {\n\t      maybeFixConfiguration(pcConfig);\n\t    }\n\t    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\t\n\t  // Get UserMedia (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\t\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    if (typeof element.srcObject !== 'undefined') {\n\t      element.srcObject = stream;\n\t    } else if (typeof element.mozSrcObject !== 'undefined') {\n\t      element.mozSrcObject = stream;\n\t    } else if (typeof element.src !== 'undefined') {\n\t      element.src = URL.createObjectURL(stream);\n\t    } else {\n\t      console.log('Error attaching stream to element.');\n\t    }\n\t  };\n\t\n\t  reattachMediaStream = function(to, from) {\n\t    to.src = from.src;\n\t  };\n\t} else {\n\t  console.log('Browser does not appear to be WebRTC-capable');\n\t}\n\t\n\t\n\twindow.RTCPeerConnection = RTCPeerConnection;\n\twindow.getUserMedia = getUserMedia;\n\twindow.attachMediaStream = attachMediaStream;\n\twindow.reattachMediaStream = reattachMediaStream;\n\twindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\n\twindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// vim:ts=4:sts=4:sw=4:\n\t/*!\n\t *\n\t * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n\t * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n\t *\n\t * With parts by Tyler Close\n\t * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n\t * at http://www.opensource.org/licenses/mit-license.html\n\t * Forked at ref_send.js version: 2009-05-11\n\t *\n\t * With parts by Mark Miller\n\t * Copyright (C) 2011 Google Inc.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t */\n\t\n\t(function (definition) {\n\t    // Turn off strict mode for this function so we can assign to global.Q\n\t    /* jshint strict: false */\n\t\n\t    // This file will function properly as a <script> tag, or a module\n\t    // using CommonJS and NodeJS or RequireJS module formats.  In\n\t    // Common/Node/RequireJS, the module exports the Q API and when\n\t    // executed as a simple <script>, it creates a Q global instead.\n\t\n\t    // Montage Require\n\t    if (typeof bootstrap === \"function\") {\n\t        bootstrap(\"promise\", definition);\n\t\n\t    // CommonJS\n\t    } else if (true) {\n\t        module.exports = definition();\n\t\n\t    // RequireJS\n\t    } else if (typeof define === \"function\" && define.amd) {\n\t        define(definition);\n\t\n\t    // SES (Secure EcmaScript)\n\t    } else if (typeof ses !== \"undefined\") {\n\t        if (!ses.ok()) {\n\t            return;\n\t        } else {\n\t            ses.makeQ = definition;\n\t        }\n\t\n\t    // <script>\n\t    } else {\n\t        Q = definition();\n\t    }\n\t\n\t})(function () {\n\t\"use strict\";\n\t\n\tvar hasStacks = false;\n\ttry {\n\t    throw new Error();\n\t} catch (e) {\n\t    hasStacks = !!e.stack;\n\t}\n\t\n\t// All code after this point will be filtered from stack traces reported\n\t// by Q.\n\tvar qStartingLine = captureLine();\n\tvar qFileName;\n\t\n\t// shims\n\t\n\t// used for fallback in \"allResolved\"\n\tvar noop = function () {};\n\t\n\t// Use the fastest possible means to execute a task in a future turn\n\t// of the event loop.\n\tvar nextTick =(function () {\n\t    // linked list of tasks (single, with head node)\n\t    var head = {task: void 0, next: null};\n\t    var tail = head;\n\t    var flushing = false;\n\t    var requestTick = void 0;\n\t    var isNodeJS = false;\n\t\n\t    function flush() {\n\t        /* jshint loopfunc: true */\n\t\n\t        while (head.next) {\n\t            head = head.next;\n\t            var task = head.task;\n\t            head.task = void 0;\n\t            var domain = head.domain;\n\t\n\t            if (domain) {\n\t                head.domain = void 0;\n\t                domain.enter();\n\t            }\n\t\n\t            try {\n\t                task();\n\t\n\t            } catch (e) {\n\t                if (isNodeJS) {\n\t                    // In node, uncaught exceptions are considered fatal errors.\n\t                    // Re-throw them synchronously to interrupt flushing!\n\t\n\t                    // Ensure continuation if the uncaught exception is suppressed\n\t                    // listening \"uncaughtException\" events (as domains does).\n\t                    // Continue in next event to avoid tick recursion.\n\t                    if (domain) {\n\t                        domain.exit();\n\t                    }\n\t                    setTimeout(flush, 0);\n\t                    if (domain) {\n\t                        domain.enter();\n\t                    }\n\t\n\t                    throw e;\n\t\n\t                } else {\n\t                    // In browsers, uncaught exceptions are not fatal.\n\t                    // Re-throw them asynchronously to avoid slow-downs.\n\t                    setTimeout(function() {\n\t                       throw e;\n\t                    }, 0);\n\t                }\n\t            }\n\t\n\t            if (domain) {\n\t                domain.exit();\n\t            }\n\t        }\n\t\n\t        flushing = false;\n\t    }\n\t\n\t    nextTick = function (task) {\n\t        tail = tail.next = {\n\t            task: task,\n\t            domain: isNodeJS && process.domain,\n\t            next: null\n\t        };\n\t\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t\n\t    if (typeof process !== \"undefined\" && process.nextTick) {\n\t        // Node.js before 0.9. Note that some fake-Node environments, like the\n\t        // Mocha test runner, introduce a `process` global without a `nextTick`.\n\t        isNodeJS = true;\n\t\n\t        requestTick = function () {\n\t            process.nextTick(flush);\n\t        };\n\t\n\t    } else if (typeof setImmediate === \"function\") {\n\t        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n\t        if (typeof window !== \"undefined\") {\n\t            requestTick = setImmediate.bind(window, flush);\n\t        } else {\n\t            requestTick = function () {\n\t                setImmediate(flush);\n\t            };\n\t        }\n\t\n\t    } else if (typeof MessageChannel !== \"undefined\") {\n\t        // modern browsers\n\t        // http://www.nonblocking.io/2011/06/windownexttick.html\n\t        var channel = new MessageChannel();\n\t        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n\t        // working message ports the first time a page loads.\n\t        channel.port1.onmessage = function () {\n\t            requestTick = requestPortTick;\n\t            channel.port1.onmessage = flush;\n\t            flush();\n\t        };\n\t        var requestPortTick = function () {\n\t            // Opera requires us to provide a message payload, regardless of\n\t            // whether we use it.\n\t            channel.port2.postMessage(0);\n\t        };\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t            requestPortTick();\n\t        };\n\t\n\t    } else {\n\t        // old browsers\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t        };\n\t    }\n\t\n\t    return nextTick;\n\t})();\n\t\n\t// Attempt to make generics safe in the face of downstream\n\t// modifications.\n\t// There is no situation where this is necessary.\n\t// If you need a security guarantee, these primordials need to be\n\t// deeply frozen anyway, and if you don’t need a security guarantee,\n\t// this is just plain paranoid.\n\t// However, this **might** have the nice side-effect of reducing the size of\n\t// the minified code by reducing x.call() to merely x()\n\t// See Mark Miller’s explanation of what this does.\n\t// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\tvar call = Function.call;\n\tfunction uncurryThis(f) {\n\t    return function () {\n\t        return call.apply(f, arguments);\n\t    };\n\t}\n\t// This is equivalent, but slower:\n\t// uncurryThis = Function_bind.bind(Function_bind.call);\n\t// http://jsperf.com/uncurrythis\n\t\n\tvar array_slice = uncurryThis(Array.prototype.slice);\n\t\n\tvar array_reduce = uncurryThis(\n\t    Array.prototype.reduce || function (callback, basis) {\n\t        var index = 0,\n\t            length = this.length;\n\t        // concerning the initial value, if one is not provided\n\t        if (arguments.length === 1) {\n\t            // seek to the first value in the array, accounting\n\t            // for the possibility that is is a sparse array\n\t            do {\n\t                if (index in this) {\n\t                    basis = this[index++];\n\t                    break;\n\t                }\n\t                if (++index >= length) {\n\t                    throw new TypeError();\n\t                }\n\t            } while (1);\n\t        }\n\t        // reduce\n\t        for (; index < length; index++) {\n\t            // account for the possibility that the array is sparse\n\t            if (index in this) {\n\t                basis = callback(basis, this[index], index);\n\t            }\n\t        }\n\t        return basis;\n\t    }\n\t);\n\t\n\tvar array_indexOf = uncurryThis(\n\t    Array.prototype.indexOf || function (value) {\n\t        // not a very good shim, but good enough for our one use of it\n\t        for (var i = 0; i < this.length; i++) {\n\t            if (this[i] === value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t);\n\t\n\tvar array_map = uncurryThis(\n\t    Array.prototype.map || function (callback, thisp) {\n\t        var self = this;\n\t        var collect = [];\n\t        array_reduce(self, function (undefined, value, index) {\n\t            collect.push(callback.call(thisp, value, index, self));\n\t        }, void 0);\n\t        return collect;\n\t    }\n\t);\n\t\n\tvar object_create = Object.create || function (prototype) {\n\t    function Type() { }\n\t    Type.prototype = prototype;\n\t    return new Type();\n\t};\n\t\n\tvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\t\n\tvar object_keys = Object.keys || function (object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t        if (object_hasOwnProperty(object, key)) {\n\t            keys.push(key);\n\t        }\n\t    }\n\t    return keys;\n\t};\n\t\n\tvar object_toString = uncurryThis(Object.prototype.toString);\n\t\n\tfunction isObject(value) {\n\t    return value === Object(value);\n\t}\n\t\n\t// generator related shims\n\t\n\t// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\tfunction isStopIteration(exception) {\n\t    return (\n\t        object_toString(exception) === \"[object StopIteration]\" ||\n\t        exception instanceof QReturnValue\n\t    );\n\t}\n\t\n\t// FIXME: Remove this helper and Q.return once ES6 generators are in\n\t// SpiderMonkey.\n\tvar QReturnValue;\n\tif (typeof ReturnValue !== \"undefined\") {\n\t    QReturnValue = ReturnValue;\n\t} else {\n\t    QReturnValue = function (value) {\n\t        this.value = value;\n\t    };\n\t}\n\t\n\t// long stack traces\n\t\n\tvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\t\n\tfunction makeStackTraceLong(error, promise) {\n\t    // If possible, transform the error stack trace by removing Node and Q\n\t    // cruft, then concatenating with the stack trace of `promise`. See #57.\n\t    if (hasStacks &&\n\t        promise.stack &&\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        error.stack &&\n\t        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n\t    ) {\n\t        var stacks = [];\n\t        for (var p = promise; !!p; p = p.source) {\n\t            if (p.stack) {\n\t                stacks.unshift(p.stack);\n\t            }\n\t        }\n\t        stacks.unshift(error.stack);\n\t\n\t        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n\t        error.stack = filterStackString(concatedStacks);\n\t    }\n\t}\n\t\n\tfunction filterStackString(stackString) {\n\t    var lines = stackString.split(\"\\n\");\n\t    var desiredLines = [];\n\t    for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i];\n\t\n\t        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n\t            desiredLines.push(line);\n\t        }\n\t    }\n\t    return desiredLines.join(\"\\n\");\n\t}\n\t\n\tfunction isNodeFrame(stackLine) {\n\t    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n\t           stackLine.indexOf(\"(node.js:\") !== -1;\n\t}\n\t\n\tfunction getFileNameAndLineNumber(stackLine) {\n\t    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n\t    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n\t    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\t    if (attempt1) {\n\t        return [attempt1[1], Number(attempt1[2])];\n\t    }\n\t\n\t    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\t    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\t    if (attempt2) {\n\t        return [attempt2[1], Number(attempt2[2])];\n\t    }\n\t\n\t    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\t    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\t    if (attempt3) {\n\t        return [attempt3[1], Number(attempt3[2])];\n\t    }\n\t}\n\t\n\tfunction isInternalFrame(stackLine) {\n\t    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\t\n\t    if (!fileNameAndLineNumber) {\n\t        return false;\n\t    }\n\t\n\t    var fileName = fileNameAndLineNumber[0];\n\t    var lineNumber = fileNameAndLineNumber[1];\n\t\n\t    return fileName === qFileName &&\n\t        lineNumber >= qStartingLine &&\n\t        lineNumber <= qEndingLine;\n\t}\n\t\n\t// discover own file name and line number range for filtering stack\n\t// traces\n\tfunction captureLine() {\n\t    if (!hasStacks) {\n\t        return;\n\t    }\n\t\n\t    try {\n\t        throw new Error();\n\t    } catch (e) {\n\t        var lines = e.stack.split(\"\\n\");\n\t        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n\t        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\t        if (!fileNameAndLineNumber) {\n\t            return;\n\t        }\n\t\n\t        qFileName = fileNameAndLineNumber[0];\n\t        return fileNameAndLineNumber[1];\n\t    }\n\t}\n\t\n\tfunction deprecate(callback, name, alternative) {\n\t    return function () {\n\t        if (typeof console !== \"undefined\" &&\n\t            typeof console.warn === \"function\") {\n\t            console.warn(name + \" is deprecated, use \" + alternative +\n\t                         \" instead.\", new Error(\"\").stack);\n\t        }\n\t        return callback.apply(callback, arguments);\n\t    };\n\t}\n\t\n\t// end of shims\n\t// beginning of real work\n\t\n\t/**\n\t * Constructs a promise for an immediate reference, passes promises through, or\n\t * coerces promises from different systems.\n\t * @param value immediate reference or promise\n\t */\n\tfunction Q(value) {\n\t    // If the object is already a Promise, return it directly.  This enables\n\t    // the resolve function to both be used to created references from objects,\n\t    // but to tolerably coerce non-promises to promises.\n\t    if (isPromise(value)) {\n\t        return value;\n\t    }\n\t\n\t    // assimilate thenables\n\t    if (isPromiseAlike(value)) {\n\t        return coerce(value);\n\t    } else {\n\t        return fulfill(value);\n\t    }\n\t}\n\tQ.resolve = Q;\n\t\n\t/**\n\t * Performs a task in a future turn of the event loop.\n\t * @param {Function} task\n\t */\n\tQ.nextTick = nextTick;\n\t\n\t/**\n\t * Controls whether or not long stack traces will be on\n\t */\n\tQ.longStackSupport = false;\n\t\n\t/**\n\t * Constructs a {promise, resolve, reject} object.\n\t *\n\t * `resolve` is a callback to invoke with a more resolved value for the\n\t * promise. To fulfill the promise, invoke `resolve` with any value that is\n\t * not a thenable. To reject the promise, invoke `resolve` with a rejected\n\t * thenable, or invoke `reject` with the reason directly. To resolve the\n\t * promise to another thenable, thus putting it in the same state, invoke\n\t * `resolve` with that other thenable.\n\t */\n\tQ.defer = defer;\n\tfunction defer() {\n\t    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n\t    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n\t    // element of the messages array is itself an array of complete arguments to\n\t    // forward to the resolved promise.  We coerce the resolution value to a\n\t    // promise using the `resolve` function because it handles both fully\n\t    // non-thenable values and other thenables gracefully.\n\t    var messages = [], progressListeners = [], resolvedPromise;\n\t\n\t    var deferred = object_create(defer.prototype);\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, operands) {\n\t        var args = array_slice(arguments);\n\t        if (messages) {\n\t            messages.push(args);\n\t            if (op === \"when\" && operands[1]) { // progress operand\n\t                progressListeners.push(operands[1]);\n\t            }\n\t        } else {\n\t            nextTick(function () {\n\t                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n\t            });\n\t        }\n\t    };\n\t\n\t    // XXX deprecated\n\t    promise.valueOf = function () {\n\t        if (messages) {\n\t            return promise;\n\t        }\n\t        var nearerValue = nearer(resolvedPromise);\n\t        if (isPromise(nearerValue)) {\n\t            resolvedPromise = nearerValue; // shorten chain\n\t        }\n\t        return nearerValue;\n\t    };\n\t\n\t    promise.inspect = function () {\n\t        if (!resolvedPromise) {\n\t            return { state: \"pending\" };\n\t        }\n\t        return resolvedPromise.inspect();\n\t    };\n\t\n\t    if (Q.longStackSupport && hasStacks) {\n\t        try {\n\t            throw new Error();\n\t        } catch (e) {\n\t            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n\t            // accessor around; that causes memory leaks as per GH-111. Just\n\t            // reify the stack trace as a string ASAP.\n\t            //\n\t            // At the same time, cut off the first line; it's always just\n\t            // \"[object Promise]\\n\", as per the `toString`.\n\t            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n\t        }\n\t    }\n\t\n\t    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n\t    // consolidating them into `become`, since otherwise we'd create new\n\t    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\t\n\t    function become(newPromise) {\n\t        resolvedPromise = newPromise;\n\t        promise.source = newPromise;\n\t\n\t        array_reduce(messages, function (undefined, message) {\n\t            nextTick(function () {\n\t                newPromise.promiseDispatch.apply(newPromise, message);\n\t            });\n\t        }, void 0);\n\t\n\t        messages = void 0;\n\t        progressListeners = void 0;\n\t    }\n\t\n\t    deferred.promise = promise;\n\t    deferred.resolve = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(Q(value));\n\t    };\n\t\n\t    deferred.fulfill = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(fulfill(value));\n\t    };\n\t    deferred.reject = function (reason) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(reject(reason));\n\t    };\n\t    deferred.notify = function (progress) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        array_reduce(progressListeners, function (undefined, progressListener) {\n\t            nextTick(function () {\n\t                progressListener(progress);\n\t            });\n\t        }, void 0);\n\t    };\n\t\n\t    return deferred;\n\t}\n\t\n\t/**\n\t * Creates a Node-style callback that will resolve or reject the deferred\n\t * promise.\n\t * @returns a nodeback\n\t */\n\tdefer.prototype.makeNodeResolver = function () {\n\t    var self = this;\n\t    return function (error, value) {\n\t        if (error) {\n\t            self.reject(error);\n\t        } else if (arguments.length > 2) {\n\t            self.resolve(array_slice(arguments, 1));\n\t        } else {\n\t            self.resolve(value);\n\t        }\n\t    };\n\t};\n\t\n\t/**\n\t * @param resolver {Function} a function that returns nothing and accepts\n\t * the resolve, reject, and notify functions for a deferred.\n\t * @returns a promise that may be resolved with the given resolve and reject\n\t * functions, or rejected by a thrown exception in resolver\n\t */\n\tQ.Promise = promise; // ES6\n\tQ.promise = promise;\n\tfunction promise(resolver) {\n\t    if (typeof resolver !== \"function\") {\n\t        throw new TypeError(\"resolver must be a function.\");\n\t    }\n\t    var deferred = defer();\n\t    try {\n\t        resolver(deferred.resolve, deferred.reject, deferred.notify);\n\t    } catch (reason) {\n\t        deferred.reject(reason);\n\t    }\n\t    return deferred.promise;\n\t}\n\t\n\tpromise.race = race; // ES6\n\tpromise.all = all; // ES6\n\tpromise.reject = reject; // ES6\n\tpromise.resolve = Q; // ES6\n\t\n\t// XXX experimental.  This method is a way to denote that a local value is\n\t// serializable and should be immediately dispatched to a remote upon request,\n\t// instead of passing a reference.\n\tQ.passByCopy = function (object) {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return object;\n\t};\n\t\n\tPromise.prototype.passByCopy = function () {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return this;\n\t};\n\t\n\t/**\n\t * If two promises eventually fulfill to the same value, promises that value,\n\t * but otherwise rejects.\n\t * @param x {Any*}\n\t * @param y {Any*}\n\t * @returns {Any*} a promise for x and y if they are the same, but a rejection\n\t * otherwise.\n\t *\n\t */\n\tQ.join = function (x, y) {\n\t    return Q(x).join(y);\n\t};\n\t\n\tPromise.prototype.join = function (that) {\n\t    return Q([this, that]).spread(function (x, y) {\n\t        if (x === y) {\n\t            // TODO: \"===\" should be Object.is or equiv\n\t            return x;\n\t        } else {\n\t            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n\t        }\n\t    });\n\t};\n\t\n\t/**\n\t * Returns a promise for the first of an array of promises to become fulfilled.\n\t * @param answers {Array[Any*]} promises to race\n\t * @returns {Any*} the first promise to be fulfilled\n\t */\n\tQ.race = race;\n\tfunction race(answerPs) {\n\t    return promise(function(resolve, reject) {\n\t        // Switch to this once we can assume at least ES5\n\t        // answerPs.forEach(function(answerP) {\n\t        //     Q(answerP).then(resolve, reject);\n\t        // });\n\t        // Use this in the meantime\n\t        for (var i = 0, len = answerPs.length; i < len; i++) {\n\t            Q(answerPs[i]).then(resolve, reject);\n\t        }\n\t    });\n\t}\n\t\n\tPromise.prototype.race = function () {\n\t    return this.then(Q.race);\n\t};\n\t\n\t/**\n\t * Constructs a Promise with a promise descriptor object and optional fallback\n\t * function.  The descriptor contains methods like when(rejected), get(name),\n\t * set(name, value), post(name, args), and delete(name), which all\n\t * return either a value, a promise for a value, or a rejection.  The fallback\n\t * accepts the operation name, a resolver, and any further arguments that would\n\t * have been forwarded to the appropriate method above had a method been\n\t * provided with the proper name.  The API makes no guarantees about the nature\n\t * of the returned object, apart from that it is usable whereever promises are\n\t * bought and sold.\n\t */\n\tQ.makePromise = Promise;\n\tfunction Promise(descriptor, fallback, inspect) {\n\t    if (fallback === void 0) {\n\t        fallback = function (op) {\n\t            return reject(new Error(\n\t                \"Promise does not support operation: \" + op\n\t            ));\n\t        };\n\t    }\n\t    if (inspect === void 0) {\n\t        inspect = function () {\n\t            return {state: \"unknown\"};\n\t        };\n\t    }\n\t\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, args) {\n\t        var result;\n\t        try {\n\t            if (descriptor[op]) {\n\t                result = descriptor[op].apply(promise, args);\n\t            } else {\n\t                result = fallback.call(promise, op, args);\n\t            }\n\t        } catch (exception) {\n\t            result = reject(exception);\n\t        }\n\t        if (resolve) {\n\t            resolve(result);\n\t        }\n\t    };\n\t\n\t    promise.inspect = inspect;\n\t\n\t    // XXX deprecated `valueOf` and `exception` support\n\t    if (inspect) {\n\t        var inspected = inspect();\n\t        if (inspected.state === \"rejected\") {\n\t            promise.exception = inspected.reason;\n\t        }\n\t\n\t        promise.valueOf = function () {\n\t            var inspected = inspect();\n\t            if (inspected.state === \"pending\" ||\n\t                inspected.state === \"rejected\") {\n\t                return promise;\n\t            }\n\t            return inspected.value;\n\t        };\n\t    }\n\t\n\t    return promise;\n\t}\n\t\n\tPromise.prototype.toString = function () {\n\t    return \"[object Promise]\";\n\t};\n\t\n\tPromise.prototype.then = function (fulfilled, rejected, progressed) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    var done = false;   // ensure the untrusted promise makes at most a\n\t                        // single call to one of the callbacks\n\t\n\t    function _fulfilled(value) {\n\t        try {\n\t            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n\t        } catch (exception) {\n\t            return reject(exception);\n\t        }\n\t    }\n\t\n\t    function _rejected(exception) {\n\t        if (typeof rejected === \"function\") {\n\t            makeStackTraceLong(exception, self);\n\t            try {\n\t                return rejected(exception);\n\t            } catch (newException) {\n\t                return reject(newException);\n\t            }\n\t        }\n\t        return reject(exception);\n\t    }\n\t\n\t    function _progressed(value) {\n\t        return typeof progressed === \"function\" ? progressed(value) : value;\n\t    }\n\t\n\t    nextTick(function () {\n\t        self.promiseDispatch(function (value) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_fulfilled(value));\n\t        }, \"when\", [function (exception) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_rejected(exception));\n\t        }]);\n\t    });\n\t\n\t    // Progress propagator need to be attached in the current tick.\n\t    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n\t        var newValue;\n\t        var threw = false;\n\t        try {\n\t            newValue = _progressed(value);\n\t        } catch (e) {\n\t            threw = true;\n\t            if (Q.onerror) {\n\t                Q.onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t\n\t        if (!threw) {\n\t            deferred.notify(newValue);\n\t        }\n\t    }]);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Registers an observer on a promise.\n\t *\n\t * Guarantees:\n\t *\n\t * 1. that fulfilled and rejected will be called only once.\n\t * 2. that either the fulfilled callback or the rejected callback will be\n\t *    called, but not both.\n\t * 3. that fulfilled and rejected will not be called in this turn.\n\t *\n\t * @param value      promise or immediate reference to observe\n\t * @param fulfilled  function to be called with the fulfilled value\n\t * @param rejected   function to be called with the rejection exception\n\t * @param progressed function to be called on any progress notifications\n\t * @return promise for the return value from the invoked callback\n\t */\n\tQ.when = when;\n\tfunction when(value, fulfilled, rejected, progressed) {\n\t    return Q(value).then(fulfilled, rejected, progressed);\n\t}\n\t\n\tPromise.prototype.thenResolve = function (value) {\n\t    return this.then(function () { return value; });\n\t};\n\t\n\tQ.thenResolve = function (promise, value) {\n\t    return Q(promise).thenResolve(value);\n\t};\n\t\n\tPromise.prototype.thenReject = function (reason) {\n\t    return this.then(function () { throw reason; });\n\t};\n\t\n\tQ.thenReject = function (promise, reason) {\n\t    return Q(promise).thenReject(reason);\n\t};\n\t\n\t/**\n\t * If an object is not a promise, it is as \"near\" as possible.\n\t * If a promise is rejected, it is as \"near\" as possible too.\n\t * If it’s a fulfilled promise, the fulfillment value is nearer.\n\t * If it’s a deferred promise and the deferred has been resolved, the\n\t * resolution is \"nearer\".\n\t * @param object\n\t * @returns most resolved (nearest) form of the object\n\t */\n\t\n\t// XXX should we re-do this?\n\tQ.nearer = nearer;\n\tfunction nearer(value) {\n\t    if (isPromise(value)) {\n\t        var inspected = value.inspect();\n\t        if (inspected.state === \"fulfilled\") {\n\t            return inspected.value;\n\t        }\n\t    }\n\t    return value;\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a promise.\n\t * Otherwise it is a fulfilled value.\n\t */\n\tQ.isPromise = isPromise;\n\tfunction isPromise(object) {\n\t    return isObject(object) &&\n\t        typeof object.promiseDispatch === \"function\" &&\n\t        typeof object.inspect === \"function\";\n\t}\n\t\n\tQ.isPromiseAlike = isPromiseAlike;\n\tfunction isPromiseAlike(object) {\n\t    return isObject(object) && typeof object.then === \"function\";\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a pending promise, meaning not\n\t * fulfilled or rejected.\n\t */\n\tQ.isPending = isPending;\n\tfunction isPending(object) {\n\t    return isPromise(object) && object.inspect().state === \"pending\";\n\t}\n\t\n\tPromise.prototype.isPending = function () {\n\t    return this.inspect().state === \"pending\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a value or fulfilled\n\t * promise.\n\t */\n\tQ.isFulfilled = isFulfilled;\n\tfunction isFulfilled(object) {\n\t    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n\t}\n\t\n\tPromise.prototype.isFulfilled = function () {\n\t    return this.inspect().state === \"fulfilled\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a rejected promise.\n\t */\n\tQ.isRejected = isRejected;\n\tfunction isRejected(object) {\n\t    return isPromise(object) && object.inspect().state === \"rejected\";\n\t}\n\t\n\tPromise.prototype.isRejected = function () {\n\t    return this.inspect().state === \"rejected\";\n\t};\n\t\n\t//// BEGIN UNHANDLED REJECTION TRACKING\n\t\n\t// This promise library consumes exceptions thrown in handlers so they can be\n\t// handled by a subsequent promise.  The exceptions get added to this array when\n\t// they are created, and removed when they are handled.  Note that in ES6 or\n\t// shimmed environments, this would naturally be a `Set`.\n\tvar unhandledReasons = [];\n\tvar unhandledRejections = [];\n\tvar trackUnhandledRejections = true;\n\t\n\tfunction resetUnhandledRejections() {\n\t    unhandledReasons.length = 0;\n\t    unhandledRejections.length = 0;\n\t\n\t    if (!trackUnhandledRejections) {\n\t        trackUnhandledRejections = true;\n\t    }\n\t}\n\t\n\tfunction trackRejection(promise, reason) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t\n\t    unhandledRejections.push(promise);\n\t    if (reason && typeof reason.stack !== \"undefined\") {\n\t        unhandledReasons.push(reason.stack);\n\t    } else {\n\t        unhandledReasons.push(\"(no stack) \" + reason);\n\t    }\n\t}\n\t\n\tfunction untrackRejection(promise) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t\n\t    var at = array_indexOf(unhandledRejections, promise);\n\t    if (at !== -1) {\n\t        unhandledRejections.splice(at, 1);\n\t        unhandledReasons.splice(at, 1);\n\t    }\n\t}\n\t\n\tQ.resetUnhandledRejections = resetUnhandledRejections;\n\t\n\tQ.getUnhandledReasons = function () {\n\t    // Make a copy so that consumers can't interfere with our internal state.\n\t    return unhandledReasons.slice();\n\t};\n\t\n\tQ.stopUnhandledRejectionTracking = function () {\n\t    resetUnhandledRejections();\n\t    trackUnhandledRejections = false;\n\t};\n\t\n\tresetUnhandledRejections();\n\t\n\t//// END UNHANDLED REJECTION TRACKING\n\t\n\t/**\n\t * Constructs a rejected promise.\n\t * @param reason value describing the failure\n\t */\n\tQ.reject = reject;\n\tfunction reject(reason) {\n\t    var rejection = Promise({\n\t        \"when\": function (rejected) {\n\t            // note that the error has been handled\n\t            if (rejected) {\n\t                untrackRejection(this);\n\t            }\n\t            return rejected ? rejected(reason) : this;\n\t        }\n\t    }, function fallback() {\n\t        return this;\n\t    }, function inspect() {\n\t        return { state: \"rejected\", reason: reason };\n\t    });\n\t\n\t    // Note that the reason has not been handled.\n\t    trackRejection(rejection, reason);\n\t\n\t    return rejection;\n\t}\n\t\n\t/**\n\t * Constructs a fulfilled promise for an immediate reference.\n\t * @param value immediate reference\n\t */\n\tQ.fulfill = fulfill;\n\tfunction fulfill(value) {\n\t    return Promise({\n\t        \"when\": function () {\n\t            return value;\n\t        },\n\t        \"get\": function (name) {\n\t            return value[name];\n\t        },\n\t        \"set\": function (name, rhs) {\n\t            value[name] = rhs;\n\t        },\n\t        \"delete\": function (name) {\n\t            delete value[name];\n\t        },\n\t        \"post\": function (name, args) {\n\t            // Mark Miller proposes that post with no name should apply a\n\t            // promised function.\n\t            if (name === null || name === void 0) {\n\t                return value.apply(void 0, args);\n\t            } else {\n\t                return value[name].apply(value, args);\n\t            }\n\t        },\n\t        \"apply\": function (thisp, args) {\n\t            return value.apply(thisp, args);\n\t        },\n\t        \"keys\": function () {\n\t            return object_keys(value);\n\t        }\n\t    }, void 0, function inspect() {\n\t        return { state: \"fulfilled\", value: value };\n\t    });\n\t}\n\t\n\t/**\n\t * Converts thenables to Q promises.\n\t * @param promise thenable promise\n\t * @returns a Q promise\n\t */\n\tfunction coerce(promise) {\n\t    var deferred = defer();\n\t    nextTick(function () {\n\t        try {\n\t            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n\t        } catch (exception) {\n\t            deferred.reject(exception);\n\t        }\n\t    });\n\t    return deferred.promise;\n\t}\n\t\n\t/**\n\t * Annotates an object such that it will never be\n\t * transferred away from this process over any promise\n\t * communication channel.\n\t * @param object\n\t * @returns promise a wrapping of that object that\n\t * additionally responds to the \"isDef\" message\n\t * without a rejection.\n\t */\n\tQ.master = master;\n\tfunction master(object) {\n\t    return Promise({\n\t        \"isDef\": function () {}\n\t    }, function fallback(op, args) {\n\t        return dispatch(object, op, args);\n\t    }, function () {\n\t        return Q(object).inspect();\n\t    });\n\t}\n\t\n\t/**\n\t * Spreads the values of a promised array of arguments into the\n\t * fulfillment callback.\n\t * @param fulfilled callback that receives variadic arguments from the\n\t * promised array\n\t * @param rejected callback that receives the exception if the promise\n\t * is rejected.\n\t * @returns a promise for the return value or thrown exception of\n\t * either callback.\n\t */\n\tQ.spread = spread;\n\tfunction spread(value, fulfilled, rejected) {\n\t    return Q(value).spread(fulfilled, rejected);\n\t}\n\t\n\tPromise.prototype.spread = function (fulfilled, rejected) {\n\t    return this.all().then(function (array) {\n\t        return fulfilled.apply(void 0, array);\n\t    }, rejected);\n\t};\n\t\n\t/**\n\t * The async function is a decorator for generator functions, turning\n\t * them into asynchronous generators.  Although generators are only part\n\t * of the newest ECMAScript 6 drafts, this code does not cause syntax\n\t * errors in older engines.  This code should continue to work and will\n\t * in fact improve over time as the language improves.\n\t *\n\t * ES6 generators are currently part of V8 version 3.19 with the\n\t * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n\t * for longer, but under an older Python-inspired form.  This function\n\t * works on both kinds of generators.\n\t *\n\t * Decorates a generator function such that:\n\t *  - it may yield promises\n\t *  - execution will continue when that promise is fulfilled\n\t *  - the value of the yield expression will be the fulfilled value\n\t *  - it returns a promise for the return value (when the generator\n\t *    stops iterating)\n\t *  - the decorated function returns a promise for the return value\n\t *    of the generator or the first rejected promise among those\n\t *    yielded.\n\t *  - if an error is thrown in the generator, it propagates through\n\t *    every following yield until it is caught, or until it escapes\n\t *    the generator function altogether, and is translated into a\n\t *    rejection for the promise returned by the decorated generator.\n\t */\n\tQ.async = async;\n\tfunction async(makeGenerator) {\n\t    return function () {\n\t        // when verb is \"send\", arg is a value\n\t        // when verb is \"throw\", arg is an exception\n\t        function continuer(verb, arg) {\n\t            var result;\n\t\n\t            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n\t            // engine that has a deployed base of browsers that support generators.\n\t            // However, SM's generators use the Python-inspired semantics of\n\t            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n\t            // like to make it possible to use generators in deployed browsers, so\n\t            // we also support Python-style generators.  At some point we can remove\n\t            // this block.\n\t\n\t            if (typeof StopIteration === \"undefined\") {\n\t                // ES6 Generators\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    return reject(exception);\n\t                }\n\t                if (result.done) {\n\t                    return result.value;\n\t                } else {\n\t                    return when(result.value, callback, errback);\n\t                }\n\t            } else {\n\t                // SpiderMonkey Generators\n\t                // FIXME: Remove this case when SM does ES6 generators.\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    if (isStopIteration(exception)) {\n\t                        return exception.value;\n\t                    } else {\n\t                        return reject(exception);\n\t                    }\n\t                }\n\t                return when(result, callback, errback);\n\t            }\n\t        }\n\t        var generator = makeGenerator.apply(this, arguments);\n\t        var callback = continuer.bind(continuer, \"next\");\n\t        var errback = continuer.bind(continuer, \"throw\");\n\t        return callback();\n\t    };\n\t}\n\t\n\t/**\n\t * The spawn function is a small wrapper around async that immediately\n\t * calls the generator and also ends the promise chain, so that any\n\t * unhandled errors are thrown instead of forwarded to the error\n\t * handler. This is useful because it's extremely common to run\n\t * generators at the top-level to work with libraries.\n\t */\n\tQ.spawn = spawn;\n\tfunction spawn(makeGenerator) {\n\t    Q.done(Q.async(makeGenerator)());\n\t}\n\t\n\t// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\t/**\n\t * Throws a ReturnValue exception to stop an asynchronous generator.\n\t *\n\t * This interface is a stop-gap measure to support generator return\n\t * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n\t * generators like Chromium 29, just use \"return\" in your generator\n\t * functions.\n\t *\n\t * @param value the return value for the surrounding generator\n\t * @throws ReturnValue exception with the value.\n\t * @example\n\t * // ES6 style\n\t * Q.async(function* () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      return foo + bar;\n\t * })\n\t * // Older SpiderMonkey style\n\t * Q.async(function () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      Q.return(foo + bar);\n\t * })\n\t */\n\tQ[\"return\"] = _return;\n\tfunction _return(value) {\n\t    throw new QReturnValue(value);\n\t}\n\t\n\t/**\n\t * The promised function decorator ensures that any promise arguments\n\t * are settled and passed as values (`this` is also settled and passed\n\t * as a value).  It will also ensure that the result of a function is\n\t * always a promise.\n\t *\n\t * @example\n\t * var add = Q.promised(function (a, b) {\n\t *     return a + b;\n\t * });\n\t * add(Q(a), Q(B));\n\t *\n\t * @param {function} callback The function to decorate\n\t * @returns {function} a function that has been decorated.\n\t */\n\tQ.promised = promised;\n\tfunction promised(callback) {\n\t    return function () {\n\t        return spread([this, all(arguments)], function (self, args) {\n\t            return callback.apply(self, args);\n\t        });\n\t    };\n\t}\n\t\n\t/**\n\t * sends a message to a value in a future turn\n\t * @param object* the recipient\n\t * @param op the name of the message operation, e.g., \"when\",\n\t * @param args further arguments to be forwarded to the operation\n\t * @returns result {Promise} a promise for the result of the operation\n\t */\n\tQ.dispatch = dispatch;\n\tfunction dispatch(object, op, args) {\n\t    return Q(object).dispatch(op, args);\n\t}\n\t\n\tPromise.prototype.dispatch = function (op, args) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    nextTick(function () {\n\t        self.promiseDispatch(deferred.resolve, op, args);\n\t    });\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Gets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to get\n\t * @return promise for the property value\n\t */\n\tQ.get = function (object, key) {\n\t    return Q(object).dispatch(\"get\", [key]);\n\t};\n\t\n\tPromise.prototype.get = function (key) {\n\t    return this.dispatch(\"get\", [key]);\n\t};\n\t\n\t/**\n\t * Sets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for object object\n\t * @param name      name of property to set\n\t * @param value     new value of property\n\t * @return promise for the return value\n\t */\n\tQ.set = function (object, key, value) {\n\t    return Q(object).dispatch(\"set\", [key, value]);\n\t};\n\t\n\tPromise.prototype.set = function (key, value) {\n\t    return this.dispatch(\"set\", [key, value]);\n\t};\n\t\n\t/**\n\t * Deletes a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to delete\n\t * @return promise for the return value\n\t */\n\tQ.del = // XXX legacy\n\tQ[\"delete\"] = function (object, key) {\n\t    return Q(object).dispatch(\"delete\", [key]);\n\t};\n\t\n\tPromise.prototype.del = // XXX legacy\n\tPromise.prototype[\"delete\"] = function (key) {\n\t    return this.dispatch(\"delete\", [key]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param value     a value to post, typically an array of\n\t *                  invocation arguments for promises that\n\t *                  are ultimately backed with `resolve` values,\n\t *                  as opposed to those backed with URLs\n\t *                  wherein the posted value can be any\n\t *                  JSON serializable object.\n\t * @return promise for the return value\n\t */\n\t// bound locally because it is used by other methods\n\tQ.mapply = // XXX As proposed by \"Redsandro\"\n\tQ.post = function (object, name, args) {\n\t    return Q(object).dispatch(\"post\", [name, args]);\n\t};\n\t\n\tPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.post = function (name, args) {\n\t    return this.dispatch(\"post\", [name, args]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param ...args   array of invocation arguments\n\t * @return promise for the return value\n\t */\n\tQ.send = // XXX Mark Miller's proposed parlance\n\tQ.mcall = // XXX As proposed by \"Redsandro\"\n\tQ.invoke = function (object, name /*...args*/) {\n\t    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n\t};\n\t\n\tPromise.prototype.send = // XXX Mark Miller's proposed parlance\n\tPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.invoke = function (name /*...args*/) {\n\t    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n\t};\n\t\n\t/**\n\t * Applies the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param args      array of application arguments\n\t */\n\tQ.fapply = function (object, args) {\n\t    return Q(object).dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\tPromise.prototype.fapply = function (args) {\n\t    return this.dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\t/**\n\t * Calls the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ[\"try\"] =\n\tQ.fcall = function (object /* ...args*/) {\n\t    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n\t};\n\t\n\tPromise.prototype.fcall = function (/*...args*/) {\n\t    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n\t};\n\t\n\t/**\n\t * Binds the promised function, transforming return values into a fulfilled\n\t * promise and thrown errors into a rejected one.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ.fbind = function (object /*...args*/) {\n\t    var promise = Q(object);\n\t    var args = array_slice(arguments, 1);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\tPromise.prototype.fbind = function (/*...args*/) {\n\t    var promise = this;\n\t    var args = array_slice(arguments);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\t\n\t/**\n\t * Requests the names of the owned properties of a promised\n\t * object in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @return promise for the keys of the eventually settled object\n\t */\n\tQ.keys = function (object) {\n\t    return Q(object).dispatch(\"keys\", []);\n\t};\n\t\n\tPromise.prototype.keys = function () {\n\t    return this.dispatch(\"keys\", []);\n\t};\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array.  If any of\n\t * the promises gets rejected, the whole array is rejected immediately.\n\t * @param {Array*} an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns a promise for an array of the corresponding values\n\t */\n\t// By Mark Miller\n\t// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\tQ.all = all;\n\tfunction all(promises) {\n\t    return when(promises, function (promises) {\n\t        var countDown = 0;\n\t        var deferred = defer();\n\t        array_reduce(promises, function (undefined, promise, index) {\n\t            var snapshot;\n\t            if (\n\t                isPromise(promise) &&\n\t                (snapshot = promise.inspect()).state === \"fulfilled\"\n\t            ) {\n\t                promises[index] = snapshot.value;\n\t            } else {\n\t                ++countDown;\n\t                when(\n\t                    promise,\n\t                    function (value) {\n\t                        promises[index] = value;\n\t                        if (--countDown === 0) {\n\t                            deferred.resolve(promises);\n\t                        }\n\t                    },\n\t                    deferred.reject,\n\t                    function (progress) {\n\t                        deferred.notify({ index: index, value: progress });\n\t                    }\n\t                );\n\t            }\n\t        }, void 0);\n\t        if (countDown === 0) {\n\t            deferred.resolve(promises);\n\t        }\n\t        return deferred.promise;\n\t    });\n\t}\n\t\n\tPromise.prototype.all = function () {\n\t    return all(this);\n\t};\n\t\n\t/**\n\t * Waits for all promises to be settled, either fulfilled or\n\t * rejected.  This is distinct from `all` since that would stop\n\t * waiting at the first rejection.  The promise returned by\n\t * `allResolved` will never be rejected.\n\t * @param promises a promise for an array (or an array) of promises\n\t * (or values)\n\t * @return a promise for an array of promises\n\t */\n\tQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\tfunction allResolved(promises) {\n\t    return when(promises, function (promises) {\n\t        promises = array_map(promises, Q);\n\t        return when(all(array_map(promises, function (promise) {\n\t            return when(promise, noop, noop);\n\t        })), function () {\n\t            return promises;\n\t        });\n\t    });\n\t}\n\t\n\tPromise.prototype.allResolved = function () {\n\t    return allResolved(this);\n\t};\n\t\n\t/**\n\t * @see Promise#allSettled\n\t */\n\tQ.allSettled = allSettled;\n\tfunction allSettled(promises) {\n\t    return Q(promises).allSettled();\n\t}\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array of their states (as\n\t * returned by `inspect`) when they have all settled.\n\t * @param {Array[Any*]} values an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns {Array[State]} an array of states for the respective values.\n\t */\n\tPromise.prototype.allSettled = function () {\n\t    return this.then(function (promises) {\n\t        return all(array_map(promises, function (promise) {\n\t            promise = Q(promise);\n\t            function regardless() {\n\t                return promise.inspect();\n\t            }\n\t            return promise.then(regardless, regardless);\n\t        }));\n\t    });\n\t};\n\t\n\t/**\n\t * Captures the failure of a promise, giving an oportunity to recover\n\t * with a callback.  If the given promise is fulfilled, the returned\n\t * promise is fulfilled.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to fulfill the returned promise if the\n\t * given promise is rejected\n\t * @returns a promise for the return value of the callback\n\t */\n\tQ.fail = // XXX legacy\n\tQ[\"catch\"] = function (object, rejected) {\n\t    return Q(object).then(void 0, rejected);\n\t};\n\t\n\tPromise.prototype.fail = // XXX legacy\n\tPromise.prototype[\"catch\"] = function (rejected) {\n\t    return this.then(void 0, rejected);\n\t};\n\t\n\t/**\n\t * Attaches a listener that can respond to progress notifications from a\n\t * promise's originating deferred. This listener receives the exact arguments\n\t * passed to ``deferred.notify``.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to receive any progress notifications\n\t * @returns the given promise, unchanged\n\t */\n\tQ.progress = progress;\n\tfunction progress(object, progressed) {\n\t    return Q(object).then(void 0, void 0, progressed);\n\t}\n\t\n\tPromise.prototype.progress = function (progressed) {\n\t    return this.then(void 0, void 0, progressed);\n\t};\n\t\n\t/**\n\t * Provides an opportunity to observe the settling of a promise,\n\t * regardless of whether the promise is fulfilled or rejected.  Forwards\n\t * the resolution to the returned promise when the callback is done.\n\t * The callback can return a promise to defer completion.\n\t * @param {Any*} promise\n\t * @param {Function} callback to observe the resolution of the given\n\t * promise, takes no arguments.\n\t * @returns a promise for the resolution of the given promise when\n\t * ``fin`` is done.\n\t */\n\tQ.fin = // XXX legacy\n\tQ[\"finally\"] = function (object, callback) {\n\t    return Q(object)[\"finally\"](callback);\n\t};\n\t\n\tPromise.prototype.fin = // XXX legacy\n\tPromise.prototype[\"finally\"] = function (callback) {\n\t    callback = Q(callback);\n\t    return this.then(function (value) {\n\t        return callback.fcall().then(function () {\n\t            return value;\n\t        });\n\t    }, function (reason) {\n\t        // TODO attempt to recycle the rejection with \"this\".\n\t        return callback.fcall().then(function () {\n\t            throw reason;\n\t        });\n\t    });\n\t};\n\t\n\t/**\n\t * Terminates a chain of promises, forcing rejections to be\n\t * thrown as exceptions.\n\t * @param {Any*} promise at the end of a chain of promises\n\t * @returns nothing\n\t */\n\tQ.done = function (object, fulfilled, rejected, progress) {\n\t    return Q(object).done(fulfilled, rejected, progress);\n\t};\n\t\n\tPromise.prototype.done = function (fulfilled, rejected, progress) {\n\t    var onUnhandledError = function (error) {\n\t        // forward to a future turn so that ``when``\n\t        // does not catch it and turn it into a rejection.\n\t        nextTick(function () {\n\t            makeStackTraceLong(error, promise);\n\t            if (Q.onerror) {\n\t                Q.onerror(error);\n\t            } else {\n\t                throw error;\n\t            }\n\t        });\n\t    };\n\t\n\t    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\t    var promise = fulfilled || rejected || progress ?\n\t        this.then(fulfilled, rejected, progress) :\n\t        this;\n\t\n\t    if (typeof process === \"object\" && process && process.domain) {\n\t        onUnhandledError = process.domain.bind(onUnhandledError);\n\t    }\n\t\n\t    promise.then(void 0, onUnhandledError);\n\t};\n\t\n\t/**\n\t * Causes a promise to be rejected if it does not get fulfilled before\n\t * some milliseconds time out.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds timeout\n\t * @param {String} custom error message (optional)\n\t * @returns a promise for the resolution of the given promise if it is\n\t * fulfilled before the timeout, otherwise rejected.\n\t */\n\tQ.timeout = function (object, ms, message) {\n\t    return Q(object).timeout(ms, message);\n\t};\n\t\n\tPromise.prototype.timeout = function (ms, message) {\n\t    var deferred = defer();\n\t    var timeoutId = setTimeout(function () {\n\t        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\n\t    }, ms);\n\t\n\t    this.then(function (value) {\n\t        clearTimeout(timeoutId);\n\t        deferred.resolve(value);\n\t    }, function (exception) {\n\t        clearTimeout(timeoutId);\n\t        deferred.reject(exception);\n\t    }, deferred.notify);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Returns a promise for the given value (or promised value), some\n\t * milliseconds after it resolved. Passes rejections immediately.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds\n\t * @returns a promise for the resolution of the given promise after milliseconds\n\t * time has elapsed since the resolution of the given promise.\n\t * If the given promise rejects, that is passed immediately.\n\t */\n\tQ.delay = function (object, timeout) {\n\t    if (timeout === void 0) {\n\t        timeout = object;\n\t        object = void 0;\n\t    }\n\t    return Q(object).delay(timeout);\n\t};\n\t\n\tPromise.prototype.delay = function (timeout) {\n\t    return this.then(function (value) {\n\t        var deferred = defer();\n\t        setTimeout(function () {\n\t            deferred.resolve(value);\n\t        }, timeout);\n\t        return deferred.promise;\n\t    });\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided as an array, and returns a promise.\n\t *\n\t *      Q.nfapply(FS.readFile, [__filename])\n\t *      .then(function (content) {\n\t *      })\n\t *\n\t */\n\tQ.nfapply = function (callback, args) {\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfapply = function (args) {\n\t    var deferred = defer();\n\t    var nodeArgs = array_slice(args);\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided individually, and returns a promise.\n\t * @example\n\t * Q.nfcall(FS.readFile, __filename)\n\t * .then(function (content) {\n\t * })\n\t *\n\t */\n\tQ.nfcall = function (callback /*...args*/) {\n\t    var args = array_slice(arguments, 1);\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfcall = function (/*...args*/) {\n\t    var nodeArgs = array_slice(arguments);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Wraps a NodeJS continuation passing function and returns an equivalent\n\t * version that returns a promise.\n\t * @example\n\t * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n\t * .then(console.log)\n\t * .done()\n\t */\n\tQ.nfbind =\n\tQ.denodeify = function (callback /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 1);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nfbind =\n\tPromise.prototype.denodeify = function (/*...args*/) {\n\t    var args = array_slice(arguments);\n\t    args.unshift(this);\n\t    return Q.denodeify.apply(void 0, args);\n\t};\n\t\n\tQ.nbind = function (callback, thisp /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 2);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        function bound() {\n\t            return callback.apply(thisp, arguments);\n\t        }\n\t        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nbind = function (/*thisp, ...args*/) {\n\t    var args = array_slice(arguments, 0);\n\t    args.unshift(this);\n\t    return Q.nbind.apply(void 0, args);\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback with a given array of arguments, plus a provided callback.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param {Array} args arguments to pass to the method; the callback\n\t * will be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nmapply = // XXX As proposed by \"Redsandro\"\n\tQ.npost = function (object, name, args) {\n\t    return Q(object).npost(name, args);\n\t};\n\t\n\tPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.npost = function (name, args) {\n\t    var nodeArgs = array_slice(args || []);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback, forwarding the given variadic arguments, plus a provided\n\t * callback argument.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param ...args arguments to pass to the method; the callback will\n\t * be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tQ.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tQ.ninvoke = function (object, name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 2);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\tPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tPromise.prototype.ninvoke = function (name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 1);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * If a function would like to support both Node continuation-passing-style and\n\t * promise-returning-style, it can end its internal promise chain with\n\t * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n\t * elects to use a nodeback, the result will be sent there.  If they do not\n\t * pass a nodeback, they will receive the result promise.\n\t * @param object a result (or a promise for a result)\n\t * @param {Function} nodeback a Node.js-style callback\n\t * @returns either the promise or nothing\n\t */\n\tQ.nodeify = nodeify;\n\tfunction nodeify(object, nodeback) {\n\t    return Q(object).nodeify(nodeback);\n\t}\n\t\n\tPromise.prototype.nodeify = function (nodeback) {\n\t    if (nodeback) {\n\t        this.then(function (value) {\n\t            nextTick(function () {\n\t                nodeback(null, value);\n\t            });\n\t        }, function (error) {\n\t            nextTick(function () {\n\t                nodeback(error);\n\t            });\n\t        });\n\t    } else {\n\t        return this;\n\t    }\n\t};\n\t\n\t// All code before this point will be filtered from stack traces.\n\tvar qEndingLine = captureLine();\n\t\n\treturn Q;\n\t\n\t});\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t * loglevel - https://github.com/pimterry/loglevel\r\n\t *\r\n\t * Copyright (c) 2013 Tim Perry\r\n\t * Licensed under the MIT license.\r\n\t */\r\n\t\r\n\t;(function (undefined) {\r\n\t    var undefinedType = \"undefined\";\r\n\t    \r\n\t    (function (name, definition) {\r\n\t        if (true) {\r\n\t            module.exports = definition();\r\n\t        } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n\t            define(definition);\r\n\t        } else {\r\n\t            this[name] = definition();\r\n\t        }\r\n\t    }('log', function () {\r\n\t        var self = {};\r\n\t        var noop = function() {};\r\n\t\r\n\t        function realMethod(methodName) {\r\n\t            if (typeof console === undefinedType) {\r\n\t                return noop;\r\n\t            } else if (console[methodName] === undefined) {\r\n\t                return boundToConsole(console, 'log') || noop;\r\n\t            } else {\r\n\t                return boundToConsole(console, methodName);\r\n\t            }\r\n\t        }\r\n\t\r\n\t        function boundToConsole(console, methodName) {\r\n\t            var method = console[methodName];\r\n\t            if (method.bind === undefined) {\r\n\t                if (Function.prototype.bind === undefined) {\r\n\t                    return function() {\r\n\t                        method.apply(console, arguments);\r\n\t                    };\r\n\t                } else {\r\n\t                    return Function.prototype.bind.call(console[methodName], console);\r\n\t                }\r\n\t            } else {\r\n\t                return console[methodName].bind(console);\r\n\t            }\r\n\t        }\r\n\t\r\n\t        var logMethods = [\r\n\t            \"trace\",\r\n\t            \"debug\",\r\n\t            \"info\",\r\n\t            \"warn\",\r\n\t            \"error\"\r\n\t        ];\r\n\t\r\n\t        function clearMethods() {\r\n\t            for (var ii = 0; ii < logMethods.length; ii++) {\r\n\t                self[logMethods[ii]] = noop;\r\n\t            }\r\n\t        }\r\n\t\r\n\t        function cookiesAvailable() {\r\n\t            return (typeof window !== undefinedType &&\r\n\t                    window.document !== undefined &&\r\n\t                    window.document.cookie !== undefined);\r\n\t        }\r\n\t\r\n\t        function setLevelInCookie(levelNum) {\r\n\t            if (!cookiesAvailable()) {\r\n\t                return;\r\n\t            }\r\n\t\r\n\t            var levelName;\r\n\t\r\n\t            for (var key in self.levels) {\r\n\t                if (self.levels.hasOwnProperty(key) && self.levels[key] === levelNum) {\r\n\t                    levelName = key;\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t\r\n\t            if (levelName !== undefined) {\r\n\t                window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n\t            }\r\n\t        }\r\n\t\r\n\t        var cookieRegex = /loglevel=([^;]+)/;\r\n\t\r\n\t        function loadLevelFromCookie() {\r\n\t            var cookieLevel;\r\n\t\r\n\t            if (cookiesAvailable()) {\r\n\t                var cookieMatch = cookieRegex.exec(window.document.cookie) || [];\r\n\t                cookieLevel = cookieMatch[1];\r\n\t            }\r\n\t\r\n\t            self.setLevel(self.levels[cookieLevel] || self.levels.WARN);\r\n\t        }\r\n\t\r\n\t        /*\r\n\t         *\r\n\t         * Public API\r\n\t         *\r\n\t         */\r\n\t\r\n\t        self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n\t            \"ERROR\": 4, \"SILENT\": 5};\r\n\t\r\n\t        self.setLevel = function (level) {\r\n\t            if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n\t                setLevelInCookie(level);\r\n\t\r\n\t                if (level === self.levels.SILENT) {\r\n\t                    clearMethods();\r\n\t                    return;\r\n\t                } else if (typeof console === undefinedType) {\r\n\t                    clearMethods();\r\n\t                    throw \"No console available for logging\";\r\n\t                } else {\r\n\t                    for (var ii = 0; ii < logMethods.length; ii++) {\r\n\t                        var methodName = logMethods[ii];\r\n\t\r\n\t                        if (level <= self.levels[methodName.toUpperCase()]) {\r\n\t                            self[methodName] = realMethod(methodName);\r\n\t                        } else {\r\n\t                            self[methodName] = noop;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            } else if (typeof level === \"string\") {\r\n\t                self.setLevel(self.levels[level.toUpperCase()]);\r\n\t            } else {\r\n\t                throw \"log.setLevel() called with invalid level: \" + level;\r\n\t            }\r\n\t        };\r\n\t\r\n\t        self.enableAll = function() {\r\n\t            self.setLevel(self.levels.TRACE);\r\n\t        };\r\n\t\r\n\t        self.disableAll = function() {\r\n\t            self.setLevel(self.levels.SILENT);\r\n\t        };\r\n\t\r\n\t        try {\r\n\t            loadLevelFromCookie();\r\n\t        } catch (e) {\r\n\t            self.setLevel(self.levels.SILENT);\r\n\t        }\r\n\t        return self;\r\n\t    }));\r\n\t})();\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\t\n\tvar io = (false ? {} : module.exports);\n\t(function() {\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, global) {\n\t\n\t  /**\n\t   * IO namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var io = exports;\n\t\n\t  /**\n\t   * Socket.IO version\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.version = '0.9.17';\n\t\n\t  /**\n\t   * Protocol implemented.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.protocol = 1;\n\t\n\t  /**\n\t   * Available transports, these will be populated with the available transports\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.transports = [];\n\t\n\t  /**\n\t   * Keep track of jsonp callbacks.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.j = [];\n\t\n\t  /**\n\t   * Keep track of our io.Sockets\n\t   *\n\t   * @api private\n\t   */\n\t  io.sockets = {};\n\t\n\t\n\t  /**\n\t   * Manages connections to hosts.\n\t   *\n\t   * @param {String} uri\n\t   * @Param {Boolean} force creation of new socket (defaults to false)\n\t   * @api public\n\t   */\n\t\n\t  io.connect = function (host, details) {\n\t    var uri = io.util.parseUri(host)\n\t      , uuri\n\t      , socket;\n\t\n\t    if (global && global.location) {\n\t      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n\t      uri.host = uri.host || (global.document\n\t        ? global.document.domain : global.location.hostname);\n\t      uri.port = uri.port || global.location.port;\n\t    }\n\t\n\t    uuri = io.util.uniqueUri(uri);\n\t\n\t    var options = {\n\t        host: uri.host\n\t      , secure: 'https' == uri.protocol\n\t      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n\t      , query: uri.query || ''\n\t    };\n\t\n\t    io.util.merge(options, details);\n\t\n\t    if (options['force new connection'] || !io.sockets[uuri]) {\n\t      socket = new io.Socket(options);\n\t    }\n\t\n\t    if (!options['force new connection'] && socket) {\n\t      io.sockets[uuri] = socket;\n\t    }\n\t\n\t    socket = socket || io.sockets[uuri];\n\t\n\t    // if path is different from '' or /\n\t    return socket.of(uri.path.length > 1 ? uri.path : '');\n\t  };\n\t\n\t})('object' === typeof module ? module.exports : (this.io = {}), this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, global) {\n\t\n\t  /**\n\t   * Utilities namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var util = exports.util = {};\n\t\n\t  /**\n\t   * Parses an URI\n\t   *\n\t   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n\t   * @api public\n\t   */\n\t\n\t  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\t\n\t  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n\t               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n\t               'anchor'];\n\t\n\t  util.parseUri = function (str) {\n\t    var m = re.exec(str || '')\n\t      , uri = {}\n\t      , i = 14;\n\t\n\t    while (i--) {\n\t      uri[parts[i]] = m[i] || '';\n\t    }\n\t\n\t    return uri;\n\t  };\n\t\n\t  /**\n\t   * Produces a unique url that identifies a Socket.IO connection.\n\t   *\n\t   * @param {Object} uri\n\t   * @api public\n\t   */\n\t\n\t  util.uniqueUri = function (uri) {\n\t    var protocol = uri.protocol\n\t      , host = uri.host\n\t      , port = uri.port;\n\t\n\t    if ('document' in global) {\n\t      host = host || document.domain;\n\t      port = port || (protocol == 'https'\n\t        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n\t    } else {\n\t      host = host || 'localhost';\n\t\n\t      if (!port && protocol == 'https') {\n\t        port = 443;\n\t      }\n\t    }\n\t\n\t    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n\t  };\n\t\n\t  /**\n\t   * Mergest 2 query strings in to once unique query string\n\t   *\n\t   * @param {String} base\n\t   * @param {String} addition\n\t   * @api public\n\t   */\n\t\n\t  util.query = function (base, addition) {\n\t    var query = util.chunkQuery(base || '')\n\t      , components = [];\n\t\n\t    util.merge(query, util.chunkQuery(addition || ''));\n\t    for (var part in query) {\n\t      if (query.hasOwnProperty(part)) {\n\t        components.push(part + '=' + query[part]);\n\t      }\n\t    }\n\t\n\t    return components.length ? '?' + components.join('&') : '';\n\t  };\n\t\n\t  /**\n\t   * Transforms a querystring in to an object\n\t   *\n\t   * @param {String} qs\n\t   * @api public\n\t   */\n\t\n\t  util.chunkQuery = function (qs) {\n\t    var query = {}\n\t      , params = qs.split('&')\n\t      , i = 0\n\t      , l = params.length\n\t      , kv;\n\t\n\t    for (; i < l; ++i) {\n\t      kv = params[i].split('=');\n\t      if (kv[0]) {\n\t        query[kv[0]] = kv[1];\n\t      }\n\t    }\n\t\n\t    return query;\n\t  };\n\t\n\t  /**\n\t   * Executes the given function when the page is loaded.\n\t   *\n\t   *     io.util.load(function () { console.log('page loaded'); });\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\t\n\t  var pageLoaded = false;\n\t\n\t  util.load = function (fn) {\n\t    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n\t      return fn();\n\t    }\n\t\n\t    util.on(global, 'load', fn, false);\n\t  };\n\t\n\t  /**\n\t   * Adds an event.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  util.on = function (element, event, fn, capture) {\n\t    if (element.attachEvent) {\n\t      element.attachEvent('on' + event, fn);\n\t    } else if (element.addEventListener) {\n\t      element.addEventListener(event, fn, capture);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n\t   *\n\t   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n\t   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n\t   * @api private\n\t   */\n\t\n\t  util.request = function (xdomain) {\n\t\n\t    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n\t      return new XDomainRequest();\n\t    }\n\t\n\t    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n\t      return new XMLHttpRequest();\n\t    }\n\t\n\t    if (!xdomain) {\n\t      try {\n\t        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n\t      } catch(e) { }\n\t    }\n\t\n\t    return null;\n\t  };\n\t\n\t  /**\n\t   * XHR based transport constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  /**\n\t   * Change the internal pageLoaded value.\n\t   */\n\t\n\t  if ('undefined' != typeof window) {\n\t    util.load(function () {\n\t      pageLoaded = true;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Defers a function to ensure a spinner is not displayed by the browser\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\t\n\t  util.defer = function (fn) {\n\t    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n\t      return fn();\n\t    }\n\t\n\t    util.load(function () {\n\t      setTimeout(fn, 100);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Merges two objects.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.merge = function merge (target, additional, deep, lastseen) {\n\t    var seen = lastseen || []\n\t      , depth = typeof deep == 'undefined' ? 2 : deep\n\t      , prop;\n\t\n\t    for (prop in additional) {\n\t      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n\t        if (typeof target[prop] !== 'object' || !depth) {\n\t          target[prop] = additional[prop];\n\t          seen.push(additional[prop]);\n\t        } else {\n\t          util.merge(target[prop], additional[prop], depth - 1, seen);\n\t        }\n\t      }\n\t    }\n\t\n\t    return target;\n\t  };\n\t\n\t  /**\n\t   * Merges prototypes from objects\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.mixin = function (ctor, ctor2) {\n\t    util.merge(ctor.prototype, ctor2.prototype);\n\t  };\n\t\n\t  /**\n\t   * Shortcut for prototypical and static inheritance.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  util.inherit = function (ctor, ctor2) {\n\t    function f() {};\n\t    f.prototype = ctor2.prototype;\n\t    ctor.prototype = new f;\n\t  };\n\t\n\t  /**\n\t   * Checks if the given object is an Array.\n\t   *\n\t   *     io.util.isArray([]); // true\n\t   *     io.util.isArray({}); // false\n\t   *\n\t   * @param Object obj\n\t   * @api public\n\t   */\n\t\n\t  util.isArray = Array.isArray || function (obj) {\n\t    return Object.prototype.toString.call(obj) === '[object Array]';\n\t  };\n\t\n\t  /**\n\t   * Intersects values of two arrays into a third\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.intersect = function (arr, arr2) {\n\t    var ret = []\n\t      , longest = arr.length > arr2.length ? arr : arr2\n\t      , shortest = arr.length > arr2.length ? arr2 : arr;\n\t\n\t    for (var i = 0, l = shortest.length; i < l; i++) {\n\t      if (~util.indexOf(longest, shortest[i]))\n\t        ret.push(shortest[i]);\n\t    }\n\t\n\t    return ret;\n\t  };\n\t\n\t  /**\n\t   * Array indexOf compatibility.\n\t   *\n\t   * @see bit.ly/a5Dxa2\n\t   * @api public\n\t   */\n\t\n\t  util.indexOf = function (arr, o, i) {\n\t\n\t    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n\t         i < j && arr[i] !== o; i++) {}\n\t\n\t    return j <= i ? -1 : i;\n\t  };\n\t\n\t  /**\n\t   * Converts enumerables to array.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.toArray = function (enu) {\n\t    var arr = [];\n\t\n\t    for (var i = 0, l = enu.length; i < l; i++)\n\t      arr.push(enu[i]);\n\t\n\t    return arr;\n\t  };\n\t\n\t  /**\n\t   * UA / engines detection namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  util.ua = {};\n\t\n\t  /**\n\t   * Whether the UA supports CORS for XHR.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n\t    try {\n\t      var a = new XMLHttpRequest();\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t\n\t    return a.withCredentials != undefined;\n\t  })();\n\t\n\t  /**\n\t   * Detect webkit.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.webkit = 'undefined' != typeof navigator\n\t    && /webkit/i.test(navigator.userAgent);\n\t\n\t   /**\n\t   * Detect iPad/iPhone/iPod.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.iDevice = 'undefined' != typeof navigator\n\t      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\t\n\t})('undefined' != typeof io ? io : module.exports, this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.EventEmitter = EventEmitter;\n\t\n\t  /**\n\t   * Event emitter constructor.\n\t   *\n\t   * @api public.\n\t   */\n\t\n\t  function EventEmitter () {};\n\t\n\t  /**\n\t   * Adds a listener\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.on = function (name, fn) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\t\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = fn;\n\t    } else if (io.util.isArray(this.$events[name])) {\n\t      this.$events[name].push(fn);\n\t    } else {\n\t      this.$events[name] = [this.$events[name], fn];\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  /**\n\t   * Adds a volatile listener.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.once = function (name, fn) {\n\t    var self = this;\n\t\n\t    function on () {\n\t      self.removeListener(name, on);\n\t      fn.apply(this, arguments);\n\t    };\n\t\n\t    on.listener = fn;\n\t    this.on(name, on);\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Removes a listener.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.removeListener = function (name, fn) {\n\t    if (this.$events && this.$events[name]) {\n\t      var list = this.$events[name];\n\t\n\t      if (io.util.isArray(list)) {\n\t        var pos = -1;\n\t\n\t        for (var i = 0, l = list.length; i < l; i++) {\n\t          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n\t            pos = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (pos < 0) {\n\t          return this;\n\t        }\n\t\n\t        list.splice(pos, 1);\n\t\n\t        if (!list.length) {\n\t          delete this.$events[name];\n\t        }\n\t      } else if (list === fn || (list.listener && list.listener === fn)) {\n\t        delete this.$events[name];\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Removes all listeners for an event.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.removeAllListeners = function (name) {\n\t    if (name === undefined) {\n\t      this.$events = {};\n\t      return this;\n\t    }\n\t\n\t    if (this.$events && this.$events[name]) {\n\t      this.$events[name] = null;\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Gets all listeners for a certain event.\n\t   *\n\t   * @api publci\n\t   */\n\t\n\t  EventEmitter.prototype.listeners = function (name) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\t\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = [];\n\t    }\n\t\n\t    if (!io.util.isArray(this.$events[name])) {\n\t      this.$events[name] = [this.$events[name]];\n\t    }\n\t\n\t    return this.$events[name];\n\t  };\n\t\n\t  /**\n\t   * Emits an event.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.emit = function (name) {\n\t    if (!this.$events) {\n\t      return false;\n\t    }\n\t\n\t    var handler = this.$events[name];\n\t\n\t    if (!handler) {\n\t      return false;\n\t    }\n\t\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t\n\t    if ('function' == typeof handler) {\n\t      handler.apply(this, args);\n\t    } else if (io.util.isArray(handler)) {\n\t      var listeners = handler.slice();\n\t\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        listeners[i].apply(this, args);\n\t      }\n\t    } else {\n\t      return false;\n\t    }\n\t\n\t    return true;\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * Based on JSON2 (http://www.JSON.org/js.html).\n\t */\n\t\n\t(function (exports, nativeJSON) {\n\t  \"use strict\";\n\t\n\t  // use native JSON if it's available\n\t  if (nativeJSON && nativeJSON.parse){\n\t    return exports.JSON = {\n\t      parse: nativeJSON.parse\n\t    , stringify: nativeJSON.stringify\n\t    };\n\t  }\n\t\n\t  var JSON = exports.JSON = {};\n\t\n\t  function f(n) {\n\t      // Format integers to have at least two digits.\n\t      return n < 10 ? '0' + n : n;\n\t  }\n\t\n\t  function date(d, key) {\n\t    return isFinite(d.valueOf()) ?\n\t        d.getUTCFullYear()     + '-' +\n\t        f(d.getUTCMonth() + 1) + '-' +\n\t        f(d.getUTCDate())      + 'T' +\n\t        f(d.getUTCHours())     + ':' +\n\t        f(d.getUTCMinutes())   + ':' +\n\t        f(d.getUTCSeconds())   + 'Z' : null;\n\t  };\n\t\n\t  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      gap,\n\t      indent,\n\t      meta = {    // table of character substitutions\n\t          '\\b': '\\\\b',\n\t          '\\t': '\\\\t',\n\t          '\\n': '\\\\n',\n\t          '\\f': '\\\\f',\n\t          '\\r': '\\\\r',\n\t          '\"' : '\\\\\"',\n\t          '\\\\': '\\\\\\\\'\n\t      },\n\t      rep;\n\t\n\t\n\t  function quote(string) {\n\t\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape\n\t// sequences.\n\t\n\t      escapable.lastIndex = 0;\n\t      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t          var c = meta[a];\n\t          return typeof c === 'string' ? c :\n\t              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t      }) + '\"' : '\"' + string + '\"';\n\t  }\n\t\n\t\n\t  function str(key, holder) {\n\t\n\t// Produce a string from holder[key].\n\t\n\t      var i,          // The loop counter.\n\t          k,          // The member key.\n\t          v,          // The member value.\n\t          length,\n\t          mind = gap,\n\t          partial,\n\t          value = holder[key];\n\t\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\t\n\t      if (value instanceof Date) {\n\t          value = date(key);\n\t      }\n\t\n\t// If we were called with a replacer function, then call the replacer to\n\t// obtain a replacement value.\n\t\n\t      if (typeof rep === 'function') {\n\t          value = rep.call(holder, key, value);\n\t      }\n\t\n\t// What happens next depends on the value's type.\n\t\n\t      switch (typeof value) {\n\t      case 'string':\n\t          return quote(value);\n\t\n\t      case 'number':\n\t\n\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\n\t          return isFinite(value) ? String(value) : 'null';\n\t\n\t      case 'boolean':\n\t      case 'null':\n\t\n\t// If the value is a boolean or null, convert it to a string. Note:\n\t// typeof null does not produce 'null'. The case is included here in\n\t// the remote chance that this gets fixed someday.\n\t\n\t          return String(value);\n\t\n\t// If the type is 'object', we might be dealing with an object or an array or\n\t// null.\n\t\n\t      case 'object':\n\t\n\t// Due to a specification blunder in ECMAScript, typeof null is 'object',\n\t// so watch out for that case.\n\t\n\t          if (!value) {\n\t              return 'null';\n\t          }\n\t\n\t// Make an array to hold the partial results of stringifying this object value.\n\t\n\t          gap += indent;\n\t          partial = [];\n\t\n\t// Is the value an array?\n\t\n\t          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\n\t// The value is an array. Stringify every element. Use null as a placeholder\n\t// for non-JSON values.\n\t\n\t              length = value.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  partial[i] = str(i, value) || 'null';\n\t              }\n\t\n\t// Join all of the elements together, separated with commas, and wrap them in\n\t// brackets.\n\t\n\t              v = partial.length === 0 ? '[]' : gap ?\n\t                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n\t                  '[' + partial.join(',') + ']';\n\t              gap = mind;\n\t              return v;\n\t          }\n\t\n\t// If the replacer is an array, use it to select the members to be stringified.\n\t\n\t          if (rep && typeof rep === 'object') {\n\t              length = rep.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  if (typeof rep[i] === 'string') {\n\t                      k = rep[i];\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          } else {\n\t\n\t// Otherwise, iterate through all of the keys in the object.\n\t\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t\n\t// Join all of the member texts together, separated with commas,\n\t// and wrap them in braces.\n\t\n\t          v = partial.length === 0 ? '{}' : gap ?\n\t              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n\t              '{' + partial.join(',') + '}';\n\t          gap = mind;\n\t          return v;\n\t      }\n\t  }\n\t\n\t// If the JSON object does not yet have a stringify method, give it one.\n\t\n\t  JSON.stringify = function (value, replacer, space) {\n\t\n\t// The stringify method takes a value and an optional replacer, and an optional\n\t// space parameter, and returns a JSON text. The replacer can be a function\n\t// that can replace values, or an array of strings that will select the keys.\n\t// A default replacer method can be provided. Use of the space parameter can\n\t// produce text that is more easily readable.\n\t\n\t      var i;\n\t      gap = '';\n\t      indent = '';\n\t\n\t// If the space parameter is a number, make an indent string containing that\n\t// many spaces.\n\t\n\t      if (typeof space === 'number') {\n\t          for (i = 0; i < space; i += 1) {\n\t              indent += ' ';\n\t          }\n\t\n\t// If the space parameter is a string, it will be used as the indent string.\n\t\n\t      } else if (typeof space === 'string') {\n\t          indent = space;\n\t      }\n\t\n\t// If there is a replacer, it must be a function or an array.\n\t// Otherwise, throw an error.\n\t\n\t      rep = replacer;\n\t      if (replacer && typeof replacer !== 'function' &&\n\t              (typeof replacer !== 'object' ||\n\t              typeof replacer.length !== 'number')) {\n\t          throw new Error('JSON.stringify');\n\t      }\n\t\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\t\n\t      return str('', {'': value});\n\t  };\n\t\n\t// If the JSON object does not yet have a parse method, give it one.\n\t\n\t  JSON.parse = function (text, reviver) {\n\t  // The parse method takes a text and an optional reviver function, and returns\n\t  // a JavaScript value if the text is a valid JSON text.\n\t\n\t      var j;\n\t\n\t      function walk(holder, key) {\n\t\n\t  // The walk method is used to recursively walk the resulting structure so\n\t  // that modifications can be made.\n\t\n\t          var k, v, value = holder[key];\n\t          if (value && typeof value === 'object') {\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = walk(value, k);\n\t                      if (v !== undefined) {\n\t                          value[k] = v;\n\t                      } else {\n\t                          delete value[k];\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t          return reviver.call(holder, key, value);\n\t      }\n\t\n\t\n\t  // Parsing happens in four stages. In the first stage, we replace certain\n\t  // Unicode characters with escape sequences. JavaScript handles many characters\n\t  // incorrectly, either silently deleting them, or treating them as line endings.\n\t\n\t      text = String(text);\n\t      cx.lastIndex = 0;\n\t      if (cx.test(text)) {\n\t          text = text.replace(cx, function (a) {\n\t              return '\\\\u' +\n\t                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t          });\n\t      }\n\t\n\t  // In the second stage, we run the text against regular expressions that look\n\t  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n\t  // because they can cause invocation, and '=' because it can cause mutation.\n\t  // But just to be safe, we want to reject all unexpected forms.\n\t\n\t  // We split the second stage into 4 regexp operations in order to work around\n\t  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n\t  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n\t  // replace all simple value tokens with ']' characters. Third, we delete all\n\t  // open brackets that follow a colon or comma or that begin the text. Finally,\n\t  // we look to see that the remaining characters are only whitespace or ']' or\n\t  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\t\n\t      if (/^[\\],:{}\\s]*$/\n\t              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n\t                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n\t                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\t\n\t  // In the third stage we use the eval function to compile the text into a\n\t  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n\t  // in JavaScript: it can begin a block or an object literal. We wrap the text\n\t  // in parens to eliminate the ambiguity.\n\t\n\t          j = eval('(' + text + ')');\n\t\n\t  // In the optional fourth stage, we recursively walk the new structure, passing\n\t  // each name/value pair to a reviver function for possible transformation.\n\t\n\t          return typeof reviver === 'function' ?\n\t              walk({'': j}, '') : j;\n\t      }\n\t\n\t  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\t\n\t      throw new SyntaxError('JSON.parse');\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , typeof JSON !== 'undefined' ? JSON : undefined\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Parser namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var parser = exports.parser = {};\n\t\n\t  /**\n\t   * Packet types.\n\t   */\n\t\n\t  var packets = parser.packets = [\n\t      'disconnect'\n\t    , 'connect'\n\t    , 'heartbeat'\n\t    , 'message'\n\t    , 'json'\n\t    , 'event'\n\t    , 'ack'\n\t    , 'error'\n\t    , 'noop'\n\t  ];\n\t\n\t  /**\n\t   * Errors reasons.\n\t   */\n\t\n\t  var reasons = parser.reasons = [\n\t      'transport not supported'\n\t    , 'client not handshaken'\n\t    , 'unauthorized'\n\t  ];\n\t\n\t  /**\n\t   * Errors advice.\n\t   */\n\t\n\t  var advice = parser.advice = [\n\t      'reconnect'\n\t  ];\n\t\n\t  /**\n\t   * Shortcuts.\n\t   */\n\t\n\t  var JSON = io.JSON\n\t    , indexOf = io.util.indexOf;\n\t\n\t  /**\n\t   * Encodes a packet.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  parser.encodePacket = function (packet) {\n\t    var type = indexOf(packets, packet.type)\n\t      , id = packet.id || ''\n\t      , endpoint = packet.endpoint || ''\n\t      , ack = packet.ack\n\t      , data = null;\n\t\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n\t          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\t\n\t        if (reason !== '' || adv !== '')\n\t          data = reason + (adv !== '' ? ('+' + adv) : '');\n\t\n\t        break;\n\t\n\t      case 'message':\n\t        if (packet.data !== '')\n\t          data = packet.data;\n\t        break;\n\t\n\t      case 'event':\n\t        var ev = { name: packet.name };\n\t\n\t        if (packet.args && packet.args.length) {\n\t          ev.args = packet.args;\n\t        }\n\t\n\t        data = JSON.stringify(ev);\n\t        break;\n\t\n\t      case 'json':\n\t        data = JSON.stringify(packet.data);\n\t        break;\n\t\n\t      case 'connect':\n\t        if (packet.qs)\n\t          data = packet.qs;\n\t        break;\n\t\n\t      case 'ack':\n\t        data = packet.ackId\n\t          + (packet.args && packet.args.length\n\t              ? '+' + JSON.stringify(packet.args) : '');\n\t        break;\n\t    }\n\t\n\t    // construct packet with required fragments\n\t    var encoded = [\n\t        type\n\t      , id + (ack == 'data' ? '+' : '')\n\t      , endpoint\n\t    ];\n\t\n\t    // data fragment is optional\n\t    if (data !== null && data !== undefined)\n\t      encoded.push(data);\n\t\n\t    return encoded.join(':');\n\t  };\n\t\n\t  /**\n\t   * Encodes multiple messages (payload).\n\t   *\n\t   * @param {Array} messages\n\t   * @api private\n\t   */\n\t\n\t  parser.encodePayload = function (packets) {\n\t    var decoded = '';\n\t\n\t    if (packets.length == 1)\n\t      return packets[0];\n\t\n\t    for (var i = 0, l = packets.length; i < l; i++) {\n\t      var packet = packets[i];\n\t      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n\t    }\n\t\n\t    return decoded;\n\t  };\n\t\n\t  /**\n\t   * Decodes a packet\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\t\n\t  parser.decodePacket = function (data) {\n\t    var pieces = data.match(regexp);\n\t\n\t    if (!pieces) return {};\n\t\n\t    var id = pieces[2] || ''\n\t      , data = pieces[5] || ''\n\t      , packet = {\n\t            type: packets[pieces[1]]\n\t          , endpoint: pieces[4] || ''\n\t        };\n\t\n\t    // whether we need to acknowledge the packet\n\t    if (id) {\n\t      packet.id = id;\n\t      if (pieces[3])\n\t        packet.ack = 'data';\n\t      else\n\t        packet.ack = true;\n\t    }\n\t\n\t    // handle different packet types\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var pieces = data.split('+');\n\t        packet.reason = reasons[pieces[0]] || '';\n\t        packet.advice = advice[pieces[1]] || '';\n\t        break;\n\t\n\t      case 'message':\n\t        packet.data = data || '';\n\t        break;\n\t\n\t      case 'event':\n\t        try {\n\t          var opts = JSON.parse(data);\n\t          packet.name = opts.name;\n\t          packet.args = opts.args;\n\t        } catch (e) { }\n\t\n\t        packet.args = packet.args || [];\n\t        break;\n\t\n\t      case 'json':\n\t        try {\n\t          packet.data = JSON.parse(data);\n\t        } catch (e) { }\n\t        break;\n\t\n\t      case 'connect':\n\t        packet.qs = data || '';\n\t        break;\n\t\n\t      case 'ack':\n\t        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n\t        if (pieces) {\n\t          packet.ackId = pieces[1];\n\t          packet.args = [];\n\t\n\t          if (pieces[3]) {\n\t            try {\n\t              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n\t            } catch (e) { }\n\t          }\n\t        }\n\t        break;\n\t\n\t      case 'disconnect':\n\t      case 'heartbeat':\n\t        break;\n\t    };\n\t\n\t    return packet;\n\t  };\n\t\n\t  /**\n\t   * Decodes data payload. Detects multiple messages\n\t   *\n\t   * @return {Array} messages\n\t   * @api public\n\t   */\n\t\n\t  parser.decodePayload = function (data) {\n\t    // IE doesn't like data[i] for unicode chars, charAt works fine\n\t    if (data.charAt(0) == '\\ufffd') {\n\t      var ret = [];\n\t\n\t      for (var i = 1, length = ''; i < data.length; i++) {\n\t        if (data.charAt(i) == '\\ufffd') {\n\t          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n\t          i += Number(length) + 1;\n\t          length = '';\n\t        } else {\n\t          length += data.charAt(i);\n\t        }\n\t      }\n\t\n\t      return ret;\n\t    } else {\n\t      return [parser.decodePacket(data)];\n\t    }\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.Transport = Transport;\n\t\n\t  /**\n\t   * This is the transport template for all supported transport methods.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function Transport (socket, sessid) {\n\t    this.socket = socket;\n\t    this.sessid = sessid;\n\t  };\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(Transport, io.EventEmitter);\n\t\n\t\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.heartbeats = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Handles the response from the server. When a new response is received\n\t   * it will automatically update the timeout, decode the message and\n\t   * forwards the response to the onMessage function for further processing.\n\t   *\n\t   * @param {String} data Response from the server.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onData = function (data) {\n\t    this.clearCloseTimeout();\n\t\n\t    // If the connection in currently open (or in a reopening state) reset the close\n\t    // timeout since we have just received data. This check is necessary so\n\t    // that we don't reset the timeout on an explicitly disconnected connection.\n\t    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n\t      this.setCloseTimeout();\n\t    }\n\t\n\t    if (data !== '') {\n\t      // todo: we should only do decodePayload for xhr transports\n\t      var msgs = io.parser.decodePayload(data);\n\t\n\t      if (msgs && msgs.length) {\n\t        for (var i = 0, l = msgs.length; i < l; i++) {\n\t          this.onPacket(msgs[i]);\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handles packets.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onPacket = function (packet) {\n\t    this.socket.setHeartbeatTimeout();\n\t\n\t    if (packet.type == 'heartbeat') {\n\t      return this.onHeartbeat();\n\t    }\n\t\n\t    if (packet.type == 'connect' && packet.endpoint == '') {\n\t      this.onConnect();\n\t    }\n\t\n\t    if (packet.type == 'error' && packet.advice == 'reconnect') {\n\t      this.isOpen = false;\n\t    }\n\t\n\t    this.socket.onPacket(packet);\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sets close timeout\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.setCloseTimeout = function () {\n\t    if (!this.closeTimeout) {\n\t      var self = this;\n\t\n\t      this.closeTimeout = setTimeout(function () {\n\t        self.onDisconnect();\n\t      }, this.socket.closeTimeout);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onDisconnect = function () {\n\t    if (this.isOpen) this.close();\n\t    this.clearTimeouts();\n\t    this.socket.onDisconnect();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Called when transport connects\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onConnect = function () {\n\t    this.socket.onConnect();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Clears close timeout\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.clearCloseTimeout = function () {\n\t    if (this.closeTimeout) {\n\t      clearTimeout(this.closeTimeout);\n\t      this.closeTimeout = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Clear timeouts\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.clearTimeouts = function () {\n\t    this.clearCloseTimeout();\n\t\n\t    if (this.reopenTimeout) {\n\t      clearTimeout(this.reopenTimeout);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Sends a packet\n\t   *\n\t   * @param {Object} packet object.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.packet = function (packet) {\n\t    this.send(io.parser.encodePacket(packet));\n\t  };\n\t\n\t  /**\n\t   * Send the received heartbeat message back to server. So the server\n\t   * knows we are still connected.\n\t   *\n\t   * @param {String} heartbeat Heartbeat response from the server.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onHeartbeat = function (heartbeat) {\n\t    this.packet({ type: 'heartbeat' });\n\t  };\n\t\n\t  /**\n\t   * Called when the transport opens.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onOpen = function () {\n\t    this.isOpen = true;\n\t    this.clearCloseTimeout();\n\t    this.socket.onOpen();\n\t  };\n\t\n\t  /**\n\t   * Notifies the base when the connection with the Socket.IO server\n\t   * has been disconnected.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onClose = function () {\n\t    var self = this;\n\t\n\t    /* FIXME: reopen delay causing a infinit loop\n\t    this.reopenTimeout = setTimeout(function () {\n\t      self.open();\n\t    }, this.socket.options['reopen delay']);*/\n\t\n\t    this.isOpen = false;\n\t    this.socket.onClose();\n\t    this.onDisconnect();\n\t  };\n\t\n\t  /**\n\t   * Generates a connection url based on the Socket.IO URL Protocol.\n\t   * See <https://github.com/learnboost/socket.io-node/> for more details.\n\t   *\n\t   * @returns {String} Connection url\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.prepareUrl = function () {\n\t    var options = this.socket.options;\n\t\n\t    return this.scheme() + '://'\n\t      + options.host + ':' + options.port + '/'\n\t      + options.resource + '/' + io.protocol\n\t      + '/' + this.name + '/' + this.sessid;\n\t  };\n\t\n\t  /**\n\t   * Checks if the transport is ready to start a connection.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.ready = function (socket, fn) {\n\t    fn.call(this);\n\t  };\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.Socket = Socket;\n\t\n\t  /**\n\t   * Create a new `Socket.IO client` which can establish a persistent\n\t   * connection with a Socket.IO enabled server.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  function Socket (options) {\n\t    this.options = {\n\t        port: 80\n\t      , secure: false\n\t      , document: 'document' in global ? document : false\n\t      , resource: 'socket.io'\n\t      , transports: io.transports\n\t      , 'connect timeout': 10000\n\t      , 'try multiple transports': true\n\t      , 'reconnect': true\n\t      , 'reconnection delay': 500\n\t      , 'reconnection limit': Infinity\n\t      , 'reopen delay': 3000\n\t      , 'max reconnection attempts': 10\n\t      , 'sync disconnect on unload': false\n\t      , 'auto connect': true\n\t      , 'flash policy port': 10843\n\t      , 'manualFlush': false\n\t    };\n\t\n\t    io.util.merge(this.options, options);\n\t\n\t    this.connected = false;\n\t    this.open = false;\n\t    this.connecting = false;\n\t    this.reconnecting = false;\n\t    this.namespaces = {};\n\t    this.buffer = [];\n\t    this.doBuffer = false;\n\t\n\t    if (this.options['sync disconnect on unload'] &&\n\t        (!this.isXDomain() || io.util.ua.hasCORS)) {\n\t      var self = this;\n\t      io.util.on(global, 'beforeunload', function () {\n\t        self.disconnectSync();\n\t      }, false);\n\t    }\n\t\n\t    if (this.options['auto connect']) {\n\t      this.connect();\n\t    }\n\t};\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(Socket, io.EventEmitter);\n\t\n\t  /**\n\t   * Returns a namespace listener/emitter for this socket\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.of = function (name) {\n\t    if (!this.namespaces[name]) {\n\t      this.namespaces[name] = new io.SocketNamespace(this, name);\n\t\n\t      if (name !== '') {\n\t        this.namespaces[name].packet({ type: 'connect' });\n\t      }\n\t    }\n\t\n\t    return this.namespaces[name];\n\t  };\n\t\n\t  /**\n\t   * Emits the given event to the Socket and all namespaces\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.publish = function () {\n\t    this.emit.apply(this, arguments);\n\t\n\t    var nsp;\n\t\n\t    for (var i in this.namespaces) {\n\t      if (this.namespaces.hasOwnProperty(i)) {\n\t        nsp = this.of(i);\n\t        nsp.$emit.apply(nsp, arguments);\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Performs the handshake\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function empty () { };\n\t\n\t  Socket.prototype.handshake = function (fn) {\n\t    var self = this\n\t      , options = this.options;\n\t\n\t    function complete (data) {\n\t      if (data instanceof Error) {\n\t        self.connecting = false;\n\t        self.onError(data.message);\n\t      } else {\n\t        fn.apply(null, data.split(':'));\n\t      }\n\t    };\n\t\n\t    var url = [\n\t          'http' + (options.secure ? 's' : '') + ':/'\n\t        , options.host + ':' + options.port\n\t        , options.resource\n\t        , io.protocol\n\t        , io.util.query(this.options.query, 't=' + +new Date)\n\t      ].join('/');\n\t\n\t    if (this.isXDomain() && !io.util.ua.hasCORS) {\n\t      var insertAt = document.getElementsByTagName('script')[0]\n\t        , script = document.createElement('script');\n\t\n\t      script.src = url + '&jsonp=' + io.j.length;\n\t      insertAt.parentNode.insertBefore(script, insertAt);\n\t\n\t      io.j.push(function (data) {\n\t        complete(data);\n\t        script.parentNode.removeChild(script);\n\t      });\n\t    } else {\n\t      var xhr = io.util.request();\n\t\n\t      xhr.open('GET', url, true);\n\t      if (this.isXDomain()) {\n\t        xhr.withCredentials = true;\n\t      }\n\t      xhr.onreadystatechange = function () {\n\t        if (xhr.readyState == 4) {\n\t          xhr.onreadystatechange = empty;\n\t\n\t          if (xhr.status == 200) {\n\t            complete(xhr.responseText);\n\t          } else if (xhr.status == 403) {\n\t            self.onError(xhr.responseText);\n\t          } else {\n\t            self.connecting = false;            \n\t            !self.reconnecting && self.onError(xhr.responseText);\n\t          }\n\t        }\n\t      };\n\t      xhr.send(null);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Find an available transport based on the options supplied in the constructor.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.getTransport = function (override) {\n\t    var transports = override || this.transports, match;\n\t\n\t    for (var i = 0, transport; transport = transports[i]; i++) {\n\t      if (io.Transport[transport]\n\t        && io.Transport[transport].check(this)\n\t        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n\t        return new io.Transport[transport](this, this.sessionid);\n\t      }\n\t    }\n\t\n\t    return null;\n\t  };\n\t\n\t  /**\n\t   * Connects to the server.\n\t   *\n\t   * @param {Function} [fn] Callback.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.connect = function (fn) {\n\t    if (this.connecting) {\n\t      return this;\n\t    }\n\t\n\t    var self = this;\n\t    self.connecting = true;\n\t    \n\t    this.handshake(function (sid, heartbeat, close, transports) {\n\t      self.sessionid = sid;\n\t      self.closeTimeout = close * 1000;\n\t      self.heartbeatTimeout = heartbeat * 1000;\n\t      if(!self.transports)\n\t          self.transports = self.origTransports = (transports ? io.util.intersect(\n\t              transports.split(',')\n\t            , self.options.transports\n\t          ) : self.options.transports);\n\t\n\t      self.setHeartbeatTimeout();\n\t\n\t      function connect (transports){\n\t        if (self.transport) self.transport.clearTimeouts();\n\t\n\t        self.transport = self.getTransport(transports);\n\t        if (!self.transport) return self.publish('connect_failed');\n\t\n\t        // once the transport is ready\n\t        self.transport.ready(self, function () {\n\t          self.connecting = true;\n\t          self.publish('connecting', self.transport.name);\n\t          self.transport.open();\n\t\n\t          if (self.options['connect timeout']) {\n\t            self.connectTimeoutTimer = setTimeout(function () {\n\t              if (!self.connected) {\n\t                self.connecting = false;\n\t\n\t                if (self.options['try multiple transports']) {\n\t                  var remaining = self.transports;\n\t\n\t                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n\t                         self.transport.name) {}\n\t\n\t                    if (remaining.length){\n\t                      connect(remaining);\n\t                    } else {\n\t                      self.publish('connect_failed');\n\t                    }\n\t                }\n\t              }\n\t            }, self.options['connect timeout']);\n\t          }\n\t        });\n\t      }\n\t\n\t      connect(self.transports);\n\t\n\t      self.once('connect', function (){\n\t        clearTimeout(self.connectTimeoutTimer);\n\t\n\t        fn && typeof fn == 'function' && fn();\n\t      });\n\t    });\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Clears and sets a new heartbeat timeout using the value given by the\n\t   * server during the handshake.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.setHeartbeatTimeout = function () {\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t    if(this.transport && !this.transport.heartbeats()) return;\n\t\n\t    var self = this;\n\t    this.heartbeatTimeoutTimer = setTimeout(function () {\n\t      self.transport.onClose();\n\t    }, this.heartbeatTimeout);\n\t  };\n\t\n\t  /**\n\t   * Sends a message.\n\t   *\n\t   * @param {Object} data packet.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.packet = function (data) {\n\t    if (this.connected && !this.doBuffer) {\n\t      this.transport.packet(data);\n\t    } else {\n\t      this.buffer.push(data);\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sets buffer state\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.setBuffer = function (v) {\n\t    this.doBuffer = v;\n\t\n\t    if (!v && this.connected && this.buffer.length) {\n\t      if (!this.options['manualFlush']) {\n\t        this.flushBuffer();\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Flushes the buffer data over the wire.\n\t   * To be invoked manually when 'manualFlush' is set to true.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.flushBuffer = function() {\n\t    this.transport.payload(this.buffer);\n\t    this.buffer = [];\n\t  };\n\t  \n\t\n\t  /**\n\t   * Disconnect the established connect.\n\t   *\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.disconnect = function () {\n\t    if (this.connected || this.connecting) {\n\t      if (this.open) {\n\t        this.of('').packet({ type: 'disconnect' });\n\t      }\n\t\n\t      // handle disconnection immediately\n\t      this.onDisconnect('booted');\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnects the socket with a sync XHR.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.disconnectSync = function () {\n\t    // ensure disconnection\n\t    var xhr = io.util.request();\n\t    var uri = [\n\t        'http' + (this.options.secure ? 's' : '') + ':/'\n\t      , this.options.host + ':' + this.options.port\n\t      , this.options.resource\n\t      , io.protocol\n\t      , ''\n\t      , this.sessionid\n\t    ].join('/') + '/?disconnect=1';\n\t\n\t    xhr.open('GET', uri, false);\n\t    xhr.send(null);\n\t\n\t    // handle disconnection immediately\n\t    this.onDisconnect('booted');\n\t  };\n\t\n\t  /**\n\t   * Check if we need to use cross domain enabled transports. Cross domain would\n\t   * be a different port or different domain name.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.isXDomain = function () {\n\t\n\t    var port = global.location.port ||\n\t      ('https:' == global.location.protocol ? 443 : 80);\n\t\n\t    return this.options.host !== global.location.hostname \n\t      || this.options.port != port;\n\t  };\n\t\n\t  /**\n\t   * Called upon handshake.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onConnect = function () {\n\t    if (!this.connected) {\n\t      this.connected = true;\n\t      this.connecting = false;\n\t      if (!this.doBuffer) {\n\t        // make sure to flush the buffer\n\t        this.setBuffer(false);\n\t      }\n\t      this.emit('connect');\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when the transport opens\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onOpen = function () {\n\t    this.open = true;\n\t  };\n\t\n\t  /**\n\t   * Called when the transport closes.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onClose = function () {\n\t    this.open = false;\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t  };\n\t\n\t  /**\n\t   * Called when the transport first opens a connection\n\t   *\n\t   * @param text\n\t   */\n\t\n\t  Socket.prototype.onPacket = function (packet) {\n\t    this.of(packet.endpoint).onPacket(packet);\n\t  };\n\t\n\t  /**\n\t   * Handles an error.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onError = function (err) {\n\t    if (err && err.advice) {\n\t      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n\t        this.disconnect();\n\t        if (this.options.reconnect) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t\n\t    this.publish('error', err && err.reason ? err.reason : err);\n\t  };\n\t\n\t  /**\n\t   * Called when the transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onDisconnect = function (reason) {\n\t    var wasConnected = this.connected\n\t      , wasConnecting = this.connecting;\n\t\n\t    this.connected = false;\n\t    this.connecting = false;\n\t    this.open = false;\n\t\n\t    if (wasConnected || wasConnecting) {\n\t      this.transport.close();\n\t      this.transport.clearTimeouts();\n\t      if (wasConnected) {\n\t        this.publish('disconnect', reason);\n\t\n\t        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called upon reconnection.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.reconnect = function () {\n\t    this.reconnecting = true;\n\t    this.reconnectionAttempts = 0;\n\t    this.reconnectionDelay = this.options['reconnection delay'];\n\t\n\t    var self = this\n\t      , maxAttempts = this.options['max reconnection attempts']\n\t      , tryMultiple = this.options['try multiple transports']\n\t      , limit = this.options['reconnection limit'];\n\t\n\t    function reset () {\n\t      if (self.connected) {\n\t        for (var i in self.namespaces) {\n\t          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n\t              self.namespaces[i].packet({ type: 'connect' });\n\t          }\n\t        }\n\t        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n\t      }\n\t\n\t      clearTimeout(self.reconnectionTimer);\n\t\n\t      self.removeListener('connect_failed', maybeReconnect);\n\t      self.removeListener('connect', maybeReconnect);\n\t\n\t      self.reconnecting = false;\n\t\n\t      delete self.reconnectionAttempts;\n\t      delete self.reconnectionDelay;\n\t      delete self.reconnectionTimer;\n\t      delete self.redoTransports;\n\t\n\t      self.options['try multiple transports'] = tryMultiple;\n\t    };\n\t\n\t    function maybeReconnect () {\n\t      if (!self.reconnecting) {\n\t        return;\n\t      }\n\t\n\t      if (self.connected) {\n\t        return reset();\n\t      };\n\t\n\t      if (self.connecting && self.reconnecting) {\n\t        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n\t      }\n\t\n\t      if (self.reconnectionAttempts++ >= maxAttempts) {\n\t        if (!self.redoTransports) {\n\t          self.on('connect_failed', maybeReconnect);\n\t          self.options['try multiple transports'] = true;\n\t          self.transports = self.origTransports;\n\t          self.transport = self.getTransport();\n\t          self.redoTransports = true;\n\t          self.connect();\n\t        } else {\n\t          self.publish('reconnect_failed');\n\t          reset();\n\t        }\n\t      } else {\n\t        if (self.reconnectionDelay < limit) {\n\t          self.reconnectionDelay *= 2; // exponential back off\n\t        }\n\t\n\t        self.connect();\n\t        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n\t        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n\t      }\n\t    };\n\t\n\t    this.options['try multiple transports'] = false;\n\t    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\t\n\t    this.on('connect', maybeReconnect);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.SocketNamespace = SocketNamespace;\n\t\n\t  /**\n\t   * Socket namespace constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function SocketNamespace (socket, name) {\n\t    this.socket = socket;\n\t    this.name = name || '';\n\t    this.flags = {};\n\t    this.json = new Flag(this, 'json');\n\t    this.ackPackets = 0;\n\t    this.acks = {};\n\t  };\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(SocketNamespace, io.EventEmitter);\n\t\n\t  /**\n\t   * Copies emit since we override it\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\t\n\t  /**\n\t   * Creates a new namespace, by proxying the request to the socket. This\n\t   * allows us to use the synax as we do on the server.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  SocketNamespace.prototype.of = function () {\n\t    return this.socket.of.apply(this.socket, arguments);\n\t  };\n\t\n\t  /**\n\t   * Sends a packet.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.packet = function (packet) {\n\t    packet.endpoint = this.name;\n\t    this.socket.packet(packet);\n\t    this.flags = {};\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sends a message\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  SocketNamespace.prototype.send = function (data, fn) {\n\t    var packet = {\n\t        type: this.flags.json ? 'json' : 'message'\n\t      , data: data\n\t    };\n\t\n\t    if ('function' == typeof fn) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = true;\n\t      this.acks[packet.id] = fn;\n\t    }\n\t\n\t    return this.packet(packet);\n\t  };\n\t\n\t  /**\n\t   * Emits an event\n\t   *\n\t   * @api public\n\t   */\n\t  \n\t  SocketNamespace.prototype.emit = function (name) {\n\t    var args = Array.prototype.slice.call(arguments, 1)\n\t      , lastArg = args[args.length - 1]\n\t      , packet = {\n\t            type: 'event'\n\t          , name: name\n\t        };\n\t\n\t    if ('function' == typeof lastArg) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = 'data';\n\t      this.acks[packet.id] = lastArg;\n\t      args = args.slice(0, args.length - 1);\n\t    }\n\t\n\t    packet.args = args;\n\t\n\t    return this.packet(packet);\n\t  };\n\t\n\t  /**\n\t   * Disconnects the namespace\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.disconnect = function () {\n\t    if (this.name === '') {\n\t      this.socket.disconnect();\n\t    } else {\n\t      this.packet({ type: 'disconnect' });\n\t      this.$emit('disconnect');\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handles a packet\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.onPacket = function (packet) {\n\t    var self = this;\n\t\n\t    function ack () {\n\t      self.packet({\n\t          type: 'ack'\n\t        , args: io.util.toArray(arguments)\n\t        , ackId: packet.id\n\t      });\n\t    };\n\t\n\t    switch (packet.type) {\n\t      case 'connect':\n\t        this.$emit('connect');\n\t        break;\n\t\n\t      case 'disconnect':\n\t        if (this.name === '') {\n\t          this.socket.onDisconnect(packet.reason || 'booted');\n\t        } else {\n\t          this.$emit('disconnect', packet.reason);\n\t        }\n\t        break;\n\t\n\t      case 'message':\n\t      case 'json':\n\t        var params = ['message', packet.data];\n\t\n\t        if (packet.ack == 'data') {\n\t          params.push(ack);\n\t        } else if (packet.ack) {\n\t          this.packet({ type: 'ack', ackId: packet.id });\n\t        }\n\t\n\t        this.$emit.apply(this, params);\n\t        break;\n\t\n\t      case 'event':\n\t        var params = [packet.name].concat(packet.args);\n\t\n\t        if (packet.ack == 'data')\n\t          params.push(ack);\n\t\n\t        this.$emit.apply(this, params);\n\t        break;\n\t\n\t      case 'ack':\n\t        if (this.acks[packet.ackId]) {\n\t          this.acks[packet.ackId].apply(this, packet.args);\n\t          delete this.acks[packet.ackId];\n\t        }\n\t        break;\n\t\n\t      case 'error':\n\t        if (packet.advice){\n\t          this.socket.onError(packet);\n\t        } else {\n\t          if (packet.reason == 'unauthorized') {\n\t            this.$emit('connect_failed', packet.reason);\n\t          } else {\n\t            this.$emit('error', packet.reason);\n\t          }\n\t        }\n\t        break;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Flag interface.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function Flag (nsp, name) {\n\t    this.namespace = nsp;\n\t    this.name = name;\n\t  };\n\t\n\t  /**\n\t   * Send a message\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flag.prototype.send = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.send.apply(this.namespace, arguments);\n\t  };\n\t\n\t  /**\n\t   * Emit an event\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flag.prototype.emit = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.emit.apply(this.namespace, arguments);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.websocket = WS;\n\t\n\t  /**\n\t   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n\t   * persistent connection with the Socket.IO server. This transport will also\n\t   * be inherited by the FlashSocket fallback as it provides a API compatible\n\t   * polyfill for the WebSockets.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport}\n\t   * @api public\n\t   */\n\t\n\t  function WS (socket) {\n\t    io.Transport.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(WS, io.Transport);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.name = 'websocket';\n\t\n\t  /**\n\t   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n\t   * all the appropriate listeners to handle the responses from the server.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.open = function () {\n\t    var query = io.util.query(this.socket.options.query)\n\t      , self = this\n\t      , Socket\n\t\n\t\n\t    if (!Socket) {\n\t      Socket = global.MozWebSocket || global.WebSocket;\n\t    }\n\t\n\t    this.websocket = new Socket(this.prepareUrl() + query);\n\t\n\t    this.websocket.onopen = function () {\n\t      self.onOpen();\n\t      self.socket.setBuffer(false);\n\t    };\n\t    this.websocket.onmessage = function (ev) {\n\t      self.onData(ev.data);\n\t    };\n\t    this.websocket.onclose = function () {\n\t      self.onClose();\n\t      self.socket.setBuffer(true);\n\t    };\n\t    this.websocket.onerror = function (e) {\n\t      self.onError(e);\n\t    };\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Send a message to the Socket.IO server. The message will automatically be\n\t   * encoded in the correct message format.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n\t  // setTimeout, when they resume from sleeping the browser will crash if \n\t  // we don't allow the browser time to detect the socket has been closed\n\t  if (io.util.ua.iDevice) {\n\t    WS.prototype.send = function (data) {\n\t      var self = this;\n\t      setTimeout(function() {\n\t         self.websocket.send(data);\n\t      },0);\n\t      return this;\n\t    };\n\t  } else {\n\t    WS.prototype.send = function (data) {\n\t      this.websocket.send(data);\n\t      return this;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Payload\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  WS.prototype.payload = function (arr) {\n\t    for (var i = 0, l = arr.length; i < l; i++) {\n\t      this.packet(arr[i]);\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnect the established `WebSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.close = function () {\n\t    this.websocket.close();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handle the errors that `WebSocket` might be giving when we\n\t   * are attempting to connect or send messages.\n\t   *\n\t   * @param {Error} e The error.\n\t   * @api private\n\t   */\n\t\n\t  WS.prototype.onError = function (e) {\n\t    this.socket.onError(e);\n\t  };\n\t\n\t  /**\n\t   * Returns the appropriate scheme for the URI generation.\n\t   *\n\t   * @api private\n\t   */\n\t  WS.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'wss' : 'ws';\n\t  };\n\t\n\t  /**\n\t   * Checks if the browser has support for native `WebSockets` and that\n\t   * it's not the polyfill created for the FlashSocket transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  WS.check = function () {\n\t    return ('WebSocket' in global && !('__addTask' in WebSocket))\n\t          || 'MozWebSocket' in global;\n\t  };\n\t\n\t  /**\n\t   * Check if the `WebSocket` transport support cross domain communications.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  WS.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('websocket');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.flashsocket = Flashsocket;\n\t\n\t  /**\n\t   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n\t   * specification. It uses a .swf file to communicate with the server. If you want\n\t   * to serve the .swf file from a other server than where the Socket.IO script is\n\t   * coming from you need to use the insecure version of the .swf. More information\n\t   * about this can be found on the github page.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.websocket}\n\t   * @api public\n\t   */\n\t\n\t  function Flashsocket () {\n\t    io.Transport.websocket.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(Flashsocket, io.Transport.websocket);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.name = 'flashsocket';\n\t\n\t  /**\n\t   * Disconnect the established `FlashSocket` connection. This is done by adding a \n\t   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.open = function () {\n\t    var self = this\n\t      , args = arguments;\n\t\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.open.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t  \n\t  /**\n\t   * Sends a message to the Socket.IO server. This is done by adding a new\n\t   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.send = function () {\n\t    var self = this, args = arguments;\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.send.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established `FlashSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.close = function () {\n\t    WebSocket.__tasks.length = 0;\n\t    io.Transport.websocket.prototype.close.call(this);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * The WebSocket fall back needs to append the flash container to the body\n\t   * element, so we need to make sure we have access to it. Or defer the call\n\t   * until we are sure there is a body element.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  Flashsocket.prototype.ready = function (socket, fn) {\n\t    function init () {\n\t      var options = socket.options\n\t        , port = options['flash policy port']\n\t        , path = [\n\t              'http' + (options.secure ? 's' : '') + ':/'\n\t            , options.host + ':' + options.port\n\t            , options.resource\n\t            , 'static/flashsocket'\n\t            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n\t          ];\n\t\n\t      // Only start downloading the swf file when the checked that this browser\n\t      // actually supports it\n\t      if (!Flashsocket.loaded) {\n\t        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n\t          // Set the correct file based on the XDomain settings\n\t          WEB_SOCKET_SWF_LOCATION = path.join('/');\n\t        }\n\t\n\t        if (port !== 843) {\n\t          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n\t        }\n\t\n\t        WebSocket.__initialize();\n\t        Flashsocket.loaded = true;\n\t      }\n\t\n\t      fn.call(self);\n\t    }\n\t\n\t    var self = this;\n\t    if (document.body) return init();\n\t\n\t    io.util.load(init);\n\t  };\n\t\n\t  /**\n\t   * Check if the FlashSocket transport is supported as it requires that the Adobe\n\t   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n\t   * the polyfill is correctly loaded.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.check = function () {\n\t    if (\n\t        typeof WebSocket == 'undefined'\n\t      || !('__initialize' in WebSocket) || !swfobject\n\t    ) return false;\n\t\n\t    return swfobject.getFlashPlayerVersion().major >= 10;\n\t  };\n\t\n\t  /**\n\t   * Check if the FlashSocket transport can be used as cross domain / cross origin \n\t   * transport. Because we can't see which type (secure or insecure) of .swf is used\n\t   * we will just return true.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Disable AUTO_INITIALIZATION\n\t   */\n\t\n\t  if (typeof window != 'undefined') {\n\t    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n\t  }\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('flashsocket');\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\t\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n\t*/\n\tif ('undefined' != typeof window) {\n\tvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n\t}\n\t// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n\t// License: New BSD License\n\t// Reference: http://dev.w3.org/html5/websockets/\n\t// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\t\n\t(function() {\n\t  \n\t  if ('undefined' == typeof window || window.WebSocket) return;\n\t\n\t  var console = window.console;\n\t  if (!console || !console.log || !console.error) {\n\t    console = {log: function(){ }, error: function(){ }};\n\t  }\n\t  \n\t  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n\t    console.error(\"Flash Player >= 10.0.0 is required.\");\n\t    return;\n\t  }\n\t  if (location.protocol == \"file:\") {\n\t    console.error(\n\t      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n\t      \"unless you set Flash Security Settings properly. \" +\n\t      \"Open the page via Web server i.e. http://...\");\n\t  }\n\t\n\t  /**\n\t   * This class represents a faux web socket.\n\t   * @param {string} url\n\t   * @param {array or string} protocols\n\t   * @param {string} proxyHost\n\t   * @param {int} proxyPort\n\t   * @param {string} headers\n\t   */\n\t  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n\t    var self = this;\n\t    self.__id = WebSocket.__nextId++;\n\t    WebSocket.__instances[self.__id] = self;\n\t    self.readyState = WebSocket.CONNECTING;\n\t    self.bufferedAmount = 0;\n\t    self.__events = {};\n\t    if (!protocols) {\n\t      protocols = [];\n\t    } else if (typeof protocols == \"string\") {\n\t      protocols = [protocols];\n\t    }\n\t    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n\t    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n\t    setTimeout(function() {\n\t      WebSocket.__addTask(function() {\n\t        WebSocket.__flash.create(\n\t            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n\t      });\n\t    }, 0);\n\t  };\n\t\n\t  /**\n\t   * Send data to the web socket.\n\t   * @param {string} data  The data to send to the socket.\n\t   * @return {boolean}  True for success, false for failure.\n\t   */\n\t  WebSocket.prototype.send = function(data) {\n\t    if (this.readyState == WebSocket.CONNECTING) {\n\t      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n\t    }\n\t    // We use encodeURIComponent() here, because FABridge doesn't work if\n\t    // the argument includes some characters. We don't use escape() here\n\t    // because of this:\n\t    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n\t    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n\t    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n\t    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n\t    // additional testing.\n\t    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n\t    if (result < 0) { // success\n\t      return true;\n\t    } else {\n\t      this.bufferedAmount += result;\n\t      return false;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Close this web socket gracefully.\n\t   */\n\t  WebSocket.prototype.close = function() {\n\t    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n\t      return;\n\t    }\n\t    this.readyState = WebSocket.CLOSING;\n\t    WebSocket.__flash.close(this.__id);\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) {\n\t      this.__events[type] = [];\n\t    }\n\t    this.__events[type].push(listener);\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) return;\n\t    var events = this.__events[type];\n\t    for (var i = events.length - 1; i >= 0; --i) {\n\t      if (events[i] === listener) {\n\t        events.splice(i, 1);\n\t        break;\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {Event} event\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.dispatchEvent = function(event) {\n\t    var events = this.__events[event.type] || [];\n\t    for (var i = 0; i < events.length; ++i) {\n\t      events[i](event);\n\t    }\n\t    var handler = this[\"on\" + event.type];\n\t    if (handler) handler(event);\n\t  };\n\t\n\t  /**\n\t   * Handles an event from Flash.\n\t   * @param {Object} flashEvent\n\t   */\n\t  WebSocket.prototype.__handleEvent = function(flashEvent) {\n\t    if (\"readyState\" in flashEvent) {\n\t      this.readyState = flashEvent.readyState;\n\t    }\n\t    if (\"protocol\" in flashEvent) {\n\t      this.protocol = flashEvent.protocol;\n\t    }\n\t    \n\t    var jsEvent;\n\t    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n\t      jsEvent = this.__createSimpleEvent(flashEvent.type);\n\t    } else if (flashEvent.type == \"close\") {\n\t      // TODO implement jsEvent.wasClean\n\t      jsEvent = this.__createSimpleEvent(\"close\");\n\t    } else if (flashEvent.type == \"message\") {\n\t      var data = decodeURIComponent(flashEvent.message);\n\t      jsEvent = this.__createMessageEvent(\"message\", data);\n\t    } else {\n\t      throw \"unknown event type: \" + flashEvent.type;\n\t    }\n\t    \n\t    this.dispatchEvent(jsEvent);\n\t  };\n\t  \n\t  WebSocket.prototype.__createSimpleEvent = function(type) {\n\t    if (document.createEvent && window.Event) {\n\t      var event = document.createEvent(\"Event\");\n\t      event.initEvent(type, false, false);\n\t      return event;\n\t    } else {\n\t      return {type: type, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  WebSocket.prototype.__createMessageEvent = function(type, data) {\n\t    if (document.createEvent && window.MessageEvent && !window.opera) {\n\t      var event = document.createEvent(\"MessageEvent\");\n\t      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n\t      return event;\n\t    } else {\n\t      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n\t      return {type: type, data: data, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Define the WebSocket readyState enumeration.\n\t   */\n\t  WebSocket.CONNECTING = 0;\n\t  WebSocket.OPEN = 1;\n\t  WebSocket.CLOSING = 2;\n\t  WebSocket.CLOSED = 3;\n\t\n\t  WebSocket.__flash = null;\n\t  WebSocket.__instances = {};\n\t  WebSocket.__tasks = [];\n\t  WebSocket.__nextId = 0;\n\t  \n\t  /**\n\t   * Load a new flash security policy file.\n\t   * @param {string} url\n\t   */\n\t  WebSocket.loadFlashPolicyFile = function(url){\n\t    WebSocket.__addTask(function() {\n\t      WebSocket.__flash.loadManualPolicyFile(url);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n\t   */\n\t  WebSocket.__initialize = function() {\n\t    if (WebSocket.__flash) return;\n\t    \n\t    if (WebSocket.__swfLocation) {\n\t      // For backword compatibility.\n\t      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n\t    }\n\t    if (!window.WEB_SOCKET_SWF_LOCATION) {\n\t      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n\t      return;\n\t    }\n\t    var container = document.createElement(\"div\");\n\t    container.id = \"webSocketContainer\";\n\t    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n\t    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n\t    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n\t    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n\t    // the best we can do as far as we know now.\n\t    container.style.position = \"absolute\";\n\t    if (WebSocket.__isFlashLite()) {\n\t      container.style.left = \"0px\";\n\t      container.style.top = \"0px\";\n\t    } else {\n\t      container.style.left = \"-100px\";\n\t      container.style.top = \"-100px\";\n\t    }\n\t    var holder = document.createElement(\"div\");\n\t    holder.id = \"webSocketFlash\";\n\t    container.appendChild(holder);\n\t    document.body.appendChild(container);\n\t    // See this article for hasPriority:\n\t    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n\t    swfobject.embedSWF(\n\t      WEB_SOCKET_SWF_LOCATION,\n\t      \"webSocketFlash\",\n\t      \"1\" /* width */,\n\t      \"1\" /* height */,\n\t      \"10.0.0\" /* SWF version */,\n\t      null,\n\t      null,\n\t      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n\t      null,\n\t      function(e) {\n\t        if (!e.success) {\n\t          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n\t        }\n\t      });\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify JS that it's fully loaded and ready\n\t   * for communication.\n\t   */\n\t  WebSocket.__onFlashInitialized = function() {\n\t    // We need to set a timeout here to avoid round-trip calls\n\t    // to flash during the initialization process.\n\t    setTimeout(function() {\n\t      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n\t      WebSocket.__flash.setCallerUrl(location.href);\n\t      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n\t      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n\t        WebSocket.__tasks[i]();\n\t      }\n\t      WebSocket.__tasks = [];\n\t    }, 0);\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify WebSockets events are fired.\n\t   */\n\t  WebSocket.__onFlashEvent = function() {\n\t    setTimeout(function() {\n\t      try {\n\t        // Gets events using receiveEvents() instead of getting it from event object\n\t        // of Flash event. This is to make sure to keep message order.\n\t        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n\t        var events = WebSocket.__flash.receiveEvents();\n\t        for (var i = 0; i < events.length; ++i) {\n\t          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n\t        }\n\t      } catch (e) {\n\t        console.error(e);\n\t      }\n\t    }, 0);\n\t    return true;\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__log = function(message) {\n\t    console.log(decodeURIComponent(message));\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__error = function(message) {\n\t    console.error(decodeURIComponent(message));\n\t  };\n\t  \n\t  WebSocket.__addTask = function(task) {\n\t    if (WebSocket.__flash) {\n\t      task();\n\t    } else {\n\t      WebSocket.__tasks.push(task);\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Test if the browser is running flash lite.\n\t   * @return {boolean} True if flash lite is running, false otherwise.\n\t   */\n\t  WebSocket.__isFlashLite = function() {\n\t    if (!window.navigator || !window.navigator.mimeTypes) {\n\t      return false;\n\t    }\n\t    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n\t    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n\t      return false;\n\t    }\n\t    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n\t  };\n\t  \n\t  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n\t    if (window.addEventListener) {\n\t      window.addEventListener(\"load\", function(){\n\t        WebSocket.__initialize();\n\t      }, false);\n\t    } else {\n\t      window.attachEvent(\"onload\", function(){\n\t        WebSocket.__initialize();\n\t      });\n\t    }\n\t  }\n\t  \n\t})();\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  exports.XHR = XHR;\n\t\n\t  /**\n\t   * XHR constructor\n\t   *\n\t   * @costructor\n\t   * @api public\n\t   */\n\t\n\t  function XHR (socket) {\n\t    if (!socket) return;\n\t\n\t    io.Transport.apply(this, arguments);\n\t    this.sendBuffer = [];\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(XHR, io.Transport);\n\t\n\t  /**\n\t   * Establish a connection\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.open = function () {\n\t    this.socket.setBuffer(false);\n\t    this.onOpen();\n\t    this.get();\n\t\n\t    // we need to make sure the request succeeds since we have no indication\n\t    // whether the request opened or not until it succeeded.\n\t    this.setCloseTimeout();\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Check if we need to send data to the Socket.IO server, if we have data in our\n\t   * buffer we encode it and forward it to the `post` method.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.payload = function (payload) {\n\t    var msgs = [];\n\t\n\t    for (var i = 0, l = payload.length; i < l; i++) {\n\t      msgs.push(io.parser.encodePacket(payload[i]));\n\t    }\n\t\n\t    this.send(io.parser.encodePayload(msgs));\n\t  };\n\t\n\t  /**\n\t   * Send data to the Socket.IO server.\n\t   *\n\t   * @param data The message\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.send = function (data) {\n\t    this.post(data);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\t\n\t  function empty () { };\n\t\n\t  XHR.prototype.post = function (data) {\n\t    var self = this;\n\t    this.socket.setBuffer(true);\n\t\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t        self.posting = false;\n\t\n\t        if (this.status == 200){\n\t          self.socket.setBuffer(false);\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    }\n\t\n\t    function onload () {\n\t      this.onload = empty;\n\t      self.socket.setBuffer(false);\n\t    };\n\t\n\t    this.sendXHR = this.request('POST');\n\t\n\t    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n\t      this.sendXHR.onload = this.sendXHR.onerror = onload;\n\t    } else {\n\t      this.sendXHR.onreadystatechange = stateChange;\n\t    }\n\t\n\t    this.sendXHR.send(data);\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established `XHR` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.close = function () {\n\t    this.onClose();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Generates a configured XHR request\n\t   *\n\t   * @param {String} url The url that needs to be requested.\n\t   * @param {String} method The method the request should use.\n\t   * @returns {XMLHttpRequest}\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.request = function (method) {\n\t    var req = io.util.request(this.socket.isXDomain())\n\t      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\t\n\t    req.open(method || 'GET', this.prepareUrl() + query, true);\n\t\n\t    if (method == 'POST') {\n\t      try {\n\t        if (req.setRequestHeader) {\n\t          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n\t        } else {\n\t          // XDomainRequest\n\t          req.contentType = 'text/plain';\n\t        }\n\t      } catch (e) {}\n\t    }\n\t\n\t    return req;\n\t  };\n\t\n\t  /**\n\t   * Returns the scheme to use for the transport URLs.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'https' : 'http';\n\t  };\n\t\n\t  /**\n\t   * Check if the XHR transports are supported\n\t   *\n\t   * @param {Boolean} xdomain Check if we support cross domain requests.\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  XHR.check = function (socket, xdomain) {\n\t    try {\n\t      var request = io.util.request(xdomain),\n\t          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n\t          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n\t          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n\t      if (request && !(usesXDomReq && isXProtocol)) {\n\t        return true;\n\t      }\n\t    } catch(e) {}\n\t\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Check if the XHR transport supports cross domain requests.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  XHR.xdomainCheck = function (socket) {\n\t    return XHR.check(socket, true);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.htmlfile = HTMLFile;\n\t\n\t  /**\n\t   * The HTMLFile transport creates a `forever iframe` based transport\n\t   * for Internet Explorer. Regular forever iframe implementations will \n\t   * continuously trigger the browsers buzy indicators. If the forever iframe\n\t   * is created inside a `htmlfile` these indicators will not be trigged.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.XHR}\n\t   * @api public\n\t   */\n\t\n\t  function HTMLFile (socket) {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\t\n\t  io.util.inherit(HTMLFile, io.Transport.XHR);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.prototype.name = 'htmlfile';\n\t\n\t  /**\n\t   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n\t   * that can be used to listen to messages. Inside the generated\n\t   * `htmlfile` a reference will be made to the HTMLFile transport.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype.get = function () {\n\t    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t    this.doc.open();\n\t    this.doc.write('<html></html>');\n\t    this.doc.close();\n\t    this.doc.parentWindow.s = this;\n\t\n\t    var iframeC = this.doc.createElement('div');\n\t    iframeC.className = 'socketio';\n\t\n\t    this.doc.body.appendChild(iframeC);\n\t    this.iframe = this.doc.createElement('iframe');\n\t\n\t    iframeC.appendChild(this.iframe);\n\t\n\t    var self = this\n\t      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\t\n\t    this.iframe.src = this.prepareUrl() + query;\n\t\n\t    io.util.on(window, 'unload', function () {\n\t      self.destroy();\n\t    });\n\t  };\n\t\n\t  /**\n\t   * The Socket.IO server will write script tags inside the forever\n\t   * iframe, this function will be used as callback for the incoming\n\t   * information.\n\t   *\n\t   * @param {String} data The message\n\t   * @param {document} doc Reference to the context\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype._ = function (data, doc) {\n\t    // unescape all forward slashes. see GH-1251\n\t    data = data.replace(/\\\\\\//g, '/');\n\t    this.onData(data);\n\t    try {\n\t      var script = doc.getElementsByTagName('script')[0];\n\t      script.parentNode.removeChild(script);\n\t    } catch (e) { }\n\t  };\n\t\n\t  /**\n\t   * Destroy the established connection, iframe and `htmlfile`.\n\t   * And calls the `CollectGarbage` function of Internet Explorer\n\t   * to release the memory.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype.destroy = function () {\n\t    if (this.iframe){\n\t      try {\n\t        this.iframe.src = 'about:blank';\n\t      } catch(e){}\n\t\n\t      this.doc = null;\n\t      this.iframe.parentNode.removeChild(this.iframe);\n\t      this.iframe = null;\n\t\n\t      CollectGarbage();\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established connection.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.prototype.close = function () {\n\t    this.destroy();\n\t    return io.Transport.XHR.prototype.close.call(this);\n\t  };\n\t\n\t  /**\n\t   * Checks if the browser supports this transport. The browser\n\t   * must have an `Ac...eXObject` implementation.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.check = function (socket) {\n\t    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n\t      try {\n\t        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t        return a && io.Transport.XHR.check(socket);\n\t      } catch(e){}\n\t    }\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Check if cross domain requests are supported.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.xdomainCheck = function () {\n\t    // we can probably do handling for sub-domains, we should\n\t    // test that it's cross domain but a subdomain here\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('htmlfile');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports['xhr-polling'] = XHRPolling;\n\t\n\t  /**\n\t   * The XHR-polling transport uses long polling XHR requests to create a\n\t   * \"persistent\" connection with the server.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function XHRPolling () {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\t\n\t  io.util.inherit(XHRPolling, io.Transport.XHR);\n\t\n\t  /**\n\t   * Merge the properties from XHR transport\n\t   */\n\t\n\t  io.util.merge(XHRPolling, io.Transport.XHR);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  XHRPolling.prototype.name = 'xhr-polling';\n\t\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.heartbeats = function () {\n\t    return false;\n\t  };\n\t\n\t  /** \n\t   * Establish a connection, for iPhone and Android this will be done once the page\n\t   * is loaded.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\t\n\t  XHRPolling.prototype.open = function () {\n\t    var self = this;\n\t\n\t    io.Transport.XHR.prototype.open.call(self);\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Starts a XHR request to wait for incoming messages.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function empty () {};\n\t\n\t  XHRPolling.prototype.get = function () {\n\t    if (!this.isOpen) return;\n\t\n\t    var self = this;\n\t\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t\n\t        if (this.status == 200) {\n\t          self.onData(this.responseText);\n\t          self.get();\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    };\n\t\n\t    function onload () {\n\t      this.onload = empty;\n\t      this.onerror = empty;\n\t      self.retryCounter = 1;\n\t      self.onData(this.responseText);\n\t      self.get();\n\t    };\n\t\n\t    function onerror () {\n\t      self.retryCounter ++;\n\t      if(!self.retryCounter || self.retryCounter > 3) {\n\t        self.onClose();  \n\t      } else {\n\t        self.get();\n\t      }\n\t    };\n\t\n\t    this.xhr = this.request();\n\t\n\t    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n\t      this.xhr.onload = onload;\n\t      this.xhr.onerror = onerror;\n\t    } else {\n\t      this.xhr.onreadystatechange = stateChange;\n\t    }\n\t\n\t    this.xhr.send(null);\n\t  };\n\t\n\t  /**\n\t   * Handle the unclean close behavior.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.onClose = function () {\n\t    io.Transport.XHR.prototype.onClose.call(this);\n\t\n\t    if (this.xhr) {\n\t      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n\t      try {\n\t        this.xhr.abort();\n\t      } catch(e){}\n\t      this.xhr = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Webkit based browsers show a infinit spinner when you start a XHR request\n\t   * before the browsers onload event is called so we need to defer opening of\n\t   * the transport until the onload event is called. Wrapping the cb in our\n\t   * defer method solve this.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t\n\t    io.util.defer(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('xhr-polling');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t  /**\n\t   * There is a way to hide the loading indicator in Firefox. If you create and\n\t   * remove a iframe it will stop showing the current loading indicator.\n\t   * Unfortunately we can't feature detect that and UA sniffing is evil.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  var indicator = global.document && \"MozAppearance\" in\n\t    global.document.documentElement.style;\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports['jsonp-polling'] = JSONPPolling;\n\t\n\t  /**\n\t   * The JSONP transport creates an persistent connection by dynamically\n\t   * inserting a script tag in the page. This script tag will receive the\n\t   * information of the Socket.IO server. When new information is received\n\t   * it creates a new script tag for the new data stream.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.xhr-polling}\n\t   * @api public\n\t   */\n\t\n\t  function JSONPPolling (socket) {\n\t    io.Transport['xhr-polling'].apply(this, arguments);\n\t\n\t    this.index = io.j.length;\n\t\n\t    var self = this;\n\t\n\t    io.j.push(function (msg) {\n\t      self._(msg);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR polling transport.\n\t   */\n\t\n\t  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.prototype.name = 'jsonp-polling';\n\t\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server using an iframe.\n\t   * The iframe is used because script tags can create POST based requests.\n\t   * The iframe is positioned outside of the view so the user does not\n\t   * notice it's existence.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.post = function (data) {\n\t    var self = this\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\t\n\t    if (!this.form) {\n\t      var form = document.createElement('form')\n\t        , area = document.createElement('textarea')\n\t        , id = this.iframeId = 'socketio_iframe_' + this.index\n\t        , iframe;\n\t\n\t      form.className = 'socketio';\n\t      form.style.position = 'absolute';\n\t      form.style.top = '0px';\n\t      form.style.left = '0px';\n\t      form.style.display = 'none';\n\t      form.target = id;\n\t      form.method = 'POST';\n\t      form.setAttribute('accept-charset', 'utf-8');\n\t      area.name = 'd';\n\t      form.appendChild(area);\n\t      document.body.appendChild(form);\n\t\n\t      this.form = form;\n\t      this.area = area;\n\t    }\n\t\n\t    this.form.action = this.prepareUrl() + query;\n\t\n\t    function complete () {\n\t      initIframe();\n\t      self.socket.setBuffer(false);\n\t    };\n\t\n\t    function initIframe () {\n\t      if (self.iframe) {\n\t        self.form.removeChild(self.iframe);\n\t      }\n\t\n\t      try {\n\t        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n\t        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n\t      } catch (e) {\n\t        iframe = document.createElement('iframe');\n\t        iframe.name = self.iframeId;\n\t      }\n\t\n\t      iframe.id = self.iframeId;\n\t\n\t      self.form.appendChild(iframe);\n\t      self.iframe = iframe;\n\t    };\n\t\n\t    initIframe();\n\t\n\t    // we temporarily stringify until we figure out how to prevent\n\t    // browsers from turning `\\n` into `\\r\\n` in form inputs\n\t    this.area.value = io.JSON.stringify(data);\n\t\n\t    try {\n\t      this.form.submit();\n\t    } catch(e) {}\n\t\n\t    if (this.iframe.attachEvent) {\n\t      iframe.onreadystatechange = function () {\n\t        if (self.iframe.readyState == 'complete') {\n\t          complete();\n\t        }\n\t      };\n\t    } else {\n\t      this.iframe.onload = complete;\n\t    }\n\t\n\t    this.socket.setBuffer(true);\n\t  };\n\t\n\t  /**\n\t   * Creates a new JSONP poll that can be used to listen\n\t   * for messages from the Socket.IO server.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.get = function () {\n\t    var self = this\n\t      , script = document.createElement('script')\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\t\n\t    if (this.script) {\n\t      this.script.parentNode.removeChild(this.script);\n\t      this.script = null;\n\t    }\n\t\n\t    script.async = true;\n\t    script.src = this.prepareUrl() + query;\n\t    script.onerror = function () {\n\t      self.onClose();\n\t    };\n\t\n\t    var insertAt = document.getElementsByTagName('script')[0];\n\t    insertAt.parentNode.insertBefore(script, insertAt);\n\t    this.script = script;\n\t\n\t    if (indicator) {\n\t      setTimeout(function () {\n\t        var iframe = document.createElement('iframe');\n\t        document.body.appendChild(iframe);\n\t        document.body.removeChild(iframe);\n\t      }, 100);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Callback function for the incoming message stream from the Socket.IO server.\n\t   *\n\t   * @param {String} data The message\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype._ = function (msg) {\n\t    this.onData(msg);\n\t    if (this.isOpen) {\n\t      this.get();\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * The indicator hack only works after onload\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t    if (!indicator) return fn.call(this);\n\t\n\t    io.util.load(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Checks if browser supports this transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.check = function () {\n\t    return 'document' in global;\n\t  };\n\t\n\t  /**\n\t   * Check if cross domain requests are supported\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('jsonp-polling');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () { return io; }.apply(null, __WEBPACK_AMD_DEFINE_ARRAY__)), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t})();\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)(module)))\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Copyright (c) 2010 David Durman\n\t//\n\t// The contents of this file are subject to the MIT License (the \"License\");\n\t// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\t// http://opensource.org/licenses/MIT.\n\t//\n\t// This hierarchical state machine implementation has been inspired\n\t// by the QP active object framework, see http://www.state-machine.com/\n\t\n\t\n\t(function(root, factory){\n\t    \"use strict\";\n\t\n\t    if (true) {\n\t\n\t        // Node. Does not work with strict CommonJS, but\n\t        // only CommonJS-like enviroments that support module.exports,\n\t        // like Node.\n\t        module.exports = factory();\n\t\n\t    } else if (typeof define === 'function' && define.amd) {\n\t\n\t        // AMD. Register as an anonymous module.\n\t        define(factory);\n\t\n\t    } else {\n\t\n\t        // Browser globals (root is window)\n\t        root.Statechart = factory();\n\t    }\n\t\n\t}(this, function(){\n\t\n\t    \"use strict\";\n\t\n\t    var assert = function(assertion){\n\t        if (!assertion) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    };\n\t\n\t\n\t    // Statechart.\n\t    // -----------\n\t\n\t    // `myState` - the current state\n\t    // `mySource` - the source of the current transition\n\t\n\t    var Statechart = {\n\t\n\t        run: function(opt){\n\t            opt = opt || {};\n\t            this.debug = opt.debug ? opt.debug : function(){};\n\t            this.construct(this.initialState);\n\t            this.init(null);\n\t        },\n\t\n\t        construct: function(initialState){\n\t            this.myState = this.top();\n\t            this.mySource = this.state(\"Initial\");\n\t\n\t            // Initial pseudo-state\n\t            this.states.Initial = {\n\t                empty: function(){\n\t                    this.newInitialState(initialState);\n\t                }\n\t            };\n\t            var handled = function(){ return null; };\n\t\n\t            // TOP state\n\t            this.states.TOP = {\n\t                entry: handled,\n\t                exit:  handled,\n\t                init:  handled,\n\t                empty: handled\n\t            };\n\t            this.flatten();\n\t        },\n\t\n\t        // Trigger the initial transition and recursively enter the submachine of the top state.\n\t        // Must be called only once for a given Statechart before dispatching any events to it.\n\t        init: function(anEventOrNull){\n\t            assert(this.myState === this.top() && this.mySource !== null);\n\t            var s = this.myState;    // save top in temp\n\t            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n\t            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t            s = this.myState;\n\t            s.enter();\n\t            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n\t                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t                s = this.myState;\n\t                s.enter();\n\t            }\n\t        },\n\t\n\t        state: function(stateOrName){\n\t            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n\t        },\n\t\n\t        top: function(stateOrName){\n\t            // create the top state only once and store it to an auxiliary property\n\t            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n\t        },\n\t\n\t        currentState: function(){\n\t            return this.myState;\n\t        },\n\t\n\t        flatten: function(){\n\t            this.statesTable = this.statesTable || {};\n\t            this._flatten(this.states, this.top().name);\n\t        },\n\t\n\t        _flatten: function(states, parent){\n\t            if (!states) {\n\t                return;\n\t            }\n\t\n\t            for (var state in states) {\n\t                if (states.hasOwnProperty(state)) {\n\t                    this.statesTable[state] = states[state];\n\t                    this.statesTable[state].parent = parent;\n\t                    this._flatten(states[state].states, state);\n\t                }\n\t            }\n\t        },\n\t\n\t        selectState: function(stateName){\n\t            return this.statesTable[stateName];\n\t        },\n\t\n\t        dispatchEvent: function(anEvent, state, act){\n\t            act = act || state[anEvent.type];\n\t\n\t            // Action might also be an array in which case it is assumed that evaluating guards decides\n\t            // which target to enter.\n\t            if (act instanceof Array) {\n\t                for (var i = 0; i < act.length; i++) {\n\t                    this.dispatchEvent(anEvent, state, act[i]);\n\t                }\n\t            }\n\t\n\t            // @todo This is terrible edge case used just for more fancy Statechart representation\n\t            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n\t            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n\t            // In some cases the latter form can be useful for better control of the Statechart\n\t            if (anEvent.type === \"init\" && typeof act === \"string\") {\n\t                this.newInitialState(act);\n\t                return null; // handled\n\t            }\n\t\n\t            if (act instanceof Function){\n\t                act.call(this, anEvent.args);\n\t                return null;  // handled\n\t            } else if (act) {\n\t                // no guard at all or the guard condition is met\n\t                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n\t                    if (act.action) {\n\t                        act.action.call(this, anEvent.args);\n\t                    }\n\t                    if (act.target) {\n\t                        this.newState(act.target);\n\t                    }\n\t                    return null;  // handled\n\t                }\n\t            } else {        // act is undefined (no handler in state for anEvent)\n\t                if (state === this.selectState(\"TOP\")) {\n\t                    this.handleUnhandledEvent(anEvent); // not-handled\n\t                    return null;    // handled (TOP state handles all events)\n\t                }\n\t            }\n\t            return this.state(state.parent); // not-handled\n\t        },\n\t\n\t        // Override this when needed.\n\t        handleUnhandledEvent: function(anEvent){\n\t            this.debug(\"Unhandled event: \" + anEvent.type);\n\t            return null;\n\t        },\n\t\n\t        // Traverse the state hierarchy starting from the currently active state myState.\n\t        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n\t        // the state handlers in succession. At each level of state nesting, it intercepts the value\n\t        // returned from a state handler to obtain the superstate needed to advance to the next level.\n\t        dispatch: function(anEvent, args){\n\t            if (!anEvent || !(anEvent instanceof QEvent)) {\n\t                anEvent = new QEvent(anEvent, args);\n\t            }\n\t            this.mySource = this.myState;\n\t            while (this.mySource) {\n\t                this.mySource = this.mySource.trigger(anEvent);\n\t            }\n\t        },\n\t\n\t        // Performs dynamic transition. (macro Q_TRAN_DYN())\n\t        newState: function(aStateName){\n\t            this.transition(this.state(aStateName));\n\t        },\n\t\n\t        // Used by handlers only in response to the #init event. (macro Q_INIT())\n\t        // USAGE: return this.newInitialState(\"whatever\");\n\t        // @return null for convenience\n\t\n\t        newInitialState: function(aStateOrName){\n\t            this.myState = this.state(aStateOrName);\n\t            return null;\n\t        },\n\t\n\t        // Dynamic transition. (Q_TRAN_DYN())\n\t        transition: function(target){\n\t            assert(!target.equals(this.top()));\n\t\n\t            var entry = [];\n\t            var mySource = this.mySource;\n\t            var s = this.myState;\n\t\n\t            // exit all the nested states between myState and mySource\n\t            assert(s !== null);\n\t            assert(mySource !== null);\n\t            while (!s.equals(mySource)) {\n\t                s = s.exit() || s.superstate();\n\t            }\n\t\n\t            // check all seven possible source/target state combinations\n\t\n\t\t    entry.push(target);\n\t\n\t            // (a) mySource == target (self transition)\n\t            if (mySource.equals(target)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (b) mySource == target.superstate (one level deep)\n\t            var p = target.superstate();\n\t            if (mySource.equals(p)) {\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            assert(mySource !== null);\n\t\n\t            // (c) mySource.superstate == target.superstate (most common - fsa)\n\t            var q = mySource.superstate();\n\t            if (q.equals(p)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (d) mySource.superstate == target (one level up)\n\t            if (q.equals(target)) {\n\t                mySource.exit();\n\t                entry.pop();    // do not enter the LCA\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t\t    entry.push(p);\n\t            s = p.superstate();\n\t            while (s !== null) {\n\t                if (mySource.equals(s)) {\n\t                    return this.enterVia(target, entry);\n\t                }\n\t\n\t\t\tentry.push(s);\n\t                s = s.superstate();\n\t            }\n\t\n\t            // otherwise we're definitely exiting mySource\n\t            mySource.exit();\n\t\n\t            // entry array is complete, save its length to avoid computing it repeatedly\n\t            var entryLength = entry.length;\n\t\n\t            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n\t            var lca;\n\t            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                if (q.equals(entry[lca])) {\n\t                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                }\n\t            }\n\t\n\t            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n\t            s = q;\n\t            while (s !== null) {\n\t                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                    if (s.equals(entry[lca])) {\n\t                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                    }\n\t                }\n\t                s.exit();\n\t                s = s.superstate();\n\t            }\n\t        },\n\t\n\t        // tail of transition()\n\t        // We are in the LCA of mySource and target.\n\t        enterVia: function(target, entry){\n\t\n\t            // retrace the entry path in reverse order\n\t            var idx = entry.length;\n\t            while (idx > 0) {\n\t                idx--;\n\t                entry[idx].enter();\n\t            }\n\t\n\t            this.myState = target;\n\t            while (target.init() === null) {\n\t                // initial transition must go one level deep\n\t                assert(target.equals(this.myState.superstate()));\n\t                target = this.myState;\n\t                target.enter();\n\t            }\n\t        }\n\t    };\n\t\n\t    // QState.\n\t    // -------\n\t\n\t    function QState(fsm, name){\n\t        this.fsm = fsm;\n\t        this.name = name;\n\t    }\n\t\n\t    QState.prototype = {\n\t        equals: function(state){\n\t            return (this.name === state.name && this.fsm === state.fsm);\n\t        },\n\t\n\t        dispatchEvent: function(anEvent, state){\n\t            return this.fsm.dispatchEvent(anEvent, state);\n\t        },\n\t\n\t        trigger: function(anEvent){\n\t            var evt = anEvent || QEventEmpty;\n\t            var state = this.fsm.selectState(this.name);\n\t            return this.dispatchEvent(evt, state);\n\t        },\n\t\n\t        enter: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] enter\");\n\t            return this.trigger(QEventEntry);\n\t        },\n\t\n\t        exit: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] exit\");\n\t            return this.trigger(QEventExit);\n\t        },\n\t\n\t        init: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] init\");\n\t            return this.trigger(QEventInit);\n\t        },\n\t\n\t        // Answer my superstate. Default is to return fsm top state.\n\t        superstate: function(){\n\t            var superstate = this.trigger(QEventEmpty);\n\t            if (superstate && superstate instanceof QState) {\n\t                return superstate;\n\t            }\n\t            superstate = this.fsm.top();\n\t            if (this.name === superstate.name) {\n\t                return null;\n\t            }\n\t            return superstate;\n\t        }\n\t    };\n\t\n\t    // QEvent\n\t    // ------\n\t\n\t    function QEvent(type, args){\n\t        this.type = type;\n\t        this.args = args;\n\t    }\n\t\n\t    // these events are static, they do not carry any arguments\n\t    // -> create them only once\n\t    // moreover, they don't have to be exposed to the outer world\n\t    var QEventEntry = new QEvent(\"entry\");\n\t    var QEventExit = new QEvent(\"exit\");\n\t    var QEventInit = new QEvent(\"init\");\n\t    var QEventEmpty = new QEvent(\"empty\");\n\t\n\t\n\t    return Statechart;\n\t}));\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ }\n/******/ ])\n})\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);","module.exports = require('./respoke/respoke');\n","/*global Bugsnag: true*/\n/*jshint bitwise: false*/\n\n/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n *\n * Copyright (c) 2014 Digium, Inc.\n * All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar log = require('loglevel');\nlog.setLevel('warn');\n\nvar Q = require('q');\nQ.longStackSupport = true;\nQ.stackJumpLimit = 5;\nQ.longStackJumpLimit = 20;\nQ.stopUnhandledRejectionTracking();\n\nrequire('./deps/adapter');\n\n/**\n * `respoke` is a global static class.\n * \n * \n * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or \n * [choose a previous release](http://cdn.respoke.io/list.html).\n * \n * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n * \n *      var client = respoke.createClient();\n *\n * \n * **Development mode without brokered auth**\n * \n *      var client = respoke.createClient({\n *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n *          developmentMode: true,\n *          endpointId: \"billy\"\n *      });\n *      \n *      client.listen('connect', function () {\n *          console.log('connected to respoke!');\n *      });\n *      \n *      client.listen('error', function (err) {\n *          console.error('Connection to Respoke failed.', err);\n *      });\n *\n *      client.connect();\n *\n * \n * **Production mode with brokered auth**\n * \n *      var client = respoke.createClient();\n *      \n *      client.listen('connect', function () {\n *          console.log('connected to respoke!');\n *      });\n *\n *      client.listen('error', function (err) {\n *          console.error('Connection to Respoke failed.', err);\n *      });\n *\n *      // Respoke auth token obtained by your server. \n *      // This is how you control who can connect to Respoke app.\n *      // See API docs for POST [base]/tokens\n *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n *\n *      // connect to respoke with the token\n *      client.connect({\n *          reconnect: false,\n *          token: tokenId\n *      });\n *\n *      // fetch a new token from your server if it expires\n *      client.listen('disconnect', function (evt) {\n *          // fetch another token from your server.\n *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n *          client.connect({\n *              reconnect: false,\n *              token: newTokenId\n *          });\n *      });\n * \n *\n * \n * ### Event listeners vs callback handlers\n *\n * There are two ways to attach listeners. It is highly recommended that you choose one pattern \n * and stick to it throughout your app.\n * \n * For every `event-name`, there is a corresponding callback `onEventName`.\n *\n * **With a listener**\n *\n *      var client = respoke.createClient();\n *      client.listen('connect', function () { });\n * \n * **or with a callback**\n *\n *      var client = respoke.createClient({\n *          // other options go here\n *          \n *          onConnect: function () { }\n *      });\n * \n * \n * @namespace respoke\n * @class respoke\n * @global\n * @link https://cdn.respoke.io/respoke.min.js\n */\nvar respoke = module.exports = {\n    buildNumber: 'NO BUILD NUMBER',\n    streams: {},\n    instances: {}\n};\n\n/**\n * `\"v0.0.0\"`\n * \n * The respoke.min.js version.\n * \n * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n * @type {string}\n */\nrespoke.version = respoke.buildNumber + \"\";\n\nrespoke.EventEmitter = require('./event');\nrespoke.Client = require('./client');\nrespoke.Presentable = require('./presentable');\nrespoke.Connection = require('./connection');\nrespoke.Endpoint = require('./endpoint');\nrespoke.TextMessage = require('./textMessage');\nrespoke.SignalingMessage = require('./signalingMessage');\nrespoke.Group = require('./group');\nrespoke.SignalingChannel = require('./signalingChannel');\nrespoke.DirectConnection = require('./directConnection');\nrespoke.PeerConnection = require('./peerConnection');\nrespoke.CallState = require('./callState');\nrespoke.Call = require('./call');\nrespoke.LocalMedia = require('./localMedia');\nrespoke.RemoteMedia = require('./remoteMedia');\nrespoke.log = log;\nrespoke.Q = Q;\n\nif (!window.skipBugsnag) {\n    // Use airbrake.\n    var airbrake = document.createElement('script');\n    var first = document.getElementsByTagName('script')[0];\n    first.parentNode.insertBefore(airbrake, first);\n\n    airbrake.src = \"https://ssljscdn.airbrake.io/0.3/airbrake.min.js\";\n    airbrake.setAttribute('defer', 'defer');\n    airbrake.setAttribute('data-airbrake-project-id', '98133');\n    airbrake.setAttribute('data-airbrake-project-key', 'cd3e085acc5e554658ebcdabd112a6f4');\n    airbrake.setAttribute('data-airbrake-project-environment-name', 'production');\n\n    window.onerror = function (message, file, line) {\n        \"use strict\";\n        //Only send errors from the respoke.js file to Airbrake\n        if (file.match(/respoke/)) {\n            Airbrake.push({error: {message: message, fileName: file, lineNumber: line}});\n        }\n    };\n}\n\n/**\n * This is one of two possible entry points for interating with the library. \n * \n * This method creates a new Client object\n * which represents your user's connection to your Respoke app. \n * \n * This method **automatically calls client.connect(params)** after the client is created.\n * \n * @static\n * @memberof respoke\n * @param {object} params Parameters to the respoke.Client constructor.\n * @param {string} [params.appId]\n * @param {string} [params.baseURL]\n * @param {string} [params.token]\n * @param {RTCConstraints} [params.constraints] - A set of default WebRTC call constraints if you wish to use\n * different parameters than the built-in defaults.\n * @param {RTCICEServers} [params.servers] - A set of default WebRTC ICE/STUN/TURN servers if you wish to use\n * different parameters than the built-in defaults.\n * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n * @param {function} [params.onError] - Error handler for this invocation of this method only.\n * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n * direct connection.\n * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n * debugging information.\n * @returns {respoke.Client}\n */\nrespoke.connect = function (params) {\n    \"use strict\";\n    var client = respoke.Client(params);\n    client.connect(params);\n    return client;\n};\n\n/**\n * Getter for the respoke client.\n *\n * You can have more than one active client, so this method provides a way to retrieve a specific instance. \n *\n * @static\n * @memberof respoke\n * @param {number} id The Client ID.\n * @returns {respoke.Client}\n */\nrespoke.getClient = function (id) {\n    \"use strict\";\n    if (id === undefined) {\n        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n    }\n    if (!respoke.instances[id]) {\n        log.debug(\"No client instance with id\", id);\n    }\n    return respoke.instances[id];\n};\n\n/**\n * This is one of two possible entry points for interating with the library. \n * \n * This method creates a new Client object which represents your user's connection to your Respoke app.\n * \n * It **does NOT automatically call the client.connect() method** after the client is created. \n * \n * The `params` argument is the same as `respoke.connect(params)`.\n * \n * @static\n * @memberof respoke\n * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n * @returns {respoke.Client}\n */\nrespoke.createClient = function (params) {\n    \"use strict\";\n    var client;\n    params = params || {};\n    if (params.instanceId) {\n        client = respoke.getClient(params.instanceId);\n        if (client) {\n            return client;\n        }\n    }\n    return respoke.Client(params);\n};\n\n/**\n * Build a closure from a listener that will ensure the listener can only be called once.\n * @static\n * @private\n * @memberof respoke\n * @param {function} func\n * @return {function}\n */\nrespoke.once = function (func) {\n    \"use strict\";\n    return (function () {\n        var called = false;\n        return function () {\n            if (called === false) {\n                func.apply(null, arguments);\n                called = true;\n            }\n        };\n    })();\n};\n\n/**\n * @static\n * @private\n * @memberof respoke\n * @returns {number}\n */\nrespoke.makeGUID = function () {\n    \"use strict\";\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    var uuid = new Array(36);\n    var rnd = 0;\n    var r;\n    for (var i = 0; i < 36; i += 1) {\n        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n            uuid[i] = '-';\n        } else if (i === 14) {\n            uuid[i] = '4';\n        } else {\n            if (rnd <= 0x02) {\n                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n            }\n            r = rnd & 0xf;\n            rnd = rnd >> 4;\n            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n        }\n    }\n    return uuid.join('');\n};\n\n/**\n * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n * It's not recommended that this method be used by developers and apps.\n * @private\n * @static\n * @memberof respoke\n * @param {Promise} promise\n * @param {function} onSuccess\n * @param {function} onError\n * @returns {Promise|undefined}\n */\nrespoke.handlePromise = function (promise, onSuccess, onError) {\n    \"use strict\";\n    var returnUndef = false;\n    if (onSuccess || onError) {\n        returnUndef = true;\n    }\n\n    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n    onError = typeof onError === 'function' ? onError : function () {};\n    promise.done(onSuccess, onError);\n    return (returnUndef ? undefined : promise);\n};\n\n/**\n * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.  Copy all\n * params that were passed in onto the base object. Add the class name.\n * @class respoke.Class\n * @classdesc Empty base class.\n * @constructor\n * @private\n */\nrespoke.Class = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = params.that || {};\n    var client = params.client;\n\n    that.className = 'respoke.Class';\n    delete params.that;\n    delete that.client;\n\n    Object.keys(params).forEach(function copyParam(name) {\n        that[name] = params[name];\n    });\n\n    return that;\n}; // end of respoke.Class\n\n/**\n * Does the browser support `UserMedia`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasUserMedia = function () {\n    \"use strict\";\n    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n};\n\n/**\n * Does the browser support `RTCPeerConnection`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasRTCPeerConnection = function () {\n    \"use strict\";\n    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection) instanceof Function;\n};\n\n/**\n * Does the browser support `WebSocket`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasWebsocket = function () {\n    \"use strict\";\n    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n};\n\n/**\n * Does the sdp indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {RTCSessionDescription}\n * @returns {boolean}\n */\nrespoke.sdpHasAudio = function (sdp) {\n    \"use strict\";\n    return sdp.indexOf('m=audio') !== -1;\n};\n\n/**\n * Does the sdp indicate a video stream?\n * @static\n * @memberof respoke\n * @params {RTCSessionDescription}\n * @returns {boolean}\n */\nrespoke.sdpHasVideo = function (sdp) {\n    \"use strict\";\n    return sdp.indexOf('m=video') !== -1;\n};\n\n/**\n * Does the sdp indicate a data channel?\n * @static\n * @memberof respoke\n * @params {RTCSessionDescription}\n * @returns {boolean}\n */\nrespoke.sdpHasDataChannel = function (sdp) {\n    \"use strict\";\n    return sdp.indexOf('m=application') !== -1;\n};\n\n/**\n * Does the sdp indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {MediaConstraints}\n * @returns {boolean}\n */\nrespoke.constraintsHasAudio = function (constraints) {\n    \"use strict\";\n    return (constraints.audio === true);\n};\n\n/**\n * Does the constraints indicate a video stream?\n * @static\n * @memberof respoke\n * @params {MediaConstraints}\n * @returns {boolean}\n */\nrespoke.constraintsHasVideo = function (constraints) {\n    \"use strict\";\n    return (constraints.video === true || typeof constraints.video === 'object');\n};\n\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\nvar respoke = require('./respoke');\nvar log = require('loglevel');\n\n/**\n * A generic class for emitting and listening to events.\n * \n * @class respoke.EventEmitter\n * @inherits respoke.Class\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @returns {respoke.EventEmitter}\n */\nvar EventEmitter = module.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respoke.Class(params);\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.EventEmitter\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.EventEmitter';\n\n    /**\n     * @memberof! respoke.EventEmitter\n     * @name eventList\n     * @private\n     * @type {object}\n     */\n    var eventList = {};\n\n    /**\n     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n     * event in the case that the same\n     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n     * count when we are trying to determine if an event has listeners placed by the developer.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - A developer-specified string identifying the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n     * not be used by developers who are using the library, only by developers who are working on the library itself.\n     */\n    that.once = function (eventType, listener, isInternal) {\n        listener = respoke.once(listener);\n        listener.once = true;\n        that.listen(eventType, listener, isInternal);\n    };\n\n    /**\n     * Add a listener to an object.  This method adds the given listener to the given event in the case that the same\n     * listener is not already registered to this even and the listener is a function.  The third argument 'isInternal'\n     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n     * count when we are trying to determine if an event has listeners placed by the developer.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - A developer-specified string identifying the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n     * not be used by developers who are using the library, only by developers who are working on the library itself.\n     */\n    that.listen = function (eventType, listener, isInternal) {\n        if (listener === undefined) {\n            return;\n        }\n\n        eventList[eventType] = eventList[eventType] || [];\n        listener.isInternal = !!isInternal; // boolify\n\n        if (typeof listener === 'function' && eventList[eventType].map(function eachListener(a) {\n            return a.toString();\n        }).indexOf(listener.toString()) === -1) {\n            eventList[eventType].push(listener);\n        } else if (eventList[eventType].indexOf(listener) !== -1) {\n            log.warn(\"not adding duplicate listener.\");\n        }\n    };\n\n    /**\n     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n     * removed from the specified eventType.  If a listener is also specified, only that listener\n     * will be removed.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.ignore\n     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n     * @param {function} [listener] - An optional function to remove from the specified event.\n     */\n    that.ignore = function (eventType, listener) {\n        // Remove all events from this object\n        if (eventType === undefined) {\n            eventList = {};\n            return;\n        }\n\n        // Remove all listeners from this event.\n        if (listener === undefined || !eventList[eventType]) {\n            eventList[eventType] = [];\n            return;\n        }\n\n        // Remove only one listener from this event.\n        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n            if (listener === eventList[eventType][i]) {\n                eventList[eventType].splice(i, 1);\n                return;\n            }\n        }\n    };\n\n    /**\n     * Trigger an event on an object. All listeners for the specified eventType will be called.\n     * Listeners will be bound to the object ('this' will refer to the object), and additional\n     * arguments to fire() will be passed into each listener.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.fire\n     * @param {string} eventType - A developer-specified string identifying the event to fire.\n     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n     * the listener\n     */\n    that.fire = function (eventType, evt) {\n        var args = null;\n        var count = 0;\n\n        evt = evt || {};\n        evt.name = eventType;\n        evt.target = that;\n\n        if (!eventType) {\n            return;\n        }\n\n        if (!eventList[eventType]) {\n            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n            return;\n        }\n\n        for (var i = eventList[eventType].length; i > -1; i -= 1) {\n            var listener = eventList[eventType][i];\n            if (typeof listener === 'function') {\n                setTimeout(listenerBuilder(listener, evt, eventType));\n\n                count += 1;\n                if (listener.once) {\n                    eventList[eventType].splice(i, 1);\n                }\n            }\n        }\n        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n    };\n\n    function listenerBuilder(listener, evt, eventType) {\n        return function () {\n            try {\n                listener.call(that, evt);\n            } catch (e) {\n                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n            }\n        };\n    }\n\n    /**\n     * Determine if an object has had any listeners registered for a given event outside the library. This method\n     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n     * {respoke.Client#call}, we'll need to reject the call immediately.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.hasListeners\n     * @param {string} eventType - The name of the event\n     * @returns {boolean} Whether this event has any listeners that are external to this library.\n     */\n    that.hasListeners = function (eventType) {\n        if (eventType === undefined) {\n            throw new Error(\"Missing required parameter event type.\");\n        }\n\n        if (!eventList[eventType]) {\n            return false;\n        }\n\n        return !eventList[eventType].every(function eachListener(listener) {\n            return listener.isInternal;\n        });\n    };\n\n    return that;\n}; // End respoke.EventEmitter\n/**\n * @callback respoke.EventEmitter.eventListener\n * @param {respoke.Event} evt\n */\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\nvar log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n * a `respoke.Client` instance.\n * \n * There are two ways to get a client:\n * \n *      var client = respoke.createClient(clientParams);\n *      // . . . set stuff up, then . . .\n *      client.connect(connectParams);\n *\n * or\n *\n *      // creates client and connects to Respoke all at once\n *      var client = respoke.connect(allParams);\n *\n * A client does the following things:\n *\n * 1. authentication with the Respoke API\n * 1. receives server-side app-specific information\n * 1. tracks connections and presence\n * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n * 1. stores default settings for calls and direct connections\n * 1. automatically reconnects to the API when network activity is lost*\n *\n * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n *\n * @class respoke.Client\n * @constructor\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n * respoke.connect, respoke.createClient, or to client.connect.\n * @param {string} [params.token] - The endpoint's authentication token.\n * @param {RTCConstraints} [params.constraints] - A set of default WebRTC call constraints if you wish to use\n * different parameters than the built-in defaults.\n * @param {RTCICEServers} [params.servers] - A set of default WebRTC ICE/STUN/TURN servers if you wish to use\n * different parameters than the built-in defaults.\n * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n * endpoint. This is only used when `developmentMode` is set to `true`.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n * from anywhere on the system.\n * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n * receives a request for a direct connection.\n * @returns {respoke.Client}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId || respoke.makeGUID();\n    params.instanceId = instanceId;\n    var that = respoke.Presentable(params);\n    respoke.instances[instanceId] = that;\n    delete that.instanceId;\n    that.connectTries = 0;\n    /**\n     * A name to identify this class\n     * @memberof! respoke.Client\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Client';\n    /**\n     * @memberof! respoke.Client\n     * @name host\n     * @type {string}\n     * @private\n     */\n    var host = window.location.hostname;\n    /**\n     * @memberof! respoke.Client\n     * @name port\n     * @type {number}\n     * @private\n     */\n    var port = window.location.port;\n    /**\n     * A simple POJO to store some methods we will want to override but reference later.\n     * @memberof! respoke.Client\n     * @name superClass\n     * @private\n     * @type {object}\n     */\n    var superClass = {\n        setPresence: that.setPresence\n    };\n    /**\n     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n     * @memberof! respoke.Client\n     * @name clientSettings\n     * @type {object}\n     * @private\n     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n     * @property {string} [token] - The endpoint's authentication token.\n     * @property {string} [appId] - The id of your Respoke app.\n     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @property {boolean} [reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @property {onJoin} [onJoin] - Callback for when this client's endpoint joins a group.\n     * @property {onLeave} [onLeave] - Callback for when this client's endpoint leaves a group.\n     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n     * from anywhere on the system.\n     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n     * receives a request for a direct connection.\n     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n     * information to the API? Defaults to `true`.\n     */\n    var clientSettings = {\n        baseURL: params.baseURL,\n        token: params.token,\n        appId: params.appId,\n        developmentMode: typeof params.developmentMode === 'boolean' ? params.developmentMode : false,\n        reconnect: typeof params.developmentMode === 'boolean' ? params.developmentMode : true,\n        endpointId: params.endpointId,\n        onJoin: params.onJoin,\n        onLeave: params.onLeave,\n        onMessage: params.onMessage,\n        onConnect: params.onConnect,\n        onDisconnect: params.onDisconnect,\n        onReconnect: params.onReconnect,\n        onCall: params.onCall,\n        onDirectConnection: params.onDirectConnection,\n        resolveEndpointPresence: params.resolveEndpointPresence,\n        enableCallDebugReport: typeof params.enableCallDebugReport === 'boolean' ? params.enableCallDebugReport : true\n    };\n    delete that.appId;\n    delete that.baseURL;\n    delete that.developmentMode;\n    delete that.token;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Internal list of known groups.\n     * @memberof! respoke.Client\n     * @name groups\n     * @type {Array<respoke.Group>}\n     * @private\n     */\n    var groups = [];\n    /**\n     * Internal list of known endpoints.\n     * @memberof! respoke.Client\n     * @name endpoints\n     * @type {Array<respoke.Endpoint>}\n     * @private\n     */\n    var endpoints = [];\n    /**\n     * Array of calls in progress, made accessible for informational purposes only.\n     * **Never modify this array directly.**\n     *\n     * @memberof! respoke.Client\n     * @name calls\n     * @type {array}\n     */\n    that.calls = [];\n    log.debug(\"Client ID is \", instanceId);\n\n    /**\n     * Default call settings:\n     *\n     *      constraints: {\n     *          video : true,\n     *          audio : true,\n     *          optional: [],\n     *          mandatory: {}\n     *      },\n     *      servers: {\n     *          iceServers: []\n     *      }\n     *\n     * @memberof! respoke.Client\n     * @name callSettings\n     * @type {object}\n     */\n    that.callSettings = {\n        constraints: params.constraints || {\n            video : true,\n            audio : true,\n            optional: [],\n            mandatory: {}\n        },\n        servers: params.servers || {\n            iceServers: []\n        }\n    };\n\n    /**\n     * @memberof! respoke.Client\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = respoke.SignalingChannel({\n        instanceId: instanceId,\n        clientSettings: clientSettings\n    });\n\n    /**\n     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n     *\n     * After `\"connect\"`, the app auth session token is stored so it can be used in API requests.\n     *\n     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n     *\n     * #### Usage\n     *\n     *      client.connect({\n     *          appId: \"XXXX-XXX-XX-XXXX\",\n     *          token: \"XXXX-XXX-XX-XXXX\", // if not developmentMode\n     *          developmentMode: false || true\n     *          // if developmentMode, otherwise your server will set endpointId\n     *          endpointId: \"billy\"\n     *      });\n     *      client.listen(\"connect\", function () { } );\n     *\n     *\n     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n     * automatically. You must set an `endpointId`.\n     *\n     *\n     * #### App auth session token expiration\n     *\n     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n     * will attempt to keep reconnecting each time the app auth session expires.\n     *\n     * If not using `developmentMode`, disable automatic reconnect by sending `reconnect: false`.\n     * Then listen to the Client's disconnect event to fetch a new brokered auth token and call\n     * `client.connect()` with the new token.\n     *\n     *      client.listen('disconnect', function () {\n     *\n     *          // example method you implemented to get a new token from your server\n     *          myServer.getNewRespokeAccessToken(function (newToken) {\n     *              // reconnect with respoke.Client\n     *              client.connect({ token: newToken });\n     *          });\n     *\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.connect\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {RTCConstraints} [params.constraints] - A set of default WebRTC call constraints if you wish to use\n     * different parameters than the built-in defaults.\n     * @param {RTCICEServers} [params.servers] - A set of default WebRTC ICE/STUN/TURN servers if you wish to use\n     * different parameters than the built-in defaults.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @returns {Promise|undefined}\n     * @fires respoke.Client#connect\n     */\n    that.connect = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n        log.debug('Client.connect');\n        that.connectTries += 1;\n\n        Object.keys(params).forEach(function eachParam(key) {\n            if (['onSuccess', 'onError'].indexOf(key) === -1 && params[key] !== undefined) {\n                clientSettings[key] = params[key];\n            }\n        });\n        that.endpointId = clientSettings.endpointId;\n        promise = actuallyConnect(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        promise.then(function successHandler() {\n            /**\n             * This event is fired the first time the library connects to the cloud infrastructure.\n             * @event respoke.Client#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('connect');\n\n            /**\n             * This event fires only when the initial `connect` fails.\n             *\n             * @ignore **This comment is for documentation purposes**, since #error bubbles\n             * up from other classes, but it should show on `respoke.Client` docs.\n             *\n             * @event respoke.Client#error\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n        });\n        return retVal;\n    };\n\n    /**\n     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n     *\n     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.actuallyConnect\n     * @private\n     * @param {object} params\n     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    function actuallyConnect(params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!clientSettings.token &&\n                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n                \"to client.connect().\"));\n            return deferred.promise;\n        }\n\n        signalingChannel.open({\n            actuallyConnect: actuallyConnect,\n            endpointId: that.endpointId,\n            token: clientSettings.token\n        }).then(function successHandler() {\n            return signalingChannel.authenticate();\n        }).done(function successHandler() {\n            // set initial presence for the connection\n            if (clientSettings.presence) {\n                that.setPresence({presence: clientSettings.presence});\n            }\n\n            /*\n             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n             * not to be duplicated on reconnect.\n             */\n\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, `evt.call.answer()`.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('call', clientSettings.onCall);\n            /**\n             * This event is fired when the local end of the directConnection is available. It still will not be\n             * ready to send and receive messages until the 'open' event fires.\n             * @event respoke.Client#direct-connection\n             * @type {respoke.Event}\n             * @property {respoke.DirectConnection} directConnection\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.listen('direct-connection', clientSettings.onDirectConnection);\n            that.listen('join', clientSettings.onJoin);\n            /**\n             * This event is fired every time the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.listen('leave', clientSettings.onLeave);\n            /**\n             * A generic message handler when a message was received by the client.\n             *\n             * @event respoke.Client#message\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n             * @property {respoke.Group} group - If the message was to a group, this is the group.\n             * @property {respoke.TextMessage} message - The generic message object.\n             * @property {string} message.connectionId\n             * @property {string} message.endpointId\n             * @property {string} message.message - Message body text.\n             * @property {respoke.Client} target\n             */\n            that.listen('message', clientSettings.onMessage);\n            that.listen('connect', clientSettings.onConnect);\n            /**\n             * Client has disconnected from Respoke.\n             *\n             * @event respoke.Client#disconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('disconnect', clientSettings.onDisconnect);\n            /**\n             * Client has reconnected to Respoke.\n             *\n             * @event respoke.Client#reconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('reconnect', clientSettings.onReconnect);\n\n            log.info('logged in as ' + that.endpointId, that);\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(\"Couldn't create an endpoint.\");\n            log.error(err.message, err.stack);\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.disconnect\n     * @returns {Promise|undefined}\n     * @param {object} params\n     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#disconnect\n     */\n    that.disconnect = function (params) {\n        // TODO: also call this on socket disconnect\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        var leaveGroups = groups.map(function eachGroup(group) {\n            group.leave();\n        });\n\n        Q.all(leaveGroups).fin(function successHandler() {\n            return signalingChannel.close();\n        }).fin(function finallyHandler() {\n            that.presence = 'unavailable';\n            endpoints = [];\n            groups = [];\n            /**\n             * This event is fired when the library has disconnected from the cloud infrastructure.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('disconnect');\n            deferred.resolve();\n        }).done();\n\n        return retVal;\n    };\n\n    /**\n     * Set the presence for this client.\n     *\n     * The value of presence can be a string, number, object, or array - in any format -\n     * depending on the needs of your application. The only requirement is that\n     * `JSON.stringify()` must work (no circular references).\n     *\n     *      var myPresence = 'At lunch'\n     *                      || 4\n     *                      || { status: 'Away', message: 'At lunch' }\n     *                      || ['Away', 'At lunch'];\n     *\n     *      client.setPresence({\n     *          presence: myPresence, \n     *          onSuccess: function (evt) {\n     *              // successfully updated my presence\n     *          }\n     *      });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setPresence\n     * @param {object} params\n     * @param {string|number|object|array} params.presence\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @overrides Presentable.setPresence\n     * @return {Promise|undefined}\n     */\n    that.setPresence = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        log.info('sending my presence update ' + params.presence);\n\n        promise = signalingChannel.sendPresence({\n            presence: params.presence\n        });\n\n        promise.then(function successHandler(p) {\n            superClass.setPresence(params);\n            clientSettings.presence = params.presence;\n        });\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Get the Call with the endpoint specified.\n     * @memberof! respoke.Client\n     * @method respoke.Client.getCall\n     * @param {object} params\n     * @param {string} [params.id] - Call ID.\n     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n     * pass in the call ID, too.\n     * @param {boolean} params.create - whether or not to create a new call if the specified endpointId isn't found\n     * @returns {respoke.Call}\n     */\n    that.getCall = function (params) {\n        var call = null;\n        var endpoint = null;\n\n        that.calls.every(function findCall(one) {\n            if (params.id && one.id === params.id) {\n                call = one;\n                return false;\n            }\n\n            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n                call = one;\n                return false;\n            }\n            return true;\n        });\n\n        if (call === null && params.create === true) {\n            if (params.fromType === 'did') {\n                try {\n                    call = that.startPhoneCall({\n                        id: params.id,\n                        number: params.endpointId, //phone number\n                        caller: false,\n                        fromType: 'web',\n                        toType: 'did'\n                    });\n                } catch (e) {\n                    log.error(\"Couldn't create Call.\", e.message, e.stack);\n                }\n            } else {\n                endpoint = that.getEndpoint({id: params.endpointId});\n                try {\n                    call = endpoint.startCall({\n                        id: params.id,\n                        caller: false\n                    });\n                } catch (e) {\n                    log.error(\"Couldn't create Call.\", e.message, e.stack);\n                }\n            }\n        }\n        return call;\n    };\n\n    /**\n     * Add the call to internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.call\n     * @param {respoke.Endpoint} evt.endpoint\n     * @private\n     */\n    function addCall(evt) {\n        log.debug('addCall');\n        if (!evt.call) {\n            throw new Error(\"Can't add call without a call parameter.\");\n        }\n        if (that.calls.indexOf(evt.call) === -1) {\n            that.calls.push(evt.call);\n        }\n\n        evt.call.listen('hangup', function () {\n            removeCall({call: evt.call});\n        });\n    }\n\n    /**\n     * Remove the call or direct connection from internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.removeCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.target\n     * @private\n     */\n    function removeCall(evt) {\n        var match = 0;\n        if (!evt.call) {\n            throw new Error(\"Can't remove call without a call parameter.\");\n        }\n\n        // Loop backward since we're modifying the array in place.\n        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n            if (that.calls[i].id === evt.call.id) {\n                that.calls.splice(i, 1);\n                match += 1;\n            }\n        }\n\n        if (match !== 1) {\n            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n        }\n    }\n\n    /**\n     * Convenience method for setting presence to `\"available\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOnline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     * @private\n     */\n    that.setOnline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'available';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Send a message to an endpoint.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.sendMessage\n     * @param {object} params\n     * @param {string} params.endpointId - The endpoint id of the recipient.\n     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n     * broadcast to all connections for this endpoint.\n     * @param {string} params.message - a string message.\n     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        var endpoint;\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n        endpoint = that.getEndpoint({id: params.endpointId});\n        delete params.endpointId;\n        return endpoint.sendMessage(params);\n    };\n\n    /**\n     * Place an audio and/or video call to an endpoint.\n     * \n     *     // defaults to video when no constraints are supplied\n     *     client.startCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     * \n     * @memberof! respoke.Client\n     * @method respoke.Client.startCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {RTCServers} [params.servers]\n     * @param {RTCConstraints} [params.constraints]\n     * @param {string} [params.connectionId]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startCall = function (params) {\n        var promise;\n        var retVal;\n        var endpoint;\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n\n        endpoint = that.getEndpoint({id: params.endpointId});\n        delete params.endpointId;\n        return endpoint.startCall(params);\n    };\n\n    /**\n     * Place an audio call with a phone number.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startPhoneCall\n     * @param {object} params\n     * @param {string} params.number - The phone number that should be called.\n     * @param {RTCServers} [params.servers]\n     * @param {RTCConstraints} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     * @private\n     */\n    that.startPhoneCall = function (params) {\n        var promise;\n        var retVal;\n        var call = null;\n        var recipient = {};\n        var combinedCallSettings = JSON.parse(JSON.stringify(that.callSettings)); //clone\n        params = params || {};\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n\n        if (params.caller === undefined) {\n            params.caller = true;\n        }\n\n        if (!params.number) {\n            log.error(\"Can't start a phone call without a number.\");\n            promise = Q.reject(new Error(\"Can't start a phone call without a number.\"));\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n\n        recipient.id = params.number;\n\n        // Apply call-specific callSettings to the app's defaults\n        combinedCallSettings.constraints = params.constraints || combinedCallSettings.constraints;\n        combinedCallSettings.servers = params.servers || combinedCallSettings.servers;\n        // Audio only phone calls allowed\n        combinedCallSettings.constraints.audio = true;\n        combinedCallSettings.constraints.video = false;\n        log.debug('Final callSettings is', combinedCallSettings);\n\n        params.callSettings = combinedCallSettings;\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n        \n        params.toType = params.toType || 'did';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send candidate.\", err.message, err.stack);\n            });\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Assert that we are connected to the backend infrastructure.\n     * @memberof! respoke.Client\n     * @method respoke.Client.verifyConnected\n     * @throws {Error}\n     * @private\n     */\n    that.verifyConnected = function () {\n        if (!signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    };\n\n    /**\n     * Check whether this client is connected to the Respoke API.\n     * @memberof! respoke.Client\n     * @method respoke.Client.isConnected\n     * @returns boolean\n     */\n    that.isConnected = function () {\n        return signalingChannel.isConnected();\n    };\n\n    /**\n     * Join a group and begin keeping track of it.\n     * \n     * You can leave the group by calling `group.leave()`;\n     * \n     * ##### Joining and leaving a group\n     * \n     *      var group;\n     * \n     *      client.join({ \n     *          id: \"book-club\",\n     *          onSuccess: function (evt) {\n     *              console.log('I joined', evt.group.id);\n     *              // \"I joined book-club\"\n     *              group = evt.group;\n     *              group.sendMessage({\n     *                  message: 'sup'\n     *              });\n     *          }\n     *      });\n     * \n     *      // . . .\n     *      // Some time later, leave the group.\n     *      // . . .\n     *      group.leave({\n     *          onSuccess: function (evt) {\n     *              console.log('I left', evt.group.id);\n     *              // \"I left book-club\"\n     *          }\n     *      });\n     * \n     * @memberof! respoke.Client\n     * @method respoke.Client.join\n     * @param {object} params\n     * @param {string} params.id - The name of the group.\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n     * this group only.\n     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n     * @fires respoke.Client#join\n     */\n    that.join = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n            return retVal;\n        }\n\n        signalingChannel.joinGroup({\n            id: params.id\n        }).done(function successHandler() {\n            var group;\n            params.signalingChannel = signalingChannel;\n            params.instanceId = instanceId;\n\n            group = that.getGroup({id: params.id});\n\n            if (!group) {\n                group = respoke.Group(params);\n                that.addGroup(group);\n            }\n\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n\n            group.addMember({\n                connection: that.getConnection({\n                    endpointId: that.endpointId,\n                    connectionId: that.connectionId\n                })\n            });\n\n            /**\n             * This event is fired every time the client joins a group. If the client leaves\n             * a group, this event will be fired again on the next time the client joins the group.\n             * @event respoke.Client#join\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.fire('join', {\n                group: group\n            });\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    /**\n     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addGroup\n     * @param {respoke.Group}\n     * @private\n     */\n    that.addGroup = function (newGroup) {\n        if (!newGroup || newGroup.className !== 'respoke.Group') {\n            throw new Error(\"Can't add group to internal tracking without a group.\");\n        }\n\n        newGroup.listen('leave', function leaveHandler(evt) {\n            newGroup.removeMember({connectionId: evt.connection.id});\n            checkEndpointForRemoval(evt.connection.getEndpoint());\n        }, true);\n\n        groups.push(newGroup);\n    };\n\n    /**\n     * Get a list of all the groups the client is currently a member of.\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroups\n     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n     */\n    that.getGroups = function () {\n        return groups;\n    };\n\n    /**\n     * Find a group by id and return it.\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroup\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n     * received to a group.\n     * @returns {respoke.Group|undefined} The group whose ID was specified.\n     */\n    that.getGroup = function (params) {\n        var group;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get a group without group id.\");\n        }\n\n        groups.every(function eachGroup(grp) {\n            if (grp.id === params.id) {\n                group = grp;\n                return false;\n            }\n            return true;\n        });\n\n        if (group) {\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n        }\n\n        return group;\n    };\n\n    /**\n     * Remove an Endpoint. Since an endpoint can be a member of multiple groups, we can't just remove it from\n     * our list on respoke.Endpoint#leave. We must see if it's a member of any more groups. If it's not\n     * a member of any other groups, we can stop keeping track of it.\n     * @todo TODO Need to account for Endpoints not created as part of a group. These do not need to be\n     * deleted based on group membership.\n     * @memberof! respoke.Client\n     * @method respoke.Client.checkEndpointForRemoval\n     * @param {object} params\n     * @param {string} params.id - The ID of the Endpoint to check for removal.\n     * @private\n     */\n    function checkEndpointForRemoval(params) {\n        params = params || {};\n        if (!params.id) {\n            throw new Error(\"Can't remove endpoint from internal tracking without group id.\");\n        }\n\n        Q.all(groups.map(function eachGroup(group) {\n            return group.getMembers();\n        })).done(function successHandler(connectionsByGroup) {\n            // connectionsByGroup is a two-dimensional array where the first dimension is a group\n            // and the second dimension is a connection.\n            var absent = connectionsByGroup.every(function eachConnectionList(connectionList) {\n                return connectionList.every(function eachConnection(conn) {\n                    return (conn.endpointId !== params.id);\n                });\n            });\n            if (absent) {\n                endpoints.every(function eachEndpoint(ept, index) {\n                    if (ept.id === params.id) {\n                        endpoints.splice(index, 1);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n        });\n    }\n\n    /**\n     * Find an endpoint by id and return the `respoke.Endpoint` object.\n     *\n     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n     * its presence will be determined, and will be available in `client.getEndpoints()`.\n     *\n     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoint\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Endpoint.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Endpoint.\n     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n     */\n    that.getEndpoint = function (params) {\n        var endpoint;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get an endpoint without endpoint id.\");\n        }\n\n        endpoints.every(function eachEndpoint(ept) {\n            if (ept.id === params.id) {\n                endpoint = ept;\n                return false;\n            }\n            return true;\n        });\n\n        if (!endpoint && params && !params.skipCreate) {\n            params.instanceId = instanceId;\n            params.signalingChannel = signalingChannel;\n            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n            params.addCall = addCall;\n\n            endpoint = respoke.Endpoint(params);\n            signalingChannel.registerPresence({\n                endpointList: [endpoint.id]\n            }).done(null, function (err) {\n                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n            });\n            endpoints.push(endpoint);\n        }\n\n        if (endpoint) {\n            endpoint.listen('presence', params.onPresence);\n            endpoint.listen('message', params.onMessage);\n        }\n\n        return endpoint;\n    };\n\n    /**\n     * Find a Connection by id and return it.\n     *\n     * @ignore In most cases, if we don't find it we will create it. This is useful\n     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n     * to return undefined if the Connection is not already known.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getConnection\n     * @param {object} params\n     * @param {string} params.connectionId\n     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Connection.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Connection.\n     * @returns {respoke.Connection} The connection whose ID was specified.\n     */\n    that.getConnection = function (params) {\n        var connection;\n        var endpoint;\n        var endpointsToSearch = endpoints;\n\n        params = params || {};\n        if (!params.connectionId) {\n            throw new Error(\"Can't get a connection without connection id.\");\n        }\n        if (!params.endpointId && !params.skipCreate) {\n            throw new Error(\"Can't create a connection without endpoint id.\");\n        }\n\n        if (params.endpointId) {\n            endpoint = that.getEndpoint({\n                id: params.endpointId,\n                skipCreate: params.skipCreate\n            });\n\n            endpointsToSearch = [];\n            if (endpoint) {\n                endpointsToSearch = [endpoint];\n            }\n        }\n\n        endpointsToSearch.every(function eachEndpoint(ept) {\n            connection = ept.getConnection(params);\n            return !connection;\n        });\n\n        if (!connection && !params.skipCreate) {\n            params.instanceId = instanceId;\n            connection = respoke.Connection(params);\n            endpoint.connections.push(connection);\n        }\n\n        return connection;\n    };\n\n    /**\n     * Get the list of **all endpoints** that the library has knowledge of.\n     * These are `respoke.Endpoint` objects, not just the endpointIds.\n     *\n     * The library gains knowledge of an endpoint in two ways:\n     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n     *\n     * *If an endpoint that the library does not know about sends a message to the client, you\n     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n     * watching of the sender's endpoint.\n     *\n     *      client.on('message', function (data) {\n     *          if (data.endpoint) {\n     *              // start tracking this endpoint.\n     *              client.getEndpoint({ id: data.endpoint.id });\n     *          }\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoints\n     * @returns {Array<respoke.Endpoint>}\n     */\n    that.getEndpoints = function () {\n        return endpoints;\n    };\n\n    return that;\n}; // End respoke.Client\n\n/**\n * Handle sending successfully.\n * @callback respoke.Client.successHandler\n */\n/**\n * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n * @callback respoke.Client.joinHandler\n * @param {respoke.Group} group\n */\n/**\n * Receive notification that the client has joined a group. This callback is called everytime\n * respoke.Client#join is fired.\n * @callback respoke.Client.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client has left a group. This callback is called everytime\n * respoke.Client#leave is fired.\n * @callback respoke.Client.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that a message has been received. This callback is called every time\n * respoke.Client#message is fired.\n * @callback respoke.Client.onClientMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n * the group. From that point forward, Group#message will fire when a message is received as well. If\n * group is undefined instead of null, the message is not a group message at all.\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification that the client is receiving a call from a remote party. This callback is called every\n * time respoke.Client#call is fired.\n * @callback respoke.Client.onCall\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.call\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client is receiving a request for a direct connection from a remote party.\n * This callback is called every time respoke.Client#direct-connection is fired.\n * @callback respoke.Client.onDirectConnection\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.directConnection\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n * respoke.Client#connect is fired.\n * @callback respoke.Client.onConnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n * respoke.Client#disconnect is fired.\n * @callback respoke.Client.onDisconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n * respoke.Client#reconnect is fired.\n * @callback respoke.Client.onReconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Handle disconnection to the cloud successfully.\n * @callback respoke.Client.disconnectSuccessHandler\n */\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Client.errorHandler\n * @params {Error} err\n */\n/**\n * Handle connection to the cloud successfully.\n * @callback respoke.Client.connectSuccessHandler\n */\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @ignore\n */\n\nvar respoke = require('./respoke');\n\n/**\n * The purpose of the class is to allow multiple types of entities to expose presence functionality.\n * \n * Setting the presence on a client is provided via `client.setPresence({ presence: \"At lunch\" })`.\n * \n * @class respoke.Presentable\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId\n * @param {string} params.id\n * @returns {respoke.Presentable}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Presentable\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Presentable\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Presentable';\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     * \n     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n     * \n     * @memberof! respoke.Presentable\n     * @name presence\n     * @type {string|number|object|Array}\n     * @private\n     */\n    that.presence = 'unavailable';\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * Set the presence on the object for this session.\n     * \n     * @memberof! respoke.Presentable\n     * @method respoke.Presentable.setPresence\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} params.connectionId\n     * @fires respoke.Presentable#presence\n     * @private\n     */\n    that.setPresence = function (params) {\n        var connection;\n        params = params || {};\n        params.presence = params.presence || 'available';\n        params.connectionId = params.connectionId || that.connectionId;\n\n        if (that.className === 'respoke.Client' || that.className === 'respoke.Connection') {\n            that.presence = params.presence;\n            if (that.className === 'respoke.Connection') {\n                that.getEndpoint().resolvePresence();\n            }\n        } else if (that.className === 'respoke.Endpoint') {\n            if (!params.connectionId) {\n                throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n            }\n\n            connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n                connectionId: params.connectionId,\n                skipCreate: false,\n                endpointId: that.id\n            });\n\n            connection.presence = params.presence;\n            that.resolvePresence();\n        }\n\n        /**\n         * This event indicates that the presence for this endpoint has been updated.\n         * @event respoke.Presentable#presence\n         * @type {respoke.Event}\n         * @property {string|number|object|Array} presence\n         * @property {string} name - the event name.\n         * @property {respoke.Presentable} target\n         */\n        that.fire('presence', {\n            presence: that.presence\n        });\n    };\n\n    /**\n     * Get the presence of a Presentable instance.\n     * \n     *      var billy = client.getEndpoint({ id: \"billychia\" });\n     *      var pres = billy.getPresence();\n     *      console.log('Billy is', pres); // \"Billy is available\"\n     * \n     * @memberof! respoke.Presentable\n     * @method respoke.Presentable.getPresence\n     * @returns {string|number|object|array} the current presence of this endpoint.\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    return that;\n}; // End respoke.Presentable\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Connection` always belongs to an Endpoint.\n * \n * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated \n * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection. \n * A Client can choose to interact with connections of the same endpoint in different ways.\n * \n * @constructor\n * @class respoke.Connection\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} params.id\n * @returns {respoke.Connection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Connection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.Presentable(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * The connection id.\n     * @memberof! respoke.Connection\n     * @name id\n     * @type {string}\n     */\n    that.id = that.id || that.connectionId;\n    if (!that.id) {\n        throw new Error(\"Can't make a connection without an id.\");\n    }\n    delete that.instanceId;\n    delete that.connectionId;\n\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Connection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Connection';\n\n    /**\n     * Send a message to this connection of an endpoint. If the endpoint has mutliple connections, \n     * it will only receive the message at this connection.\n     * \n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().sendMessage(params);\n    };\n\n    /**\n     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n     * by another connection of this Endpoint.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {RTCServers} [params.servers]\n     * @param {RTCConstraints} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startCall(params);\n    };\n\n    /**\n     * Create a new audio-only call.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startAudioCall\n     * @param {object} params\n     * @param {RTCServers} [params.servers]\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        params.constraints = {\n            video : false,\n            audio : true,\n            optional: [],\n            mandatory: {}\n        };\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startVideoCall\n     * @param {object} params\n     * @param {RTCServers} [params.servers]\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n     * been hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startCall(params);\n    };\n\n    /**\n     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @param {RTCServers} [params.servers] - Additional ICE/STUN/TURN servers to use in connecting.\n     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startDirectConnection(params);\n    };\n\n    /**\n     * Get the Endpoint that this Connection belongs to.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.getEndpoint\n     * @returns {respoke.Endpoint}\n     */\n    that.getEndpoint = function () {\n        return client.getEndpoint({id: that.endpointId});\n    };\n\n    return that;\n}; // End respoke.Connection\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * `respoke.Endpoint`s are users of a Respoke app.\n * \n * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n * \n * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n * \n * An Endpoint may be authenticated from multiple devices to the same app (each of\n * which is represented by a Connection).\n * \n * \n * @constructor\n * @class respoke.Endpoint\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} params.id\n * @param {string} params.instanceId\n * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence for an endpoint.\n * @returns {respoke.Endpoint}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Endpoint\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.Presentable(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n\n    var clone = function (source) {\n        return JSON.parse(JSON.stringify(source));\n    };\n\n    var addCall = params.addCall;\n\n    delete that.signalingChannel;\n    delete that.instanceId;\n    delete that.connectionId;\n    delete that.addCall;\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Endpoint\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Endpoint';\n    /**\n     * A direct connection to this endpoint. This can be used to send direct messages.\n     * @memberof! respoke.Endpoint\n     * @name directConnection\n     * @type {respoke.DirectConnection}\n     */\n    that.directConnection = null;\n\n    /**\n     * Array of connections for this endpoint.\n     * @memberof! respoke.Endpoint\n     * @name connections\n     * @type {Array<respoke.Connection>}\n     */\n    that.connections = [];\n    client.listen('disconnect', function disconnectHandler() {\n        that.connections = [];\n    });\n\n\n    var resolveEndpointPresence = params.resolveEndpointPresence;\n    delete that.resolveEndpointPresence;\n\n\n    /**\n     * Send a message to the endpoint through the infrastructure.\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {string} [params.connectionId]\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n     * method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n     * only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n\n        promise = signalingChannel.sendMessage({\n            connectionId: params.connectionId,\n            message: params.message,\n            recipient: that\n        });\n\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Create a new audio-only call.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startAudioCall\n     * @param {object} params\n     * @param {RTCServers} [params.servers]\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        params = params || {};\n        params.constraints = {\n            video : false,\n            audio : true,\n            optional: [],\n            mandatory: {}\n        };\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startVideoCall\n     * @param {object} params\n     * @param {RTCServers} [params.servers]\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        params = params || {};\n        params.constraints = {\n            video : true,\n            audio : true,\n            optional: [],\n            mandatory: {}\n        };\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {RTCServers} [params.servers]\n     * @param {RTCConstraints} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        var call = null;\n        var combinedCallSettings = clone(client.callSettings);\n        params = params || {};\n\n        log.debug('Endpoint.call');\n        client.verifyConnected();\n        log.debug('Default callSettings is', combinedCallSettings);\n        if (params.caller === undefined) {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            log.error(\"Can't start a call without endpoint ID!\");\n            return;\n        }\n\n        // Apply call-specific callSettings to the app's defaults\n        combinedCallSettings.constraints = params.constraints || combinedCallSettings.constraints;\n        combinedCallSettings.servers = params.servers || combinedCallSettings.servers;\n        log.debug('Final callSettings is', combinedCallSettings);\n\n        params.callSettings = combinedCallSettings;\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendSDP(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.call.connectionId;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n                log.warn(\"Couldn't send candidate.\", err.message, err.stack);\n            });\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams).done(null, function errorHandler(err) {\n                log.warn(\"Couldn't debug report.\", err.message, err.stack);\n            });\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n     * a direct connection open, this method will resolve the promise with that direct connection instead of\n     * attempting to create a new one.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {RTCServers} [params.servers] - Additional ICE/STUN/TURN servers to use in connecting.\n     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n     * in from multiple locations.\n     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        params = params || {};\n        var combinedConnectionSettings = clone(client.callSettings);\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        var call;\n\n        try {\n            client.verifyConnected();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (that.directConnection || params.create === false) {\n            deferred.resolve(that.directConnection);\n            return retVal;\n        }\n\n        log.debug('Endpoint.startDirectConnection', params);\n        if (params.caller === undefined) {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n            return retVal;\n        }\n\n        // Apply connection-specific connectionSettings to the app's defaults\n        combinedConnectionSettings.constraints = params.constraints || combinedConnectionSettings.constraints;\n        combinedConnectionSettings.servers = params.servers || combinedConnectionSettings.servers;\n\n        params.callSettings = combinedConnectionSettings;\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalAnswer = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalParams.signalType = 'answer';\n            signalingChannel.sendSDP(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send candidate.\", err.message, err.stack);\n            });\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            signalParams.report.target = 'directConnection';\n            log.debug(\"Not sending report\");\n            log.debug(signalParams.report);\n        };\n        params.needDirectConnection = true;\n        // Don't include audio in the offer SDP\n        params.offerOptions = {\n            mandatory: {\n                OfferToReceiveAudio: false\n            }\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        call.listen('direct-connection', function directConnectionHandler(evt) {\n            that.directConnection = evt.directConnection;\n            if (params.caller !== true) {\n                if (!client.hasListeners('direct-connection') &&\n                        !client.hasListeners('direct-connection') &&\n                        !call.hasListeners('direct-connection')) {\n                    that.directConnection.reject();\n                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n                    return;\n                }\n\n                deferred.resolve(that.directConnection);\n                that.directConnection.listen('close', function closeHandler(evt) {\n                    that.directConnection = undefined;\n                }, true);\n            }\n        }, true);\n\n        return retVal;\n    };\n\n    /**\n     * Find the presence out of all known connections with the highest priority (most availability)\n     * and set it as the endpoint's resolved presence.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.resolvePresence\n     * @private\n     */\n    that.resolvePresence = function () {\n\n        var presenceList = that.connections.map(function (connection) {\n            return connection.presence;\n        });\n\n        if (resolveEndpointPresence !== undefined) {\n            that.presence = resolveEndpointPresence(presenceList);\n        } else {\n            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n            var idList;\n\n            /*\n             * Sort the connections array by the priority of the value of the presence of that\n             * connectionId. This will cause the first element in the list to be the id of the\n             * session with the highest priority presence so we can access it by the 0 index.\n             * TODO: If we don't really care about the sorting and only about the highest priority\n             * we could use Array.prototype.every to improve this algorithm.\n             */\n            idList = that.connections.sort(function sorter(a, b) {\n                var indexA = options.indexOf(a.presence);\n                var indexB = options.indexOf(b.presence);\n                // Move it to the end of the list if it isn't one of our accepted presence values\n                indexA = indexA === -1 ? 1000 : indexA;\n                indexB = indexB === -1 ? 1000 : indexB;\n                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n            });\n\n            if (idList[0]) {\n                that.presence = idList[0].presence;\n            } else {\n                that.presence = 'unavailable';\n            }\n        }\n    };\n\n    /**\n     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.getConnection\n     * @private\n     * @param {object} params\n     * @param {string} [params.connectionId]\n     * @return {respoke.Connection}\n     */\n    that.getConnection = function (params) {\n        var connection = null;\n        params = params || {};\n        if (that.connections.length === 1 &&\n                (!params.connectionId || that.connections[0] === params.connectionId)) {\n            return that.connections[0];\n        }\n\n        if (!params || !params.connectionId) {\n            throw new Error(\"Can't find a connection without the connectionId.\");\n        }\n\n        that.connections.every(function eachConnection(conn) {\n            if (conn.id === params.connectionId) {\n                connection = conn;\n                return false;\n            }\n            return true;\n        });\n\n        return connection;\n    };\n\n    return that;\n}; // End respoke.Endpoint\n/**\n * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message - the message\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n/**\n * Handle presence notifications from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onPresence\n * @param {respoke.Event} evt\n * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n /**\n * Handle resolving presence for this endpoint\n * @callback respoke.Client.resolveEndpointPresence\n * @param {Array<object>} connectionPresence\n * @returns {object|string|number}\n */\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\n/**\n * A text message and the information needed to route it.\n * @class respoke.TextMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n * @param {string} [params.message] - If sending, a message to send\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.TextMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.TextMessage\n     * @method respoke.TextMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that.endpointId = params.rawMessage.header.from;\n                that.connectionId = params.rawMessage.header.fromConnection;\n                that.timestamp = params.rawMessage.header.timestamp;\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.rawMessage.message || params.rawMessage.body;\n            if (params.rawMessage.header.channel) {\n                that.recipient = params.rawMessage.header.channel;\n            }\n        } else {\n            try {\n                that.to = params.endpointId;\n                that.toConnection = params.connectionId;\n                that.requestConnectionReply = (params.requestConnectionReply === true);\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.message;\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.TextMessage\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\n/**\n * A signaling message and the information needed to route it.\n * @class respoke.SignalingMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n * @param {string} [params.signal] - If sending, a message to send\n * @param {respoke.Endpoint} [params.recipient]\n * @param {string} [params.signalType]\n * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n * @param {RTCSessionDescription} [params.sdp]\n * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {string} [params.reason] - Human readable reason for hanging up.\n * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n * state. Not implemented.\n * @param {string} [params.status] - \"Ringing\". Not implemented.\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.SignalingMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n    /**\n     * Attributes without which we cannot build a signaling message.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n    /**\n     * Attributes which we will copy onto the signal if defined.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var allowed = [\n        'signalType', 'sessionId', 'callerId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId',\n        'requesting', 'reason', 'error', 'status', 'connectionId', 'version'\n    ];\n\n    params.version = '1.0';\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.SignalingMessage\n     * @method respoke.SignalingMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that = JSON.parse(params.rawMessage.body); // Incoming message\n            } catch (e) {\n                that = params.rawMessage.body;\n            }\n            that.fromType = params.rawMessage.header.fromType;\n            that.fromEndpoint = params.rawMessage.header.from;\n            that.fromConnection = params.rawMessage.header.fromConnection;\n            that.timestamp = params.rawMessage.header.timestamp;\n\n            if (!that.target) {\n                that.target = 'call';\n            }\n        } else {\n            required.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || !params[attr]) {\n                    throw new Error(\"Can't build a signaling without \" + attr);\n                }\n            });\n\n            allowed.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || params[attr]) {\n                    that[attr] = params[attr];\n                }\n            });\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.SignalingMessage\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Group` represents a collection of endpoints.\n *\n * There are methods to communicate with the endpoints at the group level and track\n * their presence in the group.\n *\n * @class respoke.Group\n * @augments respoke.EventEmitter\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n * endpoint has joined the group. This callback does not get called when the client joins the group.\n * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n * remote endpoints.\n * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n * endpoint has left the group. This callback does not get called when the client leaves the group.\n * @returns {respoke.Group}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.Group\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var client = respoke.getClient(instanceId);\n\n    if (!that.id) {\n        throw new Error(\"Can't create a group without an ID.\");\n    }\n\n    /**\n     * Internal reference to the api signaling channel.\n     * @memberof! respoke.Group\n     * @name signalingChannel\n     * @type respoke.SignalingChannel\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n    delete params.signalingChannel;\n\n    /**\n     * The connections to members of this group.\n     * @memberof! respoke.Group\n     * @name endpoints\n     * @type {array<respoke.Connection>}\n     */\n    that.connections = [];\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Group\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Group';\n    that.listen('join', params.onJoin);\n    /**\n     * Indicates that a message has been sent to this group.\n     *\n     * @event respoke.Group#message\n     * @type {respoke.Event}\n     * @property {respoke.TextMessage} message\n     * @property {string} name - The event name.\n     * @property {respoke.Group} target\n     */\n    that.listen('message', params.onMessage);\n    that.listen('leave', params.onLeave);\n    client.listen('disconnect', function disconnectHandler() {\n        that.connections = [];\n    });\n\n    delete that.instanceId;\n    delete that.onMessage;\n    delete that.onPresence;\n    delete that.onJoin;\n    delete that.onLeave;\n\n    /**\n     * Join this group.\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Group\n     * @method respoke.Group.join\n     * @return {Promise|undefined}\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#join\n     */\n    that.join = function () {\n        var params = {\n            id: that.id\n        };\n        var promise;\n        var deferred;\n        var retVal;\n\n        try {\n            validateConnection();\n        } catch (err) {\n            deferred = Q.defer();\n            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        promise = client.join(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Leave this group.\n     * @memberof! respoke.Group\n     * @method respoke.Group.leave\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @return {Promise|undefined}\n     * @fires respoke.Client#leave\n     */\n    that.leave = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        signalingChannel.leaveGroup({\n            id: that.id\n        }).done(function successHandler() {\n            /**\n             * This event is fired when the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             * @private\n             */\n            client.fire('leave', {\n                group: that\n            });\n            that.connections = [];\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject();\n        });\n        return retVal;\n    };\n\n    /**\n     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @private\n     * @memberof! respoke.Group\n     * @method respoke.Group.removeMember\n     * @param {object} params\n     * @param {string} [params.connectionId] - Endpoint's connection id\n     * @fires respoke.Group#leave\n     */\n    that.removeMember = function (params) {\n        params = params || {};\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            return;\n        }\n\n        if (!params.connectionId) {\n            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n        }\n\n        that.connections.every(function eachConnection(conn, index) {\n            if (conn.id === params.connectionId) {\n                that.connections.splice(index, 1);\n\n                /**\n                 * This event is fired when a member leaves a group the client is a member of.\n                 * @event respoke.Group#leave\n                 * @type {respoke.Event}\n                 * @property {respoke.Connection} connection - The connection that left the group.\n                 * @property {string} name - The event name.\n                 * @property {respoke.Group} target\n                 */\n                that.fire('leave', {\n                    connection: conn\n                });\n                return false;\n            }\n            return true;\n        });\n    };\n\n    /**\n     * Return true if the logged-in user is a member of this group and false if not.\n     * @memberof! respoke.Group\n     * @method respoke.Group.isJoined\n     * @returns {boolean}\n     */\n    that.isJoined = function () {\n        // connections array contains some connections and ours is among them.\n        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n            return conn.id !== client.connectionId;\n        }));\n    };\n\n    /**\n     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @memberof! respoke.Group\n     * @private\n     * @method respoke.Group.addMember\n     * @param {object} params\n     * @param {respoke.Connection} params.connection\n     * @fires respoke.Group#join\n     */\n    that.addMember = function (params) {\n        params = params || {};\n        var absent;\n\n        validateConnection();\n\n        if (!params.connection) {\n            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n        }\n\n        absent = that.connections.every(function eachConnection(conn) {\n            return (conn.id !== params.connection.id);\n        });\n\n        if (absent) {\n            that.connections.push(params.connection);\n            if (params.skipEvent) {\n                return;\n            }\n\n            /**\n             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n             * of.\n             * @event respoke.Group#join\n             * @type {respoke.Event}\n             * @property {respoke.Connection} connection - The connection that joined the group.\n             * @property {string} name - The event name.\n             * @property {respoke.Group} target\n             */\n            that.fire('join', {\n                connection: params.connection\n            });\n        }\n    };\n\n    /**\n     * Validate that the client is connected to the Respoke infrastructure.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateConnection\n     * @private\n     */\n    function validateConnection() {\n        if (!signalingChannel || !signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    }\n\n    /**\n     * Validate that the client is a member of this group.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateMembership\n     * @private\n     */\n    function validateMembership() {\n        if (!that.isJoined()) {\n            throw new Error(\"Not a member of this group anymore.\");\n        }\n    }\n\n    /**\n     *\n     * Send a message to all of the endpoints in the group.\n     *\n     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n     *\n     *      group.sendMessage({\n     *          message: \"Cat on keyboard\",\n     *          onSuccess: function (evt) {\n     *              console.log('Message was sent');\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.sendMessage\n     * @param {object} params\n     * @param {string} params.message - The message.\n     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n     * @returns {Promise}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.id = that.id;\n        var promise;\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            promise = Q.reject(err);\n        }\n\n        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n                params.onSuccess, params.onError);\n    };\n\n    /**\n     * Get group members\n     *\n     * Get an array containing the members of the group. Accepts `onSuccess` or `onError` parameters,\n     * or a promise.\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.getMembers\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n     * @returns {Promise<Array>} A promise to an array of Connections.\n     */\n    that.getMembers = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        signalingChannel.getGroupMembers({\n            id: that.id\n        }).done(function successHandler(list) {\n            var endpointList = [];\n            list.forEach(function eachMember(params) {\n                var connection = client.getConnection({\n                    endpointId: params.endpointId,\n                    connectionId: params.connectionId,\n                    skipCreate: true\n                });\n\n                if (!connection) {\n                    // Create the connection\n                    connection = client.getConnection({\n                        endpointId: params.endpointId,\n                        connectionId: params.connectionId\n                    });\n                }\n\n                if (endpointList.indexOf(params.endpointId) === -1) {\n                    endpointList.push(params.endpointId);\n                }\n                that.addMember({\n                    connection: connection,\n                    skipEvent: true\n                });\n            });\n\n            deferred.resolve(that.connections);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    return that;\n}; // End respoke.Group\n/**\n * Receive notification that an endpoint has joined this group. This callback is called everytime\n * respoke.Group#join is fired.\n * @callback respoke.Group.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that an endpoint has left this group. This callback is called everytime\n * respoke.Group#leave is fired.\n * @callback respoke.Group.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that a message has been received to a group. This callback is called every time\n * respoke.Group#message is fired.\n * @callback respoke.Group.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Get a list of the Connections which are members of this Group.\n * @callback respoke.Group.connectionsHandler\n * @param {Array<respoke.Connection>} connections\n */\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar io = require('socket.io-client');\nvar respoke = require('./respoke');\n\n/**\n * Returns a timestamp, measured in milliseconds.\n *\n * This method will use high resolution time, if available. Otherwise it falls back to just\n * using the wall clock.\n *\n * @return {number} Number of milliseconds that have passed since some point in the past.\n * @private\n */\nvar now;\n\nif (performance && performance.now) {\n    now = performance.now.bind(performance);\n} else if (Date.now) {\n    now = Date.now.bind(Date);\n} else {\n    now = function () {\n        return new Date().getTime();\n    }\n}\n\n/**\n * Container for holding requests that are currently waiting on responses.\n * @returns {PendingRequests}\n * @private\n * @constructor\n */\nvar PendingRequests = function () {\n    /**\n     * Pending requests.\n     * @private\n     * @type {Array}\n     */\n    var contents = [];\n    /**\n     * Counter to provide the next id.\n     * @private\n     * @type {number}\n     */\n    var counter = 0;\n    var that = {};\n\n    /**\n     * Add a new pending request.\n     *\n     * @memberof PendingRequests\n     * @param obj\n     * @returns {*} The key to use for the `remove` method.\n     */\n    that.add = function (obj) {\n        contents[counter] = obj;\n        return counter++;\n    };\n\n    /**\n     * Remove a pending request.\n     *\n     * @param {*} key Key returned from `add` method.\n     */\n    that.remove = function (key) {\n        delete contents[key];\n    };\n\n    /**\n     * Disposes of any currently pending requests, synchronously invoking the provided function on\n     * each.\n     *\n     * @param {function} [fn] Callback for pending requests.\n     */\n    that.reset = function (fn) {\n        if (fn) {\n            contents.forEach(fn);\n        }\n        contents = [];\n    };\n\n    return that;\n};\n\n/**\n * The purpose of this class is to make a method call for each API call\n * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n * @class respoke.SignalingChannel\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @private\n * @returns {respoke.SignalingChannel}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.SignalingChannel';\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name socket\n     * @private\n     * @type {Socket.io.Socket}\n     */\n    var socket = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name clientSettings\n     * @private\n     * @type {object}\n     */\n    var clientSettings = params.clientSettings;\n    delete that.clientSettings;\n    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n    /**\n     * Informational property for confirmation that call debugs are enabled or disabled.\n     * Helps to make call debugs more testable without putting clientSettings into modifiable scope.\n     * @private\n     * @name callDebugReportEnabled\n     * @type {boolean}\n     */\n    that.callDebugReportEnabled = clientSettings.enableCallDebugReport;\n    /**\n     * A map to avoid duplicate endpoint presence registrations.\n     * @memberof! respoke.SignalingChannel\n     * @name presenceRegistered\n     * @private\n     * @type {object}\n     */\n    var presenceRegistered = {};\n    /**\n     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n     * don't have to make it public.\n     * @memberof! respoke.SignalingChannel\n     * @name actuallyConnect\n     * @private\n     * @type {function}\n     */\n    var actuallyConnect = null;\n    /**\n     * Set of promises for any pending requests on the WebSocket.\n     * @private\n     * @type {PendingRequests}\n     */\n    var pendingRequests = PendingRequests();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name reconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var reconnectTimeout = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name maxReconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var maxReconnectTimeout = 5 * 60 * 1000;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appId\n     * @private\n     * @type {string}\n     */\n    var appId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name endpointId\n     * @private\n     * @type {string}\n     */\n    var endpointId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name token\n     * @private\n     * @type {string}\n     */\n    var token = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appToken\n     * @private\n     * @type {string}\n     */\n    var appToken = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name xhr\n     * @private\n     * @type {XMLHttpRequest}\n     */\n    var xhr = new XMLHttpRequest();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name routingMethods\n     * @private\n     * @type {object}\n     * @desc The methods contained in this object are statically defined methods that are called by constructing\n     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n     */\n    var routingMethods = {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name handlerQueue\n     * @private\n     * @type {object}\n     */\n    var handlerQueue = {\n        'message': [],\n        'signal': [],\n        'presence': []\n    };\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name errors\n     * @private\n     * @type {object}\n     */\n    var errors = {\n        // TODO convert this to strings\n        400: \"Can't perform this action: missing or invalid parameters.\",\n        401: \"Can't perform this action: not authenticated.\",\n        403: \"Can't perform this action: not authorized.\",\n        404: \"Item not found.\",\n        409: \"Can't perform this action: item in the wrong state.\",\n        500: \"Can't perform this action: server problem.\"\n    };\n\n    /**\n     * Indicate whether the signaling channel has a valid connection to Respoke.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnected\n     * @return {boolean}\n     */\n    that.isConnected = function () {\n        return !!(socket && socket.socket.connected);\n    };\n\n    /**\n     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnecting\n     * @private\n     * @return {boolean}\n     */\n    function isConnecting() {\n        return !!(socket && socket.socket.connecting);\n    }\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.open\n     * @private\n     * @param {object} params\n     * @param {string} [params.token] - The Endpoint's auth token\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise}\n     */\n    that.open = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.open', params, clientSettings);\n        token = params.token || token;\n        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\n        Q.fcall(function tokenPromise() {\n            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n                return that.getToken({\n                    appId: clientSettings.appId,\n                    endpointId: params.endpointId\n                });\n            }\n            return null;\n        }).then(function successHandler(newToken) {\n            token = newToken || token;\n            return doOpen({token: token});\n        }).done(function successHandler() {\n            deferred.resolve();\n            log.debug('client', client);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get a developer mode token for an endpoint. App must be in developer mode.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getToken\n     * @private\n     * @param {object} params\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise<String>}\n     */\n    that.getToken = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.getToken', params);\n\n        var callParams = {\n            path: '/v1/tokens',\n            httpMethod: 'POST',\n            parameters: {\n                appId: clientSettings.appId,\n                endpointId: params.endpointId,\n                ttl: 60 * 60 * 6\n            }\n        };\n\n        call(callParams).done(function (response) {\n            if (response.code === 200 && response.result && response.result.tokenId) {\n                token = response.result.tokenId;\n                deferred.resolve(response.result.tokenId);\n                return;\n            }\n            deferred.reject(new Error(\"Couldn't get a developer mode token.\"));\n        }, function (err) {\n            log.error(\"Network call failed:\", err.message);\n            deferred.reject(new Error(\"Couldn't get a developer mode token.\"));\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.doOpen\n     * @param {object} params\n     * @param {string} params.token - The Endpoint's auth token\n     * @return {Promise}\n     * @private\n     */\n    function doOpen(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.doOpen', params);\n\n        if (!params.token) {\n            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n            return deferred.promise;\n        }\n\n        call({\n            path: '/v1/session-tokens',\n            httpMethod: 'POST',\n            parameters: {\n                tokenId: params.token\n            }\n        }).done(function (response) {\n            if (response.code === 200) {\n                appToken = response.result.token;\n                deferred.resolve();\n                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n            } else {\n                deferred.reject(new Error(\"Couldn't authenticate app.\"));\n            }\n        }, function (err) {\n            log.error(\"Network call failed:\", err.message);\n            deferred.reject(new Error(\"Couldn't authenticate app.\"));\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Close a connection to the REST API. Invalidate the session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.close\n     * @private\n     * @param {object} params\n     * @return {Promise}\n     */\n    that.close = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        wsCall({\n            path: '/v1/connections/%s/',\n            httpMethod: 'DELETE',\n            objectId: client.endpointId\n        }).fin(function finallyHandler() {\n            return call({\n                path: '/v1/session-tokens',\n                httpMethod: 'DELETE'\n            });\n        }).fin(function finallyHandler() {\n            if (socket) {\n                socket.removeAllListeners();\n                socket.disconnect();\n            }\n            deferred.resolve();\n        }).done();\n\n        return deferred.promise;\n    };\n\n    /**\n     * Generate and send a presence message representing the client's current status. This triggers\n     * the server to send the client's endpoint's presence.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendPresence\n     * @private\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} [params.status] - Non-enumeration human-readable status.\n     * @param {string} [params.show] - I can't remember what this is.\n     * @returns {Promise}\n     */\n    that.sendPresence = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug(\"Signaling sendPresence\");\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/presence',\n            httpMethod: 'POST',\n            parameters: {\n                'presence': {\n                    show: params.show,\n                    'status': params.status,\n                    type: params.presence || \"available\"\n                }\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Get or create a group in the infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroup\n     * @private\n     * @returns {Promise<respoke.Group>}\n     * @param {object} params\n     * @param {string} name\n     */\n    that.getGroup = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('signalingChannel.getGroup');\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'POST',\n            path: '/v1/channels/',\n            parameters: {\n                name: params.name\n            }\n        }).then(function successHandler(group) {\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            // Group was already created, just return back the same params we were given.\n            deferred.resolve({id: params.name});\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Join a group.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.leaveGroup\n     * @returns {Promise}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.leaveGroup = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/channels/%s/subscribers/',\n            objectId: params.id,\n            httpMethod: 'DELETE'\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Join a group.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.joinGroup\n     * @private\n     * @returns {Promise}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.joinGroup = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/channels/%s/subscribers/',\n            objectId: params.id,\n            httpMethod: 'POST'\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Publish a message to a group.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.publish\n     * @returns {Promise}\n     * @param {object} params\n     * @param {string} params.id\n     * @param {string} params.message\n     */\n    that.publish = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.id,\n            message: params.message\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/channels/%s/publish/',\n            objectId: params.id,\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Register as an observer of presence for the specified endpoint ids.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.registerPresence\n     * @private\n     * @param {object} params\n     * @param {Array<string>} params.endpointList\n     */\n    that.registerPresence = function (params) {\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return wsCall({\n            httpMethod: 'POST',\n            path: '/v1/presenceobservers',\n            parameters: {\n                endpointList: params.endpointList\n            }\n        }).then(function successHandler() {\n            params.endpointList.forEach(function eachId(id) {\n                presenceRegistered[id] = true;\n            });\n        });\n    };\n\n    /**\n     * Join a group.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroupMembers\n     * @private\n     * @returns {Promise<Array>}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.getGroupMembers = function (params) {\n        var deferred = Q.defer();\n        var promise;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n            return deferred.promise;\n        }\n\n        promise = wsCall({\n            path: '/v1/channels/%s/subscribers/',\n            objectId: params.id,\n            httpMethod: 'GET'\n        });\n\n        promise.done(function successHandler(list) {\n            list.forEach(function eachSubscriber(params) {\n                presenceRegistered[params.endpointId] = true;\n            });\n        });\n        return promise;\n    };\n\n    /**\n     * Send a chat message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendMessage\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n     * @param {respoke.Endpoint} params.recipient\n     * @param {string} [params.connectionId]\n     * @returns {Promise}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.recipient.id,\n            connectionId: params.connectionId,\n            message: params.message\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/messages',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ACK signal to acknowlege reception of a signal.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendACK\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.signal\n     * @return {Promise}\n     */\n    that.sendACK = function (params) {\n        var endpoint;\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (!params.signal) {\n            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n        }\n\n        endpoint = client.getEndpoint({id: params.signal.fromEndpoint});\n        if (!endpoint) {\n            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n        }\n\n        return that.sendSignal({\n            recipient: endpoint,\n            signalType: 'ack',\n            signalId: params.signal.signalId,\n            sessionId: params.signal.sessionId,\n            target: params.signal.target,\n            ackedSignalType: params.signal.signalType\n        });\n    };\n\n    /**\n     * Send a signaling message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSignal\n     * @private\n     * @param {object} params\n     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n     * @return {Promise}\n     */\n    that.sendSignal = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var signal;\n        var to;\n        var toConnection;\n        var toType;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (params.call) {\n            params.sessionId = params.call.id;\n            if (params.call.connectionId) { // the recipient's connectionId\n                params.connectionId = params.call.connectionId;\n            }\n        }\n\n        to = params.recipient.id;\n        toConnection = params.connectionId;\n        toType = params.toType || 'web';\n\n        try {\n            params.signalId = respoke.makeGUID();\n            // This will strip off non-signaling attributes.\n            signal = respoke.SignalingMessage(params);\n        } catch (e) {\n            deferred.reject(e);\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/signaling',\n            httpMethod: 'POST',\n            parameters: {\n                signal: JSON.stringify(signal),\n                to: to,\n                toConnection: toConnection,\n                toType: toType\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ICE candidate.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendCandidate\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n     * @return {Promise}\n     */\n    that.sendCandidate = function (params) {\n        params = params || {};\n        params.signalType = 'iceCandidates';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send an SDP.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSDP\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n     * @return {Promise}\n     */\n    that.sendSDP = function (params) {\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n            return Q.reject(\"Not an SDP type signal.\");\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a call report to the cloud infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendReport\n     * @private\n     * @param {object} params\n     * @todo TODO document the params.\n     * @return {Promise}\n     */\n    that.sendReport = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = {\n            debugData: params\n        };\n\n        if (!clientSettings.enableCallDebugReport) {\n            log.debug('not sending call debugs - disabled');\n            deferred.resolve();\n            return deferred.promise;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/call-debugs',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function () {\n            deferred.resolve();\n        }, function (err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send a message hanging up the WebRTC session.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendHangup\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {string} params.reason - The reason the session is being hung up.\n     * @return {Promise}\n     */\n    that.sendHangup = function (params) {\n        params = params || {};\n        params.signalType = 'bye';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendConnected\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @return {Promise}\n     */\n    that.sendConnected = function (params) {\n        params = params || {};\n        params.signalType = 'connected';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to the remote party indicating a desire to renegotiate media.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendModify\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n     * @return {Promise}\n     */\n    that.sendModify = function (params) {\n        params = params || {};\n        params.signalType = 'modify';\n\n        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n            return Q.reject(\"No valid action in modify signal.\");\n        }\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Uppercase the first letter of the word.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.firstUpper\n     * @private\n     */\n    function firstUpper(str) {\n        return str[0].toUpperCase() + str.slice(1);\n    }\n\n    /**\n     * Route different types of signaling messages via events.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routeSignal\n     * @private\n     * @param {respoke.SignalingMessage} message - A message to route\n     * @fires respoke.Call#offer\n     * @fires respoke.Call#connected\n     * @fires respoke.Call#answer\n     * @fires respoke.Call#iceCandidates\n     * @fires respoke.Call#hangup\n     * @fires respoke.DirectConnection#offer\n     * @fires respoke.DirectConnection#connected\n     * @fires respoke.DirectConnection#answer\n     * @fires respoke.DirectConnection#iceCandidates\n     * @fires respoke.DirectConnection#hangup\n     */\n    that.routeSignal = function (signal) {\n        var target = null;\n        var method = 'do';\n\n        if (signal.signalType !== 'iceCandidates') { // Too many of these!\n            log.debug(signal.signalType, signal);\n        }\n\n        if (signal.target === undefined) {\n            throw new Error(\"target undefined\");\n        }\n\n        // Only create if this signal is an offer.\n        Q.fcall(function makePromise() {\n            var endpoint;\n            /*\n             * This will return calls regardless of whether they are associated\n             * with a direct connection or not, and it will create a call if no\n             * call is found and this signal is an offer. Direct connections get\n             * created in the next step.\n             */\n            target = client.getCall({\n                id: signal.sessionId,\n                endpointId: signal.fromEndpoint,\n                fromType: signal.fromType,\n                create: (signal.target === 'call' && signal.signalType === 'offer')\n            });\n            if (target) {\n                return target;\n            }\n\n            if (signal.target === 'directConnection') {\n                // return a promise\n                endpoint = client.getEndpoint({\n                    id: signal.fromEndpoint\n                });\n\n                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n                    return endpoint.directConnection;\n                }\n\n                return endpoint.startDirectConnection({\n                    id: signal.sessionId,\n                    create: (signal.signalType === 'offer'),\n                    caller: (signal.signalType !== 'offer')\n                });\n            }\n        }).done(function successHandler(target) {\n            // target might be null, a Call, or a DirectConnection.\n            if (target) {\n                target = target.call || target;\n            }\n            if (!target || target.id !== signal.sessionId) {\n                // orphaned signal\n                log.warn(\"Couldn't associate signal with a call.\", signal);\n                return;\n            }\n\n            method += firstUpper(signal.signalType);\n            routingMethods[method]({\n                call: target,\n                signal: signal\n            });\n        }, null);\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doOffer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-offer\n     */\n    routingMethods.doOffer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * @event respoke.Call#signal-offer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-offer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doConnected\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-connected\n     */\n    routingMethods.doConnected = function (params) {\n        /**\n         * @event respoke.Call#signal-connected\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-connected', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.dModify\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-modify\n     */\n    routingMethods.doModify = function (params) {\n        /**\n         * @event respoke.Call#signal-modify\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-modify', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doAnswer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-answer\n     */\n    routingMethods.doAnswer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * @event respoke.Call#signal-answer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-answer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-icecandidates\n     */\n    routingMethods.doIceCandidates = function (params) {\n        /**\n         * @event respoke.Call#signal-icecandidates\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-icecandidates', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doBye\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-hangup\n     */\n    routingMethods.doBye = function (params) {\n        /**\n         *  We may receive hangup from one or more parties after connectionId is set if the call is rejected\n         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n         *  we are already on a call. TODO: this should really be inside PeerConnection.\n         */\n        if (params.call.connectionId && params.call.connectionId !== params.signal.fromConnection) {\n            return;\n        }\n        /**\n         * @event respoke.Call#signal-hangup\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-hangup', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doUnknown\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     */\n    routingMethods.doUnknown = function (params) {\n        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n    };\n\n    /**\n     * Add a handler to the connection for messages of different types.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.addHandler\n     * @private\n     * @param {object} params\n     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n     * @param {function} params.handler - A function to which to pass the message\n     * @todo TODO See if this is necessary anymore\n     */\n    that.addHandler = function (params) {\n        if (socket.socket && socket.socket.open) {\n            socket.on(params.type, params.handler);\n        } else {\n            handlerQueue[params.type].push(params.handler);\n        }\n    };\n\n    /**\n     * Socket handler for pub-sub messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPubSub\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Group#message\n     * @fires respoke.Client#message\n     */\n    var onPubSub = function onPubSub(message) {\n        var group;\n        var groupMessage;\n\n        if (message.header.from === client.endpointId) {\n            return;\n        }\n\n        groupMessage = respoke.TextMessage({\n            rawMessage: message\n        });\n\n        group = client.getGroup({id: message.header.channel});\n        if (group) {\n            /**\n             * @event respoke.Group#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Group} target\n             */\n            group.fire('message', {\n                message: groupMessage\n            });\n        }\n        /**\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n         * the group. From that point forward, Group#message will fire when a message is received as well. If\n         * group is undefined instead of null, the message is not a group message at all.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            message: groupMessage,\n            group: group || null\n        });\n    };\n\n    /**\n     * Socket handler for join messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onJoin\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onJoin = function onJoin(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        var connection;\n\n        if (message.connectionId === client.connectionId) {\n            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n            group = client.getGroup({id: message.header.channel});\n            if (!group) {\n                group = respoke.Group({\n                    id: message.header.channel,\n                    instanceId: instanceId,\n                    signalingChannel: that\n                });\n                client.addGroup(group);\n            }\n            if (!group.isJoined()) {\n                group.addMember({connection: connection});\n                client.fire('join', {\n                    group: group\n                });\n            }\n        } else {\n\n            endpoint = client.getEndpoint({\n                id: message.endpointId,\n                instanceId: instanceId,\n                name: message.endpointId\n            });\n\n\n            // Handle presence not associated with a channel\n            if (message.header.channel.indexOf('system') > -1 || !connection) {\n                endpoint.setPresence({\n                    connectionId: message.connectionId\n                });\n                connection = client.getConnection({\n                    connectionId: message.connectionId,\n                    endpointId: message.endpointId\n                });\n                if (message.header.channel.indexOf('system') > -1) {\n                    log.error(\"Still getting these weird join presence messages.\", message);\n                    return;\n                }\n            }\n\n            group = client.getGroup({id: message.header.channel});\n\n            if (group && connection) {\n                group.addMember({connection: connection});\n            } else {\n                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n            }\n        }\n    };\n\n    /**\n     * Socket handler for leave messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onLeave\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onLeave = function onLeave(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        if (message.connectionId === client.connectionId) {\n            group = client.getGroup({id: message.header.channel});\n            client.fire('leave', {\n                group: group\n            });\n        } else {\n\n            endpoint = client.getEndpoint({\n                id: message.endpointId\n            });\n\n            endpoint.connections.every(function eachConnection(conn, index) {\n                if (conn.id === message.connectionId) {\n                    endpoint.connections.splice(index, 1);\n                    return false;\n                }\n                return true;\n            });\n\n            group = client.getGroup({id: message.header.channel});\n            group.removeMember({connectionId: message.connectionId});\n        }\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onMessage\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Endpoint#message\n     * @fires respoke.Client#message\n     */\n    var onMessage = function onMessage(message) {\n        var endpoint;\n        message = respoke.TextMessage({rawMessage: message});\n        if (message.endpointId) {\n            endpoint = client.getEndpoint({\n                id: message.endpointId,\n                skipCreate: true\n            });\n        }\n        if (endpoint) {\n            /**\n             * @event respoke.Endpoint#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Endpoint} target\n             */\n            endpoint.fire('message', {\n                message: message\n            });\n        }\n        /**\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            endpoint: endpoint || null,\n            message: message\n        });\n    };\n\n    /**\n     * Create a socket handler for the onConnect event with all the right things in scope.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.generateConnectHandler\n     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n     * method only.\n     * @private\n     */\n    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n        onSuccess = onSuccess || function () {};\n        onError = onError || function () {};\n        return function onConnect() {\n            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n                if (!handlerQueue[category]) {\n                    return;\n                }\n\n                handlerQueue[category].forEach(function addEachHandler(handler) {\n                    socket.on(category, handler);\n                });\n                handlerQueue[category] = [];\n            });\n\n            wsCall({\n                path: '/v1/connections',\n                httpMethod: 'POST'\n            }).done(function successHandler(res) {\n                log.debug('connections result', res);\n                client.endpointId = res.endpointId;\n                client.connectionId = res.id;\n                onSuccess();\n            }, onError);\n        };\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPresence\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    function onPresence(message) {\n        var endpoint;\n        var groups;\n\n        if (message.header.from === client.endpointId) {\n            // Skip ourselves\n            return;\n        }\n        log.debug('socket.on presence', message);\n\n        endpoint = client.getEndpoint({\n            id: message.header.from,\n            instanceId: instanceId,\n            name: message.header.from,\n            connection: message.header.fromConnection\n        });\n\n        endpoint.setPresence({\n            connectionId: message.header.fromConnection,\n            presence: message.type\n        });\n\n        if (endpoint.getPresence() === 'unavailable') {\n            var groups = client.getGroups();\n            if (groups) {\n                groups.forEach(function eachGroup(group) {\n                    group.removeMember({connectionId: message.header.fromConnection});\n                });\n            }\n        }\n    }\n\n    /*\n     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.reconnect\n     * @private\n     */\n    function reconnect() {\n        appToken = undefined;\n        token = undefined;\n        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\n        if (reconnectTimeout > (maxReconnectTimeout)) {\n            reconnectTimeout = maxReconnectTimeout;\n        }\n\n        setTimeout(function doReconnect() {\n            actuallyConnect().then(function successHandler() {\n                reconnectTimeout = null;\n                log.debug('socket reconnected');\n                return Q.all(client.getGroups().map(function iterGroups(group) {\n                    client.join({\n                        id: group.id,\n                        onMessage: clientSettings.onMessage,\n                        onJoin: clientSettings.onJoin,\n                        onLeave: clientSettings.onLeave\n                    });\n                }));\n            }).done(function successHandler(user) {\n                /**\n                 * @event respoke.Client#reconnect\n                 * @property {string} name - the event name.\n                 * @property {respoke.Client}\n                 */\n                client.fire('reconnect');\n            }, function (err) {\n                log.error(\"Couldn't rejoin previous groups.\", err.message, err.stack);\n                reconnect();\n            });\n        }, reconnectTimeout);\n    }\n\n    /**\n     * Authenticate to the cloud and call the handler on state change.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.authenticate\n     * @private\n     * @param {object} params\n     * @return {Promise}\n     */\n    that.authenticate = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var pieces = [];\n        var protocol = null;\n        var host = null;\n        var port = null;\n\n        if (!appToken) {\n            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n        }\n\n        pieces = clientSettings.baseURL.split(/:\\/\\//);\n        protocol = pieces[0];\n        pieces = pieces[1].split(/:/);\n        host = pieces[0];\n        port = pieces[1];\n\n        /*\n         * Try to connect for 2 seconds before failing.\n         * @private\n         */\n        var connectParams = {\n            'connect timeout': 2000,\n            'force new connection': true, // Don't try to reuse old connection.\n            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n            reconnect: false,\n            host: host,\n            port: port || '443',\n            protocol: protocol,\n            secure: (protocol === 'https'),\n            query: 'app-token=' + appToken\n        };\n\n        if (that.isConnected() || isConnecting()) {\n            return;\n        }\n        socket = io.connect(clientSettings.baseURL + '?app-token=' + appToken, connectParams);\n\n        socket.on('connect', generateConnectHandler(function onSuccess() {\n            deferred.resolve();\n        }, function onError(err) {\n            deferred.reject(err);\n        }));\n\n        socket.on('join', onJoin);\n        socket.on('leave', onLeave);\n        socket.on('pubsub', onPubSub);\n        socket.on('message', onMessage);\n        socket.on('presence', onPresence);\n\n        // connection timeout\n        socket.on('connect_failed', function connectFailedHandler(res) {\n            deferred.reject(new Error(\"WebSocket connection failed.\"));\n            log.error('Socket.io connect timeout.', res || \"\");\n            reconnect();\n        });\n\n        // handshake error, 403\n        socket.on('error', function errorHandler(res) {\n            log.debug('Socket.io request failed.', res || \"\");\n            reconnect();\n        });\n\n        that.addHandler({\n            type: 'signal',\n            handler: function signalHandler(message) {\n                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n                var signal = respoke.SignalingMessage({\n                    rawMessage: message\n                });\n\n                if (signal.signalType === 'ack') {\n                    return;\n                }\n\n                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n                    log.error(\"Got malformed signal.\", signal);\n                    throw new Error(\"Can't route signal without target or type.\");\n                }\n\n                that.routeSignal(signal);\n            }\n        });\n\n        socket.on('disconnect', function onDisconnect() {\n            pendingRequests.reset(function (pendingRequest) {\n                log.debug('Failing pending requests');\n                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n            });\n\n            /**\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('disconnect');\n\n            if (clientSettings.reconnect !== true) {\n                socket = null;\n                return;\n            }\n            reconnect();\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n     * sent or received, prior to creating a PeerConnection\n     *\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.getTurnCredentials\n     * @return {Promise<Array>}\n     */\n    that.getTurnCredentials = function () {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'GET',\n            path: '/v1/turn'\n        }).done(function successHandler(creds) {\n            var result = [];\n\n            if (!creds || !creds.uris) {\n                deferred.reject(new Error(\"Turn credentials empty.\"));\n                return;\n            }\n\n            creds.uris.forEach(function saveTurnUri(uri) {\n                var cred = null;\n\n                if (!uri) {\n                    return;\n                }\n\n                cred = createIceServer(uri, creds.username, creds.password);\n                result.push(cred);\n            });\n\n            if (result.length === 0) {\n                deferred.reject(new Error(\"Got no TURN credentials.\"));\n            }\n\n            log.debug('TURN creds', result);\n            deferred.resolve(result);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Construct a websocket API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.wsCall\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.path\n     * @param {string} params.objectId\n     * @param {object} params.parameters\n     * @return {Promise<object>}\n     */\n    function wsCall(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var start = now();\n        // Too many of these!\n        var logRequest = params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1;\n        var pendingRequestsKey;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return deferred.promise;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return deferred.promise;\n        }\n\n        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\n        if (params.objectId) {\n            params.path = params.path.replace(/\\%s/ig, params.objectId);\n        }\n\n        if (logRequest) {\n            log.debug('socket request', {\n                method: params.httpMethod,\n                path: params.path,\n                parameters: params.parameters\n            });\n        }\n\n        pendingRequestsKey = pendingRequests.add(deferred);\n        socket.emit(params.httpMethod, JSON.stringify({\n            url: params.path,\n            data: params.parameters,\n            headers: {'App-Token': appToken}\n        }), function handleResponse(response) {\n            var durationMillis = now() - start;\n            pendingRequests.remove(pendingRequestsKey);\n\n            try {\n                response = JSON.parse(response);\n            } catch (e) {\n                deferred.reject(new Error(\"Server response could not be parsed!\"));\n                return;\n            }\n\n            if (logRequest) {\n                log.debug('socket response', {\n                    method: params.httpMethod,\n                    path: params.path,\n                    durationMillis: durationMillis,\n                    response: response\n                });\n            }\n\n            if (response && response.error) {\n                deferred.reject(new Error(response.error + '(' + params.httpMethod + ' ' + params.path + ')'));\n            } else {\n                deferred.resolve(response);\n            }\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Construct an API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.call\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.objectId\n     * @param {string} params.path\n     * @param {object} params.parameters\n     * @returns {Promise}\n     */\n    function call(params) {\n        /* Params go in the URI for GET, DELETE, same format for\n         * POST and PUT, but they must be sent separately after the\n         * request is opened. */\n        var deferred = Q.defer();\n        var paramString = null;\n        var uri = null;\n        var response = {\n            'result': null,\n            'code': null\n        };\n        var start = now();\n\n        uri = clientSettings.baseURL + params.path;\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return;\n        }\n\n        if (!params.httpMethod) {\n            deferred.reject(new Error('No HTTP method.'));\n            return;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return;\n        }\n\n        if (params.objectId) {\n            params.path = params.path.replace(/\\%s/ig, params.objectId);\n        }\n\n        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n            uri += makeParamString(params.parameters);\n        }\n\n        xhr.open(params.httpMethod, uri);\n        if (appToken) {\n            xhr.setRequestHeader(\"App-Token\", appToken);\n        }\n        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n            paramString = JSON.stringify(params.parameters);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n            return;\n        }\n        log.debug('request', {\n            method: params.httpMethod,\n            uri: uri,\n            params: paramString\n        });\n\n        try {\n            xhr.send(paramString);\n        } catch (err) {\n            deferred.reject(err);\n            return;\n        }\n\n        xhr.onreadystatechange = function () {\n            var durationMillis = now() - start;\n            if (this.readyState !== 4) {\n                return;\n            }\n            if (this.status === 0) {\n                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n                return;\n            }\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n                response.code = this.status;\n                response.uri = uri;\n                response.params = params.parameters;\n                if (this.response) {\n                    try {\n                        response.result = JSON.parse(this.response);\n                    } catch (e) {\n                        response.result = this.response;\n                        response.error = \"Invalid JSON.\";\n                    }\n                }\n                log.debug('response', {\n                    method: params.httpMethod,\n                    durationMillis: durationMillis,\n                    response: response });\n                deferred.resolve(response);\n            } else {\n                deferred.reject(new Error('unexpected response ' + this.status));\n                return;\n            }\n        };\n\n        return deferred.promise;\n    }\n\n    /**\n     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n     * var1=value1&var2=value2,value3,value4\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.makeParamString\n     * @private\n     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n     * @returns {string}\n     */\n    function makeParamString(params) {\n        var strings = [];\n        if (!params) {\n            return '';\n        }\n\n        Object.keys(params).forEach(function formatParam(name) {\n            var value = params[name];\n            /* Skip objects -- We won't know how to name these. */\n            if (value instanceof Array) {\n                strings.push([name, value.join(',')].join('='));\n            } else if (typeof value !== 'object' && typeof value !== 'function') {\n                strings.push([name, value].join('='));\n            }\n        });\n\n        if (strings.length > 0) {\n            return '?' + strings.join('&');\n        } else {\n            return '';\n        }\n    }\n\n    return that;\n}; // End respoke.SignalingChannel\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.SignalingChannel.errorHandler\n * @params {Error} err\n */\n/**\n * Handle sending successfully.\n * @callback respoke.SignalingChannel.sendHandler\n */\n/**\n * Receive a group.\n * @callback respoke.SignalingChannel.groupHandler\n * @param {respoke.Group}\n */\n/**\n * Receive a list of groups.\n * @callback respoke.SignalingChannel.groupListHandler\n * @param {Array}\n */\n/**\n * Receive a list of TURN credentials.\n * @callback respoke.SignalingChannel.turnSuccessHandler\n * @param {Array}\n */\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A direct connection via RTCDataChannel, including state and path negotation.\n * @class respoke.DirectConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {string} params\n * @param {string} params.instanceId - client id\n * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n * it to flow peer-to-peer. The relay acts like a blind proxy.\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n * begins. The direct connection will not be open yet.\n * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n * direct connection setup or media renegotiation.\n * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n * for a direct connection and setup is about to begin.\n * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n * @returns {respoke.DirectConnection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n\n    /**\n     * A name to identify this class\n     * @memberof! respoke.DirectConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.DirectConnection';\n    /**\n     * The unique identifier of the direct connection.\n     * \n     * @memberof! respoke.DirectConnection\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name call\n     * @type {respoke.Call}\n     */\n    if (!that.call.caller) {\n        that.call.caller = false;\n    }\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name dataChannel\n     * @type {RTCDataChannel}\n     * @private\n     */\n    var dataChannel = null;\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name pc\n     * @type {RTCPeerConnection}\n     * @private\n     */\n    var pc = params.pc;\n    delete params.pc;\n\n    /**\n     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n     * only fires for the callee.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.listenDataChannel\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function listenDataChannel(evt) {\n        dataChannel = evt.channel;\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        if (dataChannel.readyState === 'open') {\n            dataChannel.onopen = null;\n            onDataChannelOpen();\n        } else {\n            dataChannel.onopen = onDataChannelOpen;\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.saveParameters\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n     * is closed.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n     * is open.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n     * is being set up. The direct connection will not be open yet.\n     * @param {array} [params.servers] - Additional resources for determining network connectivity between two\n     * endpoints.\n     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n     * it to flow peer-to-peer. The relay acts like a blind proxy.\n     * @private\n     */\n    function saveParameters(params) {\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('open', params.onOpen);\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('close', params.onClose);\n        /**\n         * Incoming message on this direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('message', params.onMessage);\n        // documented elsewhere\n        that.listen('start', params.onStart);\n        /**\n         * An error occurred while setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {string} reason - A human-readable description of the error.\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('error', params.onError);\n        pc.listen('direct-connection', listenDataChannel, true);\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about the direct connection\n             * becomes available.\n             * @event respoke.DirectConnection#stats\n             * @type {respoke.Event}\n             * @property {object} stats - an object with stats in it.\n             * @property {respoke.DirectConnection} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n    }\n    saveParameters(params);\n\n    delete that.onOpen;\n    delete that.onClose;\n    delete that.onMessage;\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.getStats\n     * @returns {Promise<object>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n     * contain stats but the developer will not receive them on the client-side.\n     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n     * this method only.\n     */\n    that.getStats = function (params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            delete params.onStats;\n            return pc.getStats(params);\n        }\n        return null;\n    };\n\n    if (!respoke.MediaStats) {\n        delete that.getStats;\n    }\n\n    /**\n     * Detect datachannel errors for internal state.\n     * @memberof! respoke.DirectConnection\n     * @private\n     * @method respoke.DirectConnection.onDataChannelError\n     */\n    function onDataChannelError(error) {\n        /**\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {object} error\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('error', {\n            error: error\n        });\n        that.close();\n    }\n\n    /**\n     * Receive and route messages to the Endpoint.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelMessage\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#message\n     */\n    function onDataChannelMessage(evt) {\n        var message;\n        try {\n            message = JSON.parse(evt.data);\n        } catch (e) {\n            message = evt.data;\n        }\n        /**\n         * @event respoke.Endpoint#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.call.remoteEndpoint.fire('message', {\n            message: message,\n            directConnection: that\n        });\n        /**\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('message', {\n            message: message,\n            endpoint: that.call.remoteEndpoint\n        });\n    }\n\n    /**\n     * Detect when the channel is open.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelOpen\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#open\n     */\n    function onDataChannelOpen(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('open');\n    }\n\n    /**\n     * Detect when the channel is closed.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelClose\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#close\n     */\n    function onDataChannelClose(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n    }\n\n    /**\n     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n     * datachannel's state and to receive messages.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.createDataChannel\n     * @private\n     */\n    function createDataChannel() {\n        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n        dataChannel.binaryType = 'arraybuffer';\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        dataChannel.onopen = onDataChannelOpen;\n\n        /**\n         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n         * DirectConnection#open for that notification.\n         * @event respoke.DirectConnection#start\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('start');\n    }\n\n    /**\n     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n     * since the library calls this method for the caller. Developers will use this method to pass in\n     * callbacks for the callee.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.accept\n     * @fires respoke.DirectConnection#accept\n     * @param {object} params\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n     * @param {respoke.DirectConnection.onClose} [params.onClose]\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n     * @param {respoke.DirectConnection.onStart} [params.onStart]\n     */\n    that.accept = function (params) {\n        params = params || {};\n        log.debug('DirectConnection.accept');\n        saveParameters(params);\n\n        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\n        if (pc.state.caller === true) {\n            createDataChannel();\n        }\n        that.call.answer();\n\n        /**\n         * @event respoke.DirectConnection#accept\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('accept');\n    };\n\n    /**\n     * Tear down the connection.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.close\n     * @fires respoke.DirectConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        log.debug(\"DirectConnection.close\");\n        if (dataChannel) {\n            dataChannel.close();\n        }\n\n        /**\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n\n        that.ignore();\n\n        if (params.skipRemove !== true) {\n            that.call.removeDirectConnection();\n        }\n\n        dataChannel = null;\n        that.call.remoteEndpoint.directConnection = null;\n        that.call = null;\n        pc = null;\n    };\n\n    /**\n     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n     * attribute may be given: either a string 'message' or an object 'object'.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.sendMessage\n     * @param {object} params\n     * @param {string} [params.message] - The message to send.\n     * @param {object} [params.object] - An object to send.\n     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n     * of this method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        if (that.isActive()) {\n            dataChannel.send(JSON.stringify(params.object || {\n                message: params.message\n            }));\n            deferred.resolve();\n        } else {\n            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n        }\n        return retVal;\n    };\n\n    /**\n     * Expose close as reject for approve/reject workflow.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.reject\n     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.reject = that.close;\n\n    /**\n     * Indicate whether a datachannel is being setup or is in progress.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n        return (dataChannel && dataChannel.readyState === 'open');\n    };\n\n    return that;\n}; // End respoke.DirectConnection\n\n/**\n * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n * fires.\n * @callback respoke.DirectConnection.onClose\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n * callback is called every time respoke.DirectConnection#start fires.\n * @callback respoke.DirectConnection.onStart\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n * fires.\n * @callback respoke.DirectConnection.onOpen\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when a message is received over the direct connection.  This callback is called every time\n * respoke.DirectConnection#message fires.\n * @callback respoke.DirectConnection.onMessage\n * @param {respoke.Event} evt\n * @param {object} evt.message\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n * @callback respoke.DirectConnection.errorHandler\n * @param {Error} err\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.DirectConnection#error.\n * @callback respoke.DirectConnection.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the callee accepts the direct connection. This callback is called every time\n * respoke.DirectConnection#accept is fired.\n * @callback respoke.DirectConnection.onAccept\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.DirectConnection.statsSuccessHandler\n * @param {respoke.Event} evt\n * @param {object} evt.stats - an object with stats in it.\n * @param {respoke.DirectConnection} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * Handle sending successfully.\n * @callback respoke.DirectConnection.sendHandler\n */\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n * or the not-yet-implemented ScreenShare.\n * @class respoke.PeerConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n * candidates.\n * @param {respoke.Call} params.call\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalModify - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n * @param {object} [params.callSettings]\n * @param {object} [params.pcOptions]\n * @param {object} [params.offerOptions]\n * @returns {respoke.PeerConnection}\n */\n\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.PeerConnection';\n\n    /**\n     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n     * @memberof! respoke.PeerConnection\n     * @name toSendHangup\n     * @type {respoke.Endpoint}\n     */\n    var toSendHangup;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @private\n     * @name pc\n     * @type RTCPeerConnection\n     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n     * raw data transfer occurs within the PeerConnection.\n     */\n    var pc = null;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name defModify\n     * @private\n     * @type {Promise}\n     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n     * handling, or sending of some information.\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     * @desc A callback provided by the developer that we'll call after receiving local media and before\n     * approve() is called.\n     */\n    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateSendingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateSendingQueue = [];\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateReceivingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateReceivingQueue = [];\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name callSettings\n     * @private\n     * @type {object}\n     * @desc A container for constraints and servers.\n     */\n    var callSettings = params.callSettings || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalOffer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalOffer = params.signalOffer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalConnected\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalConnected = params.signalConnected;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalModify\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalModify = params.signalModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalAnswer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalAnswer = params.signalAnswer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalHangup\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalHangup = respoke.once(params.signalHangup);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalReport\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalReport = params.signalReport;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidateOrig\n     * @private\n     * @type {function}\n     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n     */\n    var signalCandidateOrig = params.signalCandidate;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidate\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n     * to facilitate candidate logging.\n     */\n    function signalCandidate(params) {\n        if (!pc) {\n            return;\n        }\n\n        params.iceCandidates = [params.candidate];\n        signalCandidateOrig(params);\n        that.report.candidatesSent.push({candidate: params.candidate});\n    }\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name offerOptions\n     * @private\n     * @type {object}\n     */\n    var offerOptions = params.offerOptions || null;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name pcOptions\n     * @private\n     * @type {object}\n     */\n    var pcOptions = params.pcOptions || {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name report\n     * @type {object}\n     */\n    that.report = {\n        callStarted: 0,\n        callStopped: 0,\n        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n        sessionId: that.call.id,\n        lastSDPString: '',\n        sdpsSent: [],\n        sdpsReceived: [],\n        candidatesSent: [],\n        candidatesReceived: [],\n        stats: [],\n        userAgent: navigator.userAgent,\n        os: navigator.platform\n    };\n\n    /**\n     * Start the process of network and media negotiation. Called after local video approved.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.initOffer\n     * @fires respoke.PeerConnection#initOffer\n     * @private\n     */\n    function initOffer() {\n        if (!pc) {\n            return;\n        }\n\n        log.info('creating offer', offerOptions);\n        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n            log.error('createOffer failed');\n        }, offerOptions);\n    }\n\n    /**\n     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n     * the callee has answered the call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processOffer\n     * @param {RTCSessionDescriptor}\n     * @returns {Promise}\n     */\n    that.processOffer = function (oOffer) {\n        if (!pc) {\n            return;\n        }\n        log.debug('processOffer', oOffer);\n\n        that.report.sdpsReceived.push(oOffer);\n        that.report.lastSDPString = oOffer.sdp;\n\n        //set flags for audio / video being offered\n        that.call.hasAudio = respoke.sdpHasAudio(oOffer.sdp);\n        that.call.hasVideo = respoke.sdpHasVideo(oOffer.sdp);\n        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\n        try {\n            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n                function successHandler() {\n                    if (!pc) {\n                        return;\n                    }\n\n                    log.debug('set remote desc of offer succeeded');\n                    that.call.incomingMedia.setSDP(oOffer); // callee's incoming media\n                    pc.createAnswer(function successHandler(oSession) {\n                        that.state.processedRemoteSDP = true;\n                        that.call.outgoingMedia.setSDP(oSession); // callee's outgoing media\n                        saveAnswerAndSend(oSession);\n                    }, function errorHandler(err) {\n                        err = new Error(\"Error creating SDP answer.\" + err.message);\n                        that.report.callStoppedReason = err.message;\n                        /**\n                         * This event is fired on errors that occur during call setup or media negotiation.\n                         * @event respoke.Call#error\n                         * @type {respoke.Event}\n                         * @property {string} reason - A human readable description about the error.\n                         * @property {respoke.Call} target\n                         * @property {string} name - the event name.\n                         */\n                        that.call.fire('error', {\n                            message: err.message\n                        });\n                        log.error('create answer failed');\n                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                        that.close();\n                    });\n                }, function errorHandler(err) {\n                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n                    that.report.callStoppedReason = err.message;\n                    /**\n                     * This event is fired on errors that occur during call setup or media negotiation.\n                     * @event respoke.Call#error\n                     * @type {respoke.Event}\n                     * @property {string} reason - A human readable description about the error.\n                     * @property {respoke.Call} target\n                     * @property {string} name - the event name.\n                     */\n                    that.call.fire('error', {\n                        message: err.message\n                    });\n                }\n            );\n        } catch (err) {\n            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n            that.report.callStoppedReason = newErr.message;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: newErr.message\n            });\n        }\n    };\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getStats\n     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.PeerConnection#stats\n     */\n    function getStats(params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        if (!respoke.MediaStats) {\n            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n            return retVal;\n        }\n\n        function onConnect() {\n            var stats = respoke.MediaStatsParser({\n                peerConnection: pc,\n                interval: params.interval,\n                onStats: function statsHandler(stats) {\n                    if (!pc) {\n                        return;\n                    }\n\n                    /**\n                     * @event respoke.PeerConnection#stats\n                     * @type {respoke.Event}\n                     * @property {object} stats - an object with stats in it.\n                     * @property {string} name - the event name.\n                     * @property {respoke.PeerConnection}\n                     */\n                    that.fire('stats', {\n                        stats: stats\n                    });\n                    that.report.stats.push(stats);\n                }\n            });\n            that.listen('close', function closeHandler(evt) {\n                stats.stopStats();\n            }, true);\n            deferred.resolve();\n        }\n\n        if (!pc) {\n            that.once('stream-received', onConnect);\n        } else {\n            onConnect();\n        }\n\n        return retVal;\n    }\n\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.init\n     * @param {object} params\n     * @param {object} params.constraints\n     * @param {array} params.servers\n     * @param {boolean} params.disableTurn\n     */\n    that.init = function init(params) {\n        params = params || {};\n        callSettings.servers = params.servers || callSettings.servers;\n        callSettings.disableTurn = params.disableTurn || callSettings.disableTurn;\n\n        log.debug('PC.init');\n\n        if (pc) {\n            return;\n        }\n\n        that.report.callStarted = new Date().getTime();\n\n        pc = new RTCPeerConnection(callSettings.servers, pcOptions);\n        pc.onicecandidate = onIceCandidate;\n        pc.onnegotiationneeded = onNegotiationNeeded;\n        pc.onaddstream = function onaddstream(evt) {\n            /**\n             * @event respoke.PeerConnection#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('connect', {\n                stream: evt.stream\n            });\n        };\n        pc.onremovestream = function onremovestream(evt) {\n            /**\n             * @event respoke.PeerConnection#remote-stream-removed\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-removed', {\n                stream: evt.stream\n            });\n        };\n        pc.ondatachannel = function ondatachannel(evt) {\n            /**\n             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n             * is only called for the callee.\n             * @event respoke.PeerConnection#direct-connection\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('direct-connection', {\n                channel: evt.channel\n            });\n        };\n\n        that.state.listen('offering:entry', function (evt) {\n            if (that.state.caller) {\n                initOffer();\n            }\n        });\n    };\n\n    /**\n     * Return an array of remote media streams.\n     * @muremberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getRemoteStreams\n     */\n    that.getRemoteStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Return an array of local media streams.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getLocalStreams\n     */\n    that.getLocalStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Create a data channel.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.createDataChannel\n     */\n    that.createDataChannel = function () {\n        if (!pc) {\n            return;\n        }\n        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addStream\n     * Expose addStream.\n     * @param {RTCMediaStream}\n     */\n    that.addStream = function (stream) {\n        if (!pc) {\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: \"Got local stream in a precall state.\"\n            });\n            return;\n        }\n        pc.addStream(stream);\n    };\n\n    /**\n     * Process a local ICE Candidate\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceCandidate\n     * @private\n     * @param {RTCIceCandidate}\n     */\n    function onIceCandidate(oCan) {\n        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n        if (!candidate || !candidate.candidate) {\n            return;\n        }\n\n        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n            log.debug(\"Dropping candidate because forceTurn is on.\");\n            return;\n        }\n\n        if (!that.state.sentSDP && !that.state.processedRemoteSDP) {\n            candidateSendingQueue.push(candidate);\n        } else {\n            signalCandidate({\n                candidate: candidate,\n                call: that.call\n            });\n        }\n    }\n\n    /**\n     * Handle renegotiation\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onNegotiationNeeded\n     * @private\n     */\n    function onNegotiationNeeded() {\n        log.warn(\"Negotiation needed.\");\n    }\n\n    /**\n     * Process any ICE candidates that we received either from the browser or the other side while\n     * we were trying to set up our RTCPeerConnection to handle them.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processQueues\n     * @private\n     */\n    function processQueues() {\n        /* We only need to queue (and thus process queues) if\n         * we are the caller. The person receiving the call\n         * never has a valid PeerConnection at a time when we don't\n         * have one. */\n        var can = null;\n        for (var i = 0; i < candidateSendingQueue.length; i += 1) {\n            signalCandidate({\n                candidate: candidateSendingQueue[i],\n                call: that.call\n            });\n        }\n        candidateSendingQueue = [];\n        for (var i = 0; i < candidateReceivingQueue.length; i += 1) {\n            that.addRemoteCandidate({\n                candidate: candidateReceivingQueue[i],\n                processingQueue: true\n            });\n        }\n        candidateReceivingQueue = [];\n    }\n\n    /**\n     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n     * side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveOfferAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveOfferAndSend(oSession) {\n        oSession.type = 'offer';\n        if (!pc) {\n            return;\n        }\n        log.debug('setting and sending offer', oSession);\n        that.report.sdpsSent.push(oSession);\n        that.call.outgoingMedia.setSDP(oSession); // caller's outgoing media\n        that.call.incomingMedia.setSDP(oSession); // caller's incoming media estimate\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'offer';\n            signalOffer({\n                call: that.call,\n                sessionDescription: oSession,\n                onSuccess: function () {\n                    that.state.sentSDP = true;\n                    setTimeout(processQueues);\n                },\n                onError: function (err) {\n                    respoke.log.error('offer could not be sent');\n                    that.call.hangup({signal: false});\n                }\n            });\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on offer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n     * other side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveAnswerAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveAnswerAndSend(oSession) {\n        if (!pc) {\n            return;\n        }\n\n        if (!that.state.caller) {\n            that.report.callerconnection = that.call.connectionId;\n        }\n\n        oSession.type = 'answer';\n        log.debug('setting and sending answer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'answer';\n            signalAnswer({\n                sessionDescription: oSession,\n                call: that.call\n            });\n            that.state.sentSDP = true;\n            processQueues();\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on answer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.close\n     * @fires respoke.PeerConnection#destoy\n     * @param {object} param\n     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n     * hangup signal.\n     * @fires respoke.PeerConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        toSendHangup = true;\n\n        if (that.state.caller === true) {\n            if (!that.state.sentSDP) {\n                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n                toSendHangup = false;\n            }\n        }\n\n        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n        if (toSendHangup) {\n            log.info('sending hangup');\n            signalHangup({\n                call: that.call\n            });\n        }\n\n        that.report.callStopped = new Date().getTime();\n\n        /**\n         * @event respoke.PeerConnection#close\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('close', {\n            sentSignal: toSendHangup\n        });\n        that.ignore();\n\n        if (pc && that.report) {\n            pc.close();\n        }\n        pc = null;\n\n        if (that.call.callDebugReportEnabled) {\n            signalReport({\n                report: that.report\n            });\n        }\n        that.report = null;\n    };\n    that.close = respoke.once(that.close);\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n    };\n\n    /**\n     * Set the estimated media status on incoming and outgoing media.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenOffer\n     * @param {object} evt\n     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n     * answered the call.\n     * @private\n     */\n    function listenOffer(evt) {\n        that.call.incomingMedia.setSDP(evt.signal.sessionDescription); // callee's incoming media\n        that.call.outgoingMedia.setSDP(evt.signal.sessionDescription); // callee's outgoing media estimate\n    }\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n     * answered the call.\n     * @private\n     */\n    function listenAnswer(evt) {\n        if (!pc) {\n            return;\n        }\n        log.debug('got answer', evt.signal);\n\n        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n        //set flags for audio / video for answer\n        that.call.hasAudio = respoke.sdpHasAudio(evt.signal.sessionDescription.sdp);\n        that.call.hasVideo = respoke.sdpHasVideo(evt.signal.sessionDescription.sdp);\n        that.call.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n        if (that.state.caller) {\n            that.report.calleeconnection = evt.signal.fromConnection;\n        }\n        that.call.connectionId = evt.signal.fromConnection;\n        // TODO don't signal connected more than once.\n        signalConnected({\n            call: that.call\n        });\n\n        pc.setRemoteDescription(\n            new RTCSessionDescription(evt.signal.sessionDescription),\n            function successHandler() {\n                that.call.incomingMedia.setSDP(evt.signal.sessionDescription); // caller's incoming media\n                that.state.dispatch('receiveAnswer');\n            }, function errorHandler(p) {\n                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n                that.report.callStoppedReason = newErr.message;\n                /**\n                 * This event is fired on errors that occur during call setup or media negotiation.\n                 * @event respoke.Call#error\n                 * @type {respoke.Event}\n                 * @property {string} reason - A human readable description about the error.\n                 * @property {respoke.Call} target\n                 * @property {string} name - the event name.\n                 */\n                that.call.fire('error', {\n                    message: newErr.message\n                });\n                log.error('set remote desc of answer failed', evt.signal.sessionDescription);\n                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                that.close();\n            }\n        );\n    }\n\n    /**\n     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n     * they are both on the same call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenConnected\n     * @private\n     */\n    function listenConnected(evt) {\n        if (evt.signal.connectionId !== client.connectionId) {\n            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n            that.call.hangup({signal: false});\n        }\n    }\n\n    /**\n     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n     * renegotiation.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.startModify\n     * @param {object} params\n     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n     */\n    that.startModify = function (params) {\n        defModify = Q.defer();\n        signalModify({\n            action: 'initiate',\n            call: that.call,\n            constraints: params.constraints,\n            directConnection: params.directConnection\n        });\n    };\n\n    /**\n     * Indicate a desire from the other side to renegotiate media.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenModify\n     * @param {object} evt\n     * @param {object} evt.signal\n     * @private\n     */\n    function listenModify(evt) {\n        var err;\n        log.debug('PC.listenModify', evt.signal);\n\n        if (evt.signal.action === 'accept') {\n            if (defModify.promise.isPending()) {\n                defModify.resolve();\n                /**\n                 * @event respoke.PeerConnection#modify-accept\n                 * @type {respoke.Event}\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-accept', {signal: evt.signal});\n            }\n            return;\n        } else if (evt.signal.action === 'reject') {\n            if (defModify.promise.isPending()) {\n                err = new Error(\"Remote party cannot negotiate.\");\n                log.debug(err.message);\n                defModify.reject(err);\n                /**\n                 * @event respoke.PeerConnection#modify-reject\n                 * @type {respoke.Event}\n                 * @property {Error} err\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-reject', {err: err});\n            }\n            return;\n        }\n\n        // This code only gets executed if signal.action === 'initiate'\n        if (defModify && defModify.promise.isPending()) {\n            // TODO compare signal request ID and accept if we have the higher request ID,\n            // reject if we have the lower request ID.\n            err = new Error(\"Got modify in a negotiating state.\");\n            log.debug(err.message);\n            defModify.reject(err);\n            /**\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            return;\n        }\n\n        defModify = Q.defer();\n\n        if (!that.state.sentSDP || that.state.isState('idle')) {\n            err = new Error(\"Got modify in a precall state.\");\n            /**\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            defModify.reject(err);\n            return;\n        }\n\n       /**\n         * @event respoke.PeerConnection#modify-accept\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('modify-accept', {signal: evt.signal});\n        signalModify({\n            action: 'accept',\n            call: that.call\n        });\n        defModify.resolve();\n    }\n\n    /**\n     * Save the candidate. If we initiated the call, place the candidate into the queue so\n     * we can process them after we receive the answer.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addRemoteCandidate\n     * @param {object} params\n     * @param {RTCIceCandidate} params.candidate\n     */\n    that.addRemoteCandidate = function (params) {\n        params = params || {};\n\n        if (!pc && params.processingQueue) { // we hung up.\n            return;\n        }\n\n        if (!params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n            log.warn(\"addRemoteCandidate got wrong format!\", params);\n            return;\n        }\n\n        if (!pc) {\n            candidateReceivingQueue.push(params.candidate);\n            log.debug('Queueing a candidate because pc is null.');\n            return;\n        }\n\n        if (that.state.sentSDP || that.state.processedRemoteSDP) {\n            try {\n                pc.addIceCandidate(new RTCIceCandidate(params.candidate));\n                log.debug('Got a remote candidate.', params.candidate);\n                that.report.candidatesReceived.push(params.candidate);\n            } catch (e) {\n                log.error(\"Couldn't add ICE candidate: \" + e.message, params.candidate);\n                return;\n            }\n        } else if (!params.processingQueue) {\n            candidateReceivingQueue.push(params.candidate);\n            log.debug('Queueing a candidate because no offer yet.');\n        }\n    };\n\n    that.call.listen('signal-offer', listenOffer, true);\n    that.call.listen('signal-answer', listenAnswer, true);\n    that.call.listen('signal-connected', listenConnected, true);\n    that.call.listen('signal-modify', listenModify, true);\n\n    return that;\n}; // End respoke.PeerConnection\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @ignore\n */\n\nvar log = require('loglevel');\nvar respoke = require('./respoke');\nvar Statechart = require('statechart');\nvar Q = require('q');\n\n/**\n * State machine for WebRTC calling, data channels, and screen sharing.\n * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n * asynchronously.\n * @class respoke.CallState\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {respoke.Call} call\n * @link https://cdn.respoke.io/respoke.min.js\n * @returns {respoke.CallState}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var fsm;\n    var that = respoke.EventEmitter(params);\n    that.className = 'respoke.CallState';\n\n    var allTimers = [];\n    var answerTimer;\n    var answerTimeout = params.answerTimeout || 10000;\n    var receiveAnswerTimer;\n    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n    var connectionTimer;\n    var connectionTimeout = params.connectionTimeout || 10000;\n    var modifyTimer;\n    var modifyTimeout = params.modifyTimeout || 60000;\n    var oldRole;\n\n    /*\n     * These can quite often result in a condition in which they do not cause a transition to occur.\n     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n     * result in a non-transition error when it's OK, and that is the 'reject' event.\n     */\n    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n        'receiveAnswer'];\n\n    function assert(condition) {\n        if (!condition) {\n            throw new Error(\"Assertion failed.\");\n        }\n    }\n\n    that.hasLocalMediaApproval = false;\n    that.hasLocalMedia = false;\n    that.receivedBye = false;\n    that.isAnswered = false;\n    that.sentSDP = false;\n    that.receivedSDP = false;\n    that.processedRemoteSDP = false;\n    that.needDirectConnection = !!that.needDirectConnection;\n    that.sendOnly = !!that.sendOnly;\n    that.receiveOnly = !!that.receiveOnly;\n\n    // Event\n    var rejectEvent = [{\n        target: 'connected',\n        guard: function (params) {\n            // we have any media flowing or data channel open\n            if (typeof oldRole === 'boolean') {\n                // Reset the role if we have aborted a modify.\n                that.caller = oldRole;\n            }\n\n            if (modifyTimer) {\n                modifyTimer.clear();\n            }\n\n            return that.hasMedia();\n        }\n    }, {\n        target: 'terminated',\n        guard: function (params) {\n            params = params || {};\n            // we have no media flowing or data channel open\n            that.hangupReason = params.reason || \"no media\";\n            return !that.hasMedia();\n        }\n    }];\n\n    // Event\n    function rejectModify() {\n        // reject modification\n        if (modifyTimer) {\n            modifyTimer.clear();\n        }\n    }\n\n    // Event\n    function clearReceiveAnswerTimer() {\n        that.processedRemoteSDP = true;\n        if (receiveAnswerTimer) {\n            receiveAnswerTimer.clear();\n        }\n    }\n\n    // Event\n    var hangupEvent = {\n        target: 'terminated',\n        action: function (params) {\n            params = params || {};\n            that.signalBye = params.signal;\n            that.hangupReason = that.hangupReason || params.reason || \"none\";\n        }\n    };\n\n    function needToObtainMedia(params) {\n        return (that.needDirectConnection !== true && that.receiveOnly !== true);\n    }\n\n    function needToApproveDirectConnection(params) {\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n    }\n\n    function automaticDirectConnectionCaller(params) {\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function' &&\n            that.caller === true);\n    }\n\n    function createTimer(func, name, time) {\n        var id = setTimeout(function () {\n            id = null;\n            respoke.log.error(name, \"timer expired.\");\n            func();\n        }, time);\n        respoke.log.debug('setting timer', name, 'for', time / 1000, 'secs');\n        var timer  = {\n            name: name,\n            clear: function () {\n                if (id === null) {\n                    return;\n                }\n                respoke.log.debug('clearing timer', name);\n                clearTimeout(id);\n                id = null;\n            }\n        };\n        allTimers.push(timer);\n        return timer;\n    }\n\n    var stateParams = {\n        initialState: 'idle',\n        receiveLocalMedia: function () {\n            that.hasLocalMedia = true;\n        },\n        states: {\n            // State\n            idle: {\n                // Event\n                exit: function () {\n                    that.fire('idle:exit');\n                },\n                // Event\n                initiate: [{\n                    target: 'negotiatingContainer',\n                    guard: function (params) {\n                        assert(typeof params.client === 'object');\n                        assert(typeof params.caller === 'boolean');\n                        return (params.caller === true || params.client.hasListeners('call'));\n                    }\n                }, {\n                    target: 'terminated',\n                    guard: function (params) {\n                        if (params.caller !== true && !params.client.hasListeners('call')) {\n                            that.hangupReason = 'no call listener';\n                            that.signalBye = true;\n                            return true;\n                        }\n                        return false;\n                    }\n                }],\n                // Event\n                hangup: hangupEvent\n            },\n            // State\n            negotiatingContainer: {\n                init: \"preparing\",\n                // Event\n                hangup: hangupEvent,\n                // Event\n                modify: rejectModify,\n                states: {\n                    preparing: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.hasLocalMediaApproval = false;\n                                that.hasLocalMedia = false;\n                                that.sentSDP = false;\n                                that.receivedSDP = false;\n                                that.processedRemoteSDP = false;\n                                that.isAnswered = false;\n                                if (!that.isModifying()) {\n                                    answerTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n                                    }, 'answer own call', answerTimeout);\n                                }\n                                that.fire('preparing:entry');\n                            }\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('preparing:exit');\n                            if (answerTimer) {\n                                answerTimer.clear();\n                            }\n                        },\n                        // Event\n                        reject: rejectEvent,\n                        // Event\n                        receiveOffer: {\n                            action: function (params) {\n                                that.receivedSDP = true;\n                                if (that.isAnswered) {\n                                    // If we get here, we are the callee and we've answered the call before the call\n                                    // creation/receive offer promise chain completed.\n                                    setTimeout(function () {\n                                        that.dispatch('answer', params);\n                                    });\n                                }\n                            }\n                        },\n                        // Event\n                        answer: [{\n                            action: function (params) {\n                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n                                that.isAnswered = true;\n                                if (typeof params.previewLocalMedia !== 'function') {\n                                    that.hasLocalMediaApproval = true;\n                                }\n                            }\n                        }, {\n                            // we are going to send media\n                            target: 'approvingDeviceAccess',\n                            guard: needToObtainMedia\n                        }, {\n                            // we are sending a direct connection & developer wants to approve\n                            target: 'approvingContent',\n                            guard: needToApproveDirectConnection\n                        }, {\n                            target: 'offering',\n                            guard: automaticDirectConnectionCaller\n                        }, {\n                            // we are not sending anything or developer does not want to approve media.\n                            target: 'connecting',\n                            guard: function (params) {\n                                // always for callee, caller will always answer before sending offer.\n                                // callee should always answer after receiving offer.\n                                if (!that.receivedSDP) {\n                                    return false;\n                                }\n\n                                if (needToObtainMedia(params) || needToApproveDirectConnection(params) ||\n                                        automaticDirectConnectionCaller(params)) {\n                                    return false;\n                                }\n\n                                if (!params.previewLocalMedia || that.receiveOnly) {\n                                    setTimeout(function () {\n                                        params.approve();\n                                    });\n                                }\n                                return (that.receiveOnly === true || that.needDirectConnection === true);\n                            }\n                        }]\n                    },\n                    // State\n                    gettingMedia: {\n                        reject: rejectEvent,\n                        // Event\n                        receiveLocalMedia: [{\n                            action: function () {\n                                that.hasLocalMedia = true;\n                            }\n                        }, {\n                            target: 'offering',\n                            guard: function (params) {\n                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }, {\n                            target: 'connecting',\n                            guard: function (params) {\n                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }],\n                        states: {\n                            // State\n                            approvingDeviceAccess: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-device-access:entry');\n                                },\n                                // Event\n                                approve: [{\n                                    target: 'approvingContent',\n                                    guard: function (params) {\n                                        return (typeof params.previewLocalMedia === 'function');\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false &&\n                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }]\n                            },\n                            // State\n                            approvingContent: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-content:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('approving-content:exit');\n                                },\n                                // Event\n                                approve: [function (params) {\n                                    that.hasLocalMediaApproval = true;\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true);\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false && that.hasLocalMedia === true);\n                                    }\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    offeringContainer: {\n                        init: 'offering',\n                        reject: rejectEvent,\n                        sentOffer: function () {\n                            // start answer timer\n                            receiveAnswerTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"receive answer timer\"});\n                            }, 'receive answer', receiveAnswerTimeout);\n                        },\n                        states: {\n                            offering: {\n                                // Event\n                                entry: function () {\n                                    that.fire('offering:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('offering:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [function () {\n                                    that.hasLocalMedia = true;\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                },\n                                // Event\n                                receiveAnswer: [clearReceiveAnswerTimer, {\n                                    target: 'connecting'\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    connectingContainer: {\n                        init: 'connecting',\n                        reject: rejectEvent,\n                        receiveAnswer: clearReceiveAnswerTimer,\n                        states: {\n                            connecting: {\n                                // Event\n                                entry: function () {\n                                    that.fire('connecting:entry');\n\n                                    // set connection timer\n                                    connectionTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"connection timer\"});\n                                    }, 'connection', connectionTimeout);\n                                },\n                                // Event\n                                exit: function () {\n                                    if (connectionTimer) {\n                                        connectionTimer.clear();\n                                    }\n                                    if (modifyTimer) {\n                                        modifyTimer.clear();\n                                    }\n                                    that.fire('connecting:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [{\n                                    action: function () {\n                                        that.hasLocalMedia = true;\n                                    }\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true && that.caller === false);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // State\n            // This state is for when we are in limbo between connected and negotiating and we are\n            // trying to figure out if the other side will allow us to modify. If we receive modify in\n            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n            modifyingContainer: {\n                init: 'modifying',\n                reject: rejectEvent,\n                // Event\n                modify: rejectModify,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    modifying: {\n                        // Event\n                        entry: function () {\n                            modifyTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"modify timer\"});\n                            }, 'modify for caller', modifyTimeout);\n                            that.fire('modifying:entry');\n                        },\n                        // Event\n                        accept: [function () {\n                            that.caller = true;\n                        }, {\n                            target: 'preparing'\n                        }],\n                        // Event\n                        exit: function () {\n                            that.fire('modifying:exit');\n                        }\n                    }\n                }\n            },\n            // State\n            connectedContainer: {\n                init: 'connected',\n                reject: {\n                    target: 'terminated',\n                    action: function (params) {\n                        that.hangupReason = params.reason || \"got reject while connected\";\n                    }\n                },\n                receiveAnswer: clearReceiveAnswerTimer,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    connected: {\n                        // Event\n                        entry: function () {\n                            oldRole = that.caller;\n                            that.needDirectConnection = false;\n                            that.fire('connected:entry');\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('connected:exit');\n                        },\n                        // Event\n                        modify: [{\n                            // be notified that the other side would like modification\n                            target: 'preparing',\n                            guard: function (params) {\n                                params = params || {};\n                                if (params.receive === true) {\n                                    that.caller = false;\n                                    modifyTimer = createTimer(function () {\n                                        // If modify gets interrupted, go back to previous roles.\n                                        that.dispatch('reject', {reason: \"modify timer\"});\n                                    }, 'modify', modifyTimeout);\n                                    return true;\n                                }\n                            }\n                        }, {\n                            // request to begin modification\n                            target: 'modifying',\n                            guard: function (params) {\n                                params = params || {};\n                                return (params.receive !== true);\n                            }\n                        }]\n                    }\n                }\n            },\n            // State\n            terminatedContainer: {\n                init: 'terminated',\n                states: {\n                    terminated: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.fire('terminated:entry');\n                                allTimers.forEach(function (timer) {\n                                    timer.clear();\n                                });\n                                setTimeout(function () {\n                                    fsm = null;\n                                    that.ignore();\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    stateParams.that = Object.create(Statechart);\n    fsm = respoke.Class(stateParams);\n    fsm.run({\n        // rename to 'debug' to enable\n        debugOff: function () {\n            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(0, 0, that.caller);\n            respoke.log.debug.apply(respoke.log, args);\n        }\n    });\n\n    /**\n     * Return the name of the current state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.getState\n     * @returns {string}\n     */\n    that.getState = function () {\n        if (!fsm) {\n            return 'terminated';\n        }\n        return fsm.currentState().name;\n    };\n\n    /**\n     * Synchronously dispatch an event, which may or may not change the state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.dispatch\n     */\n    that.dispatch = function (evt, args) {\n        var oldState;\n        var newState;\n\n        if (!fsm) {\n            return;\n        }\n\n        oldState = that.getState();\n        try {\n            fsm.dispatch(evt, args);\n        } catch (err) {\n            respoke.log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n            throw err;\n        }\n        newState = that.getState();\n        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n            respoke.log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n        }\n        respoke.log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n    };\n\n    /**\n     * Determine whether or not we are in the middle of a call modification.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isModifying\n     * @returns {boolean}\n     */\n    that.isModifying = function () {\n        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n    };\n\n    /**\n     * Helper for testing state name\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isState\n     * @param {string} name\n     * @returns {boolean}\n     */\n    that.isState = function (name) {\n        return (that.getState() === name);\n    };\n\n    assert(typeof that.hasMedia === 'function');\n    assert(typeof that.caller === 'boolean');\n    return that;\n};\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar Q = require('q');\nvar log = require('loglevel');\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia, path and codec negotation,\n * and call state.\n *\n * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n *\n * @class respoke.Call\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} params.caller - whether or not we initiated the call\n * @param {boolean} [params.receiveOnly] - whether or not we accept media\n * @param {boolean} [params.sendOnly] - whether or not we send media\n * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n * relay servers. If it cannot flow through relay servers, the call will fail.\n * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n * required to flow peer-to-peer. If it cannot, the call will fail.\n * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n * wants to perform an action between local media becoming available and calling approve().\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n * media renegotiation.\n * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n * This callback will be called when media is muted or unmuted.\n * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n * for the user to give permission to start getting audio or video.\n * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n * the approval was automatic.\n * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n * granted by the browser without asking the user to approve it.\n * @param {object} params.callSettings\n * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local video attached to it.\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote video attached to it.\n * @returns {respoke.Call}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Call\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * A name to identify the type of object.\n     * @memberof! respoke.Call\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Call';\n\n    /**\n     * Whether or not the client is the caller of the call.\n     * @memberof! respoke.Call\n     * @name caller\n     * @type {boolean}\n     */\n    that.caller = !!that.caller;\n\n    /**\n     * The call ID.\n     * @memberof! respoke.Call\n     * @name id\n     * @type {string}\n     */\n    that.id = that.caller ? respoke.makeGUID() : that.id;\n\n    if (!that.id) {\n        throw new Error(\"Can't start a new call without a call id.\");\n    }\n\n    /**\n     * Promise used to trigger actions dependant upon having received media or a datachannel.\n     * @memberof! respoke.Call\n     * @name defMedia\n     * @private\n     * @type {Promise}\n     */\n    var defMedia = Q.defer();\n    /**\n     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n     * resolved or rejected only after the developer or user approves or rejects the modify.\n     * @memberof! respoke.Call\n     * @name defModify\n     * @private\n     * @type {Promise}\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.Call\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     */\n    var previewLocalMedia = params.previewLocalMedia;\n    /**\n     * @memberof! respoke.Call\n     * @name client\n     * @private\n     * @type {respoke.getClient}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.Call\n     * @name signalingChannel\n     * @private\n     * @type {respoke.signalingChannel}\n     */\n    var signalingChannel = params.signalingChannel;\n    /**\n     * Informational property. Whether call debugs were enabled on the client during creation.\n     * Changing this value will do nothing.\n     * @name callDebugReportEnabled\n     * @type {boolean}\n     */\n    that.callDebugReportEnabled = !!params.signalingChannel.callDebugReportEnabled;\n    /**\n     * A flag indicating whether this call has audio.\n     *\n     * This becomes available after the call is accepted, for the client being called only.\n     *\n     * @name hasAudio\n     * @type {boolean}\n     */\n    that.hasAudio = undefined;\n    /**\n     * A flag indicating whether this call has video.\n     *\n     * This becomes available after the call is accepted, for the client being called only.\n     *\n     * @name hasVideo\n     * @type {boolean}\n     */\n    that.hasVideo = undefined;\n\n    /**\n     * Local media\n     * @name outgoingMedia\n     * @type {respoke.LocalMedia}\n     */\n    that.outgoingMedia = respoke.LocalMedia(params);\n\n    /**\n     * Remote media\n     * @name incomingMedia\n     * @type {respoke.RemoteMedia}\n     */\n    that.incomingMedia = respoke.RemoteMedia(params);\n\n    /**\n     * This event indicates that local video has been unmuted.\n     * @event respoke.Call#mute\n     * @property {string} name - the event name.\n     * @property {respoke.Call} target\n     * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n     * has been changed.\n     * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n     */\n    that.outgoingMedia.listen('mute', function (evt) {\n        that.fire('mute', {\n            type: evt.type,\n            muted: evt.muted\n        });\n    });\n\n    delete params.signalingChannel;\n    delete that.signalingChannel;\n\n    /**\n     * @memberof! respoke.Call\n     * @name videoIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var videoIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name audioIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var audioIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name callSettings\n     * @private\n     * @type {object}\n     */\n    var callSettings = params.callSettings;\n    /**\n     * @memberof! respoke.Call\n     * @name directConnection\n     * @private\n     * @type {respoke.DirectConnection}\n     */\n    var directConnection = null;\n    /**\n     * @memberof! respoke.Call\n     * @name toSendHangup\n     * @private\n     * @type {boolean}\n     */\n    var toSendHangup = null;\n\n    /**\n     * @memberof! respoke.Call\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = respoke.PeerConnection({\n        instanceId: instanceId,\n        state: respoke.CallState({\n            caller: that.caller,\n            needDirectConnection: params.needDirectConnection,\n            sendOnly: params.sendOnly,\n            receiveOnly: params.receiveOnly,\n            // hasMedia is not defined yet.\n            hasMedia: function () {\n                return that.hasMedia();\n            }\n        }),\n        forceTurn: !!params.forceTurn,\n        call: that,\n        callSettings: callSettings,\n        pcOptions: {\n            optional: [\n                { DtlsSrtpKeyAgreement: true },\n                { RtpDataChannels: false }\n            ]\n        },\n        offerOptions: params.offerOptions || null,\n        signalOffer: function (args) {\n            if (!pc) {\n                return;\n            }\n\n            params.signalOffer(args);\n            pc.state.dispatch('sentOffer');\n        },\n        signalConnected: params.signalConnected,\n        signalAnswer: params.signalAnswer,\n        signalModify: params.signalModify,\n        signalHangup: params.signalHangup,\n        signalReport: params.signalReport,\n        signalCandidate: params.signalCandidate\n    });\n\n    /**\n     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n     * @method respoke.Call.init\n     * @memberof! respoke.Call\n     * @fires respoke.Client#call\n     * @private\n     */\n    function init() {\n        log.debug('Call.init');\n\n        if (defModify !== undefined) {\n            defMedia = Q.defer();\n        }\n\n        pc.init(callSettings); // instantiates RTCPeerConnection, can't call on modify\n        if (defModify === undefined && pc.state.needDirectConnection === true) {\n            actuallyAddDirectConnection(params);\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n     * @memberof! respoke.Call\n     * @method respoke.Call.saveParameters\n     * @param {object} params\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {object} [params.callSettings]\n     * @param {object} [params.constraints]\n     * @param {array} [params.servers]\n     * @param {boolean} [params.forceTurn]\n     * @param {boolean} [params.receiveOnly]\n     * @param {boolean} [params.sendOnly]\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote video attached to it.\n     * @private\n     * @fires respoke.Call#stats\n     */\n    function saveParameters(params) {\n        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n         * invocation of this function is an artifact of async code not being finished yet, so we can just\n         * skip all of this setup.\n         */\n        if (!pc) {\n            return;\n        }\n\n        that.listen('local-stream-received', params.onLocalMedia);\n        that.listen('connect', params.onConnect);\n        that.listen('hangup', params.onHangup);\n        that.listen('allow', params.onAllow);\n        that.listen('answer', params.onAnswer);\n        that.listen('approve', params.onApprove);\n        that.listen('mute', params.onMute);\n        that.listen('requesting-media', params.onRequestingMedia);\n\n        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ? params.needDirectConnection : pc.state.needDirectConnection;\n        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n            params.previewLocalMedia : previewLocalMedia;\n\n        callSettings = params.callSettings || callSettings || {};\n        callSettings.servers = params.servers || callSettings.servers;\n        callSettings.constraints = params.constraints || callSettings.constraints;\n        callSettings.disableTurn = params.disableTurn || callSettings.disableTurn;\n\n        that.outgoingMedia.element = params.videoLocalElement || that.outgoingMedia.element;\n        that.outgoingMedia.setConstraints(callSettings.constraints);\n        if (pc.state.caller === true) {\n            // Only the person who initiated this round of media negotiation needs to estimate remote\n            // media based on what constraints local media is using.\n            that.incomingMedia.setConstraints(callSettings.constraints);\n        }\n        that.incomingMedia.element = params.videoRemoteElement || that.incomingMedia.element;\n\n\n        pc.callSettings = callSettings;\n        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : pc.forceTurn;\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about audio and/or video on a call\n             * becomes available.\n             * @event respoke.Call#stats\n             * @type {respoke.Event}\n             * @property {respoke.MediaStats} stats - an object with stats in it.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n        delete that.signalOffer;\n        delete that.signalConnected;\n        delete that.signalAnswer;\n        delete that.signalHangup;\n        delete that.signalReport;\n        delete that.signalCandidate;\n    }\n\n    /**\n     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n     * @memberof! respoke.Call\n     * @method respoke.Call.answer\n     * @fires respoke.Call#answer\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {object} [params.constraints] - Information about the media for this call.\n     * @param {array} [params.servers] - A list of sources of network paths to help with negotiating the connection.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote video attached to it.\n     */\n    that.answer = function (params) {\n        params = params || {};\n        log.debug('Call.answer');\n\n        saveParameters(params);\n\n        pc.listen('connect', onRemoteStreamAdded, true);\n        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\n        pc.state.once('approving-device-access:entry', function (evt) {\n            doAddVideo(params);\n        });\n        pc.state.dispatch('answer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n        /**\n         * The call was answered.\n         * @event respoke.Call#answer\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('answer');\n    };\n\n    /**\n     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n     * to accept or reject them.\n     * @memberof! respoke.Call\n     * @method respoke.Call.accept\n     * @fires respoke.Call#accept\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n     * remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {object} [params.constraints] - Information about the media for this call.\n     * @param {array} [params.servers] - A list of sources of network paths to help with negotiating the connection.\n     */\n    that.accept = that.answer;\n\n    /**\n     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n     * audio and/or video is working correctly,\n     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n     * will progress as expected. If call.reject() is called, the call will be aborted.\n     * @memberof! respoke.Call\n     * @method respoke.Call.approve\n     * @fires respoke.Call#approve\n     */\n    that.approve = function () {\n        log.debug('Call.approve');\n        /**\n         * Fired when the local media access is approved.\n         *\n         * @event respoke.Call#approve\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('approve');\n        pc.state.dispatch('approve', {\n            previewLocalMedia: previewLocalMedia\n        });\n\n        if (defModify && defModify.promise.isPending()) {\n            defModify.resolve(true);\n            defModify = undefined;\n        }\n    };\n\n    /**\n     * Listen for the remote side to remove media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamRemoved\n     * @private\n     * @param {object}\n     */\n    function onRemoteStreamRemoved(evt) {\n        log.debug('pc event: remote stream removed');\n    }\n\n    /**\n     * Listen for the remote side to add additional media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamAdded\n     * @private\n     * @param {object}\n     * @fires respoke.Call#connect\n     */\n    function onRemoteStreamAdded(evt) {\n        if (!pc) {\n            return;\n        }\n        log.debug('received remote media', evt);\n\n        that.incomingMedia.setStream(evt.stream);\n\n        /**\n         * Indicates that a remote media stream has been added to the call.\n         *\n         * @event respoke.Call#connect\n         * @event respoke.LocalMedia#connect\n         * @type {respoke.Event}\n         * @property {Element} element - The HTML5 Video element with the new stream attached.\n         * @property {MediaStream} stream - The media stream.\n         * @property {string} name - The event name.\n         * @property {respoke.Call} target\n         */\n        pc.state.dispatch('receiveRemoteMedia');\n        that.fire('connect', {\n            stream: evt.stream,\n            element: that.incomingMedia.element\n        });\n    }\n\n    /**\n     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n     *\n     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n     * Since we have to wait for both the answer and offer to be available before starting\n     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n     * @memberof! respoke.Call\n     * @method respoke.Call.getStats\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n     * receive them on the client-side.\n     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n     * @returns {Promise<object>|null}\n     */\n    function getStats(params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            return pc.getStats(params);\n        }\n        return null;\n    }\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n     * @memberof! respoke.Call\n     * @method respoke.Call.getLocalElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getLocalElement = function () {\n        return that.outgoingMedia.element;\n    };\n\n    /**\n     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n     * @memberof! respoke.Call\n     * @method respoke.Call.getRemoteElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getRemoteElement = function () {\n        return that.incomingMedia.element;\n    };\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n     * after answer() so we cannot use this method to set up the DirectConnection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.doAddVideo\n     * @todo Find out when we can stop deleting TURN servers\n     * @private\n     * @param {object} params\n     * @param {object} [params.constraints] - getUserMedia constraints\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @fires respoke.Call#requesting-media\n     * @fires respoke.Call#allow\n     * @fires respoke.Call#local-stream-received\n     */\n    function doAddVideo(params) {\n        log.debug('Call.doAddVideo');\n        saveParameters(params);\n        that.outgoingMedia.listen('requesting-media', function waitAllowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.Call#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('requesting-media');\n        }, true);\n        that.outgoingMedia.listen('allow', function allowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n             * without asking the user to approve it.\n             * @event respoke.Call#allow\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('allow');\n            pc.state.dispatch('approve', {\n                previewLocalMedia: previewLocalMedia\n            });\n        }, true);\n        that.outgoingMedia.listen('stream-received', function streamReceivedHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            defMedia.resolve(that.outgoingMedia);\n            pc.addStream(evt.stream);\n            pc.state.dispatch('receiveLocalMedia');\n            if (typeof previewLocalMedia === 'function') {\n                previewLocalMedia(evt.element, that);\n            }\n\n            /**\n             * @event respoke.Call#local-stream-received\n             * @type {respoke.Event}\n             * @property {Element} element\n             * @property {respoke.LocalMedia} stream\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('local-stream-received', {\n                element: evt.element,\n                stream: that.outgoingMedia\n            });\n        }, true);\n        that.outgoingMedia.listen('error', function errorHandler(evt) {\n            pc.state.dispatch('reject', {reason: 'media stream error'});\n            pc.report.callStoppedReason = evt.reason;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('error', {\n                reason: evt.reason\n            });\n        });\n\n        that.outgoingMedia.start();\n        return that.outgoingMedia;\n    }\n\n    /**\n     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n     * If audio is not desired, pass {audio: false}.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addVideo\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=true]\n     * @param {object} [params.constraints] - getUserMedia constraints, indicating the media being requested is\n     * an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addVideo = function (params) {\n        log.debug('Call.addVideo');\n        params = params || {};\n        params.constraints = params.constraints || {video: true, audio: true};\n        params.constraints.audio = typeof params.audio === 'boolean' ? params.audio : params.constraints.audio;\n        params.constraints.video = typeof params.video === 'boolean' ? params.video : params.constraints.video;\n        params.instanceId = instanceId;\n\n        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n            doAddVideo(params);\n        } else { // we're the caller and need to see if we can modify\n            pc.startModify({\n                constraints: params.constraints\n            });\n            defModify = Q.defer();\n            defModify.promise.then(function modifyAccepted() {\n                doAddVideo(params);\n            });\n        }\n        return defModify.promise;\n    };\n\n    /**\n     * Add an audio stream to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addAudio\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=false]\n     * @param {object} [params.constraints] - getUserMedia constraints, indicating the media being requested is\n     * an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addAudio = function (params) {\n        params = params || {};\n        params.constraints = params.constraints || {video: false, audio: true};\n        params.constraints.video = typeof params.constraints.video === 'boolean' ?\n            params.constraints.video : false;\n        params.constraints.audio = typeof params.audio === 'boolean' ? params.audio : params.constraints.audio;\n        params.constraints.video = typeof params.video === 'boolean' ? params.video : params.constraints.video;\n        return that.addVideo(params);\n    };\n\n    /**\n     * Get the direct connection on this call, if it exists.\n     * @memberof! respoke.Call\n     * @method respoke.Call.getDirectConnection\n     */\n    that.getDirectConnection = function () {\n        return directConnection || null;\n    };\n\n    /**\n     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.removeDirectConnection\n     * @private\n     * @param {object} params\n     */\n    that.removeDirectConnection = function (params) {\n        params = params || {};\n        log.debug('Call.removeDirectConnection');\n\n        if (directConnection && directConnection.isActive()) {\n            directConnection.close({skipRemove: true});\n        }\n\n        if (!that.hasMedia()) {\n            log.debug('Hanging up because there are no local streams.');\n            that.hangup();\n            return;\n        }\n\n        if (params.skipModify === true) {\n            return;\n        }\n\n        pc.startModify({\n            directConnection: false\n        });\n        defModify = Q.defer();\n        defModify.promise.done(function onModifySuccess() {\n            defMedia.resolve();\n            defModify = undefined;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     */\n    that.addDirectConnection = function (params) {\n        log.debug('Call.addDirectConnection');\n        pc.startModify({\n            directConnection: true\n        });\n        defModify = Q.defer();\n        return defModify.promise.then(function onModifySuccess() {\n            return actuallyAddDirectConnection(params);\n        }, function onModifyError(err) {\n            throw err;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.actuallyAddDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     * @fires respoke.Client#direct-connection\n     * @fires respoke.Call#direct-connection\n     */\n    function actuallyAddDirectConnection(params) {\n        log.debug('Call.actuallyAddDirectConnection', params);\n        params = params || {};\n        defMedia.promise.then(params.onSuccess, params.onError);\n\n        if (directConnection && directConnection.isActive()) {\n            if (defMedia.promise.isPending()) {\n                defMedia.resolve(directConnection);\n            } else {\n                log.warn(\"Not creating a new direct connection.\");\n            }\n            return defMedia.promise;\n        }\n\n        params.instanceId = instanceId;\n        params.pc = pc;\n        params.call = that;\n\n        directConnection = respoke.DirectConnection(params);\n\n        directConnection.listen('close', function closeHandler() {\n            if (!that.hasMedia()) {\n                log.debug('Hanging up because there are no local streams.');\n                that.hangup();\n            } else {\n                if (directConnection && directConnection.isActive()) {\n                    that.removeDirectConnection({skipModify: true});\n                }\n            }\n        }, true);\n\n        directConnection.listen('accept', function acceptHandler() {\n            if (pc.state.caller === false) {\n                log.debug('Answering as a result of approval.');\n            } else {\n                defMedia.resolve(directConnection);\n            }\n        }, true);\n\n        directConnection.listen('open', function openHandler() {\n            pc.state.dispatch('receiveRemoteMedia');\n        }, true);\n\n        directConnection.listen('error', function errorHandler(err) {\n            defMedia.reject(new Error(err));\n        }, true);\n\n        that.remoteEndpoint.directConnection = directConnection;\n\n        /**\n         * This event is fired when the local end of the directConnection is available. It still will not be\n         * ready to send and receive messages until the 'open' event fires.\n         * @event respoke.Call#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        /**\n         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n         * to another endpoint.  If the user wishes to allow the direct connection, calling\n         * evt.directConnection.accept() will allow the connection to be set up.\n         * @event respoke.Client#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @private\n         */\n        client.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        if (pc.state.caller === true) {\n            directConnection.accept();\n        }\n\n        return defMedia.promise;\n    }\n\n    /**\n     *\n     * Close the direct connection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.closeDirectConnection\n     */\n    that.closeDirectConnection = function () {\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n    };\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @param {object} params\n     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.hangup = function (params) {\n        if (!pc) {\n            return;\n        }\n        params = params || {};\n        params.reason = params.reason || \"hangup method called.\";\n        pc.state.dispatch('hangup', params);\n    };\n    that.hangup = respoke.once(that.hangup);\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n     * handler added to the state machine via `once`.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @private\n     */\n    var doHangup = function () {\n        log.debug('hangup', that.caller);\n\n        that.outgoingMedia.stop();\n\n        if (directConnection && directConnection.isActive()) {\n            directConnection.close();\n            that.remoteEndpoint.directConnection = null;\n            directConnection.ignore();\n            directConnection = null;\n        }\n\n        if (pc) {\n            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n        }\n\n        /**\n         * This event is fired when the call has hung up.\n         * @event respoke.Call#hangup\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('hangup', {\n            reason: pc.state.hangupReason || \"No reason specified.\"\n        });\n\n        pc.state.ignore();\n        pc.ignore();\n        that.ignore();\n        pc = null;\n    };\n    doHangup = respoke.once(doHangup);\n\n    /**\n     * Expose hangup as reject for approve/reject workflow.\n     * @memberof! respoke.Call\n     * @method respoke.Call.reject\n     * @param {object} params\n     */\n    that.reject = function () {\n        if (!pc) {\n            return;\n        }\n        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n    };\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.Call\n     * @method respoke.Call.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        // TODO: make this look for remote streams, too. Want to make this handle one-way media calls.\n        return !!(pc && pc.isActive() && (\n            (that.outgoingMedia.hasMedia()) ||\n            (directConnection && directConnection.isActive())\n        ));\n    };\n\n    /**\n     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenOffer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     * @fires respoke.Call#modify\n     */\n    function listenOffer(evt) {\n        log.debug('listenOffer', evt.signal);\n        var info = {};\n\n        that.sessionId = evt.signal.sessionId;\n        pc.state.listen('connecting:entry', function () {\n            if (!pc.state.caller) {\n                pc.processOffer(evt.signal.sessionDescription);\n            }\n        });\n\n        if (pc.state.isModifying()) {\n            if (pc.state.needDirectConnection === true) {\n                info.directConnection = directConnection;\n            } else if (pc.state.needDirectConnection === false) {\n                // Nothing\n            } else {\n                info.call = that;\n                info.constraints = callSettings.constraints;\n            }\n            /**\n             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n             * describes the media the other side has added. In this case, call.approve() must be called in order\n             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n             * call.\n             * @event respoke.Call#modify\n             * @type {respoke.Event}\n             * @property {object} [constraints]\n             * @property {boolean} [directConnection]\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('modify', info);\n        }\n\n        pc.state.dispatch('receiveOffer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n    }\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenModify\n     * @private\n     */\n    function listenModify(evt) {\n        log.debug('Call.listenModify', evt);\n        if (evt.signal.action === 'initiate') {\n            defModify = Q.defer();\n            pc.state.dispatch('modify', {receive: true});\n        }\n    }\n\n    /**\n     * Set up state and media for the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyAccept\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function onModifyAccept(evt) {\n        pc.state.dispatch('accept');\n\n        if (evt.signal.action !== 'initiate') {\n            defModify.resolve(); // resolved later for callee\n            defModify = undefined;\n            return;\n        }\n\n        // callee only from here down\n\n        // init the directConnection if necessary. We don't need to do anything with\n        // audio or video right now.\n        if (evt.signal.directConnection === true) {\n            actuallyAddDirectConnection().done(function successHandler(dc) {\n                directConnection = dc;\n                directConnection.accept();\n            });\n        } else if (evt.signal.directConnection === false) {\n            if (directConnection) {\n                that.removeDirectConnection({skipModify: true});\n                defMedia.resolve(false);\n            }\n        }\n        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ? evt.signal.directConnection : null;\n        callSettings.constraints = evt.signal.constraints || callSettings.constraints;\n    }\n\n    /**\n     * Ignore the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyReject\n     * @param {respoke.Event} evt\n     * @param {Error} evt.err\n     * @private\n     */\n    function onModifyReject(evt) {\n        if (evt.signal.action !== 'initiate') {\n            defMedia.reject(evt.err);\n            defModify.reject(evt.err);\n            defModify = undefined;\n        }\n    }\n\n    /**\n     * If video is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleVideo\n     */\n    that.toggleVideo = function () {\n        if (that.isActive()) {\n            if (!videoIsMuted) {\n                that.muteVideo();\n            } else {\n                that.unmuteVideo();\n            }\n        }\n    };\n\n    /**\n     * If audio is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleAudio\n     */\n    that.toggleAudio = function () {\n        if (that.isActive()) {\n            if (!audioIsMuted) {\n                that.muteAudio();\n            } else {\n                that.unmuteAudio();\n            }\n        }\n    };\n\n    /**\n     * Indicate whether the call has media flowing.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hasMedia\n     * @returns {boolean}\n     */\n    that.hasMedia = function () {\n        var local;\n        var remote;\n\n        if (!pc || !pc.getLocalStreams) {\n            // PeerConnection.init() has not been called yet\n            return false;\n        }\n\n        local = pc.getLocalStreams();\n        remote = pc.getRemoteStreams();\n\n        if (directConnection && directConnection.isActive()) {\n            return true;\n        }\n\n        return (local.length > 0 || remote.length > 0);\n    };\n\n    /**\n     * Mute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteVideo\n     * @fires respoke.Call#mute\n     */\n    that.muteVideo = function () {\n        if (videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteVideo();\n        videoIsMuted = true;\n    };\n\n    /**\n     * Unmute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteVideo\n     * @fires respoke.Call#mute\n     */\n    that.unmuteVideo = function () {\n        if (!videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.unmuteVideo();\n        videoIsMuted = false;\n    };\n\n    /**\n     * Mute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteAudio\n     * @fires respoke.Call#mute\n     */\n    that.muteAudio = function () {\n        if (audioIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteAudio();\n        audioIsMuted = true;\n    };\n\n    /**\n     * Unmute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteAudio\n     * @fires respoke.Call#mute\n     */\n    that.unmuteAudio = function () {\n        if (!audioIsMuted) {\n            return;\n        }\n\n        that.outgoingMedia.unmuteAudio();\n        audioIsMuted = false;\n    };\n\n    /**\n     * Save the hangup reason and hang up.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenHangup\n     * @params {object} evt\n     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n     * @private\n     */\n    function listenHangup(evt) {\n        if (!pc) {\n            return;\n        }\n        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n        pc.state.receivedBye = true;\n        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n    }\n\n    pc.state.once('terminated:entry', function (evt) {\n        doHangup();\n    }, true);\n\n    that.listen('signal-offer', listenOffer, true);\n    that.listen('signal-hangup', listenHangup, true);\n    that.listen('signal-modify', listenModify, true);\n    pc.listen('modify-reject', onModifyReject, true);\n    pc.listen('modify-accept', onModifyAccept, true);\n    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n            return;\n        }\n        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n            if (!pc) {\n                return;\n            }\n            pc.addRemoteCandidate({candidate: candidate});\n        });\n    }, true);\n\n    if (pc.state.needDirectConnection !== true) {\n        pc.state.once('preparing:entry', function () {\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, the app should call evt.call.answer() to answer the call.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('call', {\n                endpoint: that.remoteEndpoint,\n                call: that\n            });\n        }, true);\n    }\n\n    pc.state.listen('idle:exit', function (evt) {\n        saveParameters(params);\n    });\n\n    pc.state.listen('preparing:entry', function (evt) {\n        init();\n\n        if (pc.state.caller === true) {\n            that.answer();\n        }\n    }, true);\n\n    signalingChannel.getTurnCredentials().then(function (result) {\n        if (!result) {\n            log.warn(\"Relay service not available.\");\n            callSettings.servers = {\n                iceServers: []\n            };\n        } else {\n            callSettings.servers = client.callSettings.servers;\n            callSettings.servers.iceServers = result;\n        }\n    }).fin(function () {\n        pc.state.dispatch('initiate', {\n            client: client,\n            caller: that.caller\n        });\n    }).done(null, function (err) {\n        // who cares\n    });\n\n    return that;\n}; // End respoke.Call\n\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Call.errorHandler\n * @param {Error} err\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.Call.statsSuccessHandler\n * @param {respoke.MediaStatsParser} statsParser\n */\n/**\n * Handle obtaining media successfully.\n * @callback respoke.Call.mediaSuccessHandler\n * @param {respoke.LocalMedia} localMedia\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to show the user their own video during a call. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Event} evt\n * @param {Element} evt.element\n * @param {respoke.LocalMedia} evt.stream\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n * to show the user the other party's video during a call. This callback is called every time\n * respoke.Call#connect is fired.\n * @callback respoke.Call.onConnect\n * @param {respoke.Event} evt\n * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.Call#error.\n * @callback respoke.Call.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive notification the call has been hung up. This callback is called every time\n * respoke.Call#hangup is fired.\n * @callback respoke.Call.onHangup\n * @param {respoke.Event} evt\n * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n * unmuted. This callback is called every time respoke.Call#mute is fired.\n * @callback respoke.Call.onMute\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n * @callback respoke.Call.onAnswer\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the user approves local media. This callback will be called whether or not the approval was based\n * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n * respoke.Call#approve is fired.\n * @callback respoke.Call.onApprove\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n * called every time respoke.Call#allow is fired.\n * @callback respoke.Call.onAllow\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n * respoke.Call#requesting-media is fired.\n * @callback respoke.Call.onRequestingMedia\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n * called every time respoke.Call#stats is fired.\n * @callback respoke.MediaStatsParser.statsHandler\n * @param {respoke.Event} evt\n * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n * @param {respoke.Call} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n * Respoke will proceed without waiting for user input. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.previewLocalMedia\n * @param {object} element - the HTML5 Video element with the new stream attached.\n * @param {respoke.Call} call\n */\n/**\n * Receive the DirectConnection.\n * @callback respoke.Call.directConnectionSuccessHandler\n * @param {respoke.DirectConnection} directConnection\n */\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar log = require('loglevel');\nvar respoke = require('./respoke');\n\n/**\n * WebRTC Call including getUserMedia, path and codec negotation, and call state.\n * @class respoke.LocalMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {object} params.callSettings\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local video attached to it.\n * @returns {respoke.LocalMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.LocalMedia';\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name client\n     * @private\n     * @type {respoke.getClient}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name element\n     * @type {Video}\n     */\n    that.element = params.element;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name videoIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var videoIsMuted = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name audioIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var audioIsMuted = false;\n    /**\n     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.LocalMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name callSettings\n     * @private\n     * @type {object}\n     */\n    var callSettings = params.callSettings || {};\n    callSettings.constraints = params.constraints || callSettings.constraints;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = params.pc;\n    delete that.pc;\n    /**\n     * The local `MediaStream` from `getUserMedia()`.\n     * @memberof! respoke.LocalMedia\n     * @name stream\n     * @private\n     * @type {RTCMediaStream}\n     */\n    that.stream = null;\n\n    /**\n     * Save the local stream. Kick off SDP creation.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onReceiveUserMedia\n     * @private\n     * @param {RTCMediaStream} theStream\n     * @fires respoke.LocalMedia#stream-received\n     */\n    function onReceiveUserMedia(theStream) {\n        that.stream = theStream;\n        clearTimeout(allowTimer);\n        /**\n         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n         * without asking the user to approve it.\n         * @event respoke.LocalMedia#allow\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('allow');\n        log.debug('User gave permission to use media.');\n        log.debug('onReceiveUserMedia');\n\n        // This happens when we get an automatic hangup or reject from the other side.\n        if (pc === null) {\n            that.hangup({signal: false});\n            return;\n        }\n\n        that.element = params.element || that.element || document.createElement('video');\n\n        // This still needs some work. Using cached streams causes an unused video element to be passed\n        // back to the App. This is because we assume at the moment that only one local media video element\n        // will be needed. The first one passed back will contain media and the others will fake it. Media\n        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n        // and the implications of passing back a video element with no media attached.\n        if (respoke.streams[that.constraints]) {\n            respoke.streams[that.constraints].numPc += 1;\n            /**\n             * @event respoke.LocalMedia#stream-received\n             * @type {respoke.Event}\n             * @property {Element} element - the HTML5 Video element with the new stream attached.\n             * @property {RTCMediaStream} stream - the HTML5 Video stream\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('stream-received', {\n                element: that.element,\n                stream: that.stream\n            });\n        } else {\n            that.stream.numPc = 1;\n            respoke.streams[that.constraints] = that.stream;\n\n            that.stream.id = client.endpointId;\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            /**\n             * @event respoke.LocalMedia#stream-received\n             * @type {respoke.Event}\n             * @property {Element} element - the HTML5 Video element with the new stream attached.\n             * @property {RTCMediaStream} stream - the HTML5 Video stream\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('stream-received', {\n                element: that.element,\n                stream: that.stream\n            });\n        }\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.requestMedia\n     * @private\n     */\n    function requestMedia() {\n        log.debug('requestMedia');\n\n        that.constraints = callSettings.constraints;\n\n        if (!that.constraints) {\n            throw new Error('No constraints.');\n        }\n\n        if (respoke.streams[that.constraints]) {\n            log.debug('using old stream');\n            onReceiveUserMedia(respoke.streams[that.constraints]);\n            return;\n        }\n\n        try {\n            log.debug(\"Running getUserMedia with constraints\", that.constraints);\n            // TODO set respoke.streams[that.constraints] = true as a flag that we are already\n            // attempting to obtain this media so the race condition where gUM is called twice with\n            // the same constraints when calls are placed too quickly together doesn't occur.\n            allowTimer = setTimeout(function allowTimer() {\n                /**\n                 * The browser is asking for permission to access the User's media. This would be an ideal time\n                 * to modify the UI of the application so that the user notices the request for permissions\n                 * and approves it.\n                 * @event respoke.LocalMedia#requesting-media\n                 * @type {respoke.Event}\n                 * @property {string} name - the event name.\n                 * @property {respoke.LocalMedia} target\n                 */\n                that.fire('requesting-media');\n            }, 500);\n            getUserMedia(callSettings.constraints, onReceiveUserMedia, onUserMediaError);\n        } catch (e) {\n            log.error(\"Couldn't get user media: \" + e.message);\n        }\n    }\n\n    /**\n     * Handle any error that comes up during the process of getting user media.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onUserMediaError\n     * @private\n     * @param {object}\n     */\n    function onUserMediaError(p) {\n        log.debug('onUserMediaError');\n        if (p.code === 1) {\n            log.warn(\"Permission denied.\");\n            /**\n             * Indicate there has been an error obtaining media.\n             * @event respoke.LocalMedia#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('error', {error: 'Permission denied.'});\n        } else {\n            log.warn(p);\n            /**\n             * Indicate there has been an error obtaining media.\n             * @event respoke.LocalMedia#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('error', {error: p.code});\n        }\n    }\n\n    /**\n     * Mute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteVideo = function () {\n        if (videoIsMuted) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n        videoIsMuted = true;\n    };\n\n    /**\n     * Unmute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!videoIsMuted) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n        videoIsMuted = false;\n    };\n\n    /**\n     * Mute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteAudio = function () {\n        if (audioIsMuted) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n        audioIsMuted = true;\n    };\n\n    /**\n     * Unmute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!audioIsMuted) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n        audioIsMuted = false;\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.stop\n     * @fires respoke.LocalMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n            delete respoke.streams[that.constraints];\n        }\n        that.stream = null;\n        /**\n         * @event respoke.LocalMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Indicate whether we are sending video.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are sending audio.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n    };\n\n    /**\n     * Parse the constraints\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(constraints);\n    };\n\n    /**\n     * Start the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.start\n     * @fires respoke.LocalMedia#start\n     * @private\n     */\n    that.start = function () {\n        requestMedia();\n    };\n\n    return that;\n}; // End respoke.LocalMedia\n","/**\n * Copyright (c) 2014, D.C.S. LLC. All Rights Reserved. Licensed Software.\n * @private\n */\n\nvar log = require('loglevel');\nvar respoke = require('./respoke');\n\n/**\n * Class for managing the remote media stream.\n * @class respoke.RemoteMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {object} params.callSettings\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote video attached to it.\n * @returns {respoke.RemoteMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.RemoteMedia';\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name client\n     * @private\n     * @type {respoke.getClient}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name element\n     * @type {Video}\n     */\n    that.element = params.videoRemoteElement;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name videoIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var videoIsMuted = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name audioIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var audioIsMuted = false;\n    /**\n     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.RemoteMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name callSettings\n     * @private\n     * @type {object}\n     */\n    var callSettings = params.callSettings || callSettings || {};\n    callSettings.constraints = params.constraints || callSettings.constraints;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = params.pc;\n    delete that.pc;\n    /**\n     * The remote `MediaStream`.\n     * @memberof! respoke.RemoteMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = null;\n\n    /**\n     * Mute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteVideo = function () {\n        if (videoIsMuted) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n        videoIsMuted = true;\n    };\n\n    /**\n     * Unmute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!videoIsMuted) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n        videoIsMuted = false;\n    };\n\n    /**\n     * Mute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteAudio = function () {\n        if (audioIsMuted) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n        audioIsMuted = true;\n    };\n\n    /**\n     * Unmute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!audioIsMuted) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n        audioIsMuted = false;\n    };\n\n    /**\n     * Indicate whether we are receiving video.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are receiving audio.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n    };\n\n    /**\n     * Parse the constraints\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(constraints);\n    };\n\n    /**\n     * Save the media stream\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setStream\n     * @param {MediaStream} str\n     * @private\n     */\n    that.setStream = function (str) {\n        if (str) {\n            that.stream = str;\n            that.element = that.element || document.createElement('video');\n            attachMediaStream(that.element, that.stream);\n            that.element.autoplay = true;\n            setTimeout(that.element.play.bind(that.element));\n        }\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.stop\n     * @fires respoke.RemoteMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n            delete respoke.streams[that.constraints];\n        }\n        that.stream = null;\n        /**\n         * @event respoke.RemoteMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Mute local video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteVideo = function () {\n        if (videoIsMuted) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n        videoIsMuted = true;\n    };\n\n    /**\n     * Unmute local video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!videoIsMuted) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n        videoIsMuted = false;\n    };\n\n    /**\n     * Mute local audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteAudio = function () {\n        if (audioIsMuted) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n        audioIsMuted = true;\n    };\n\n    /**\n     * Unmute local audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!audioIsMuted) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n        audioIsMuted = false;\n    };\n\n    return that;\n}; // End respoke.RemoteMedia\n","/*\n *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\n/* More information about these options at jshint.com/docs/options */\n\n/* jshint browser: true, camelcase: true, curly: true, devel: true,\neqeqeq: true, forin: false, globalstrict: true, quotmark: single,\nundef: true, unused: strict */\n\n/* global mozRTCIceCandidate, mozRTCPeerConnection,\nmozRTCSessionDescription, webkitRTCPeerConnection */\n\n/* exported trace */\n\n'use strict';\n\nvar RTCPeerConnection = null;\nvar getUserMedia = null;\nvar attachMediaStream = null;\nvar reattachMediaStream = null;\nvar webrtcDetectedBrowser = null;\nvar webrtcDetectedVersion = null;\n\nfunction trace(text) {\n  // This function is used for logging.\n  if (text[text.length - 1] === '\\n') {\n    text = text.substring(0, text.length - 1);\n  }\n  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n}\n\nfunction maybeFixConfiguration(pcConfig) {\n  if (!pcConfig) {\n    return;\n  }\n  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n      delete pcConfig.iceServers[i].urls;\n    }\n  }\n}\n\nif (navigator.mozGetUserMedia) {\n  console.log('This appears to be Firefox');\n\n  webrtcDetectedBrowser = 'firefox';\n\n  webrtcDetectedVersion =\n    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is not supported in FF yet.\n    maybeFixConfiguration(pcConfig);\n    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // The RTCSessionDescription object.\n  window.RTCSessionDescription = mozRTCSessionDescription;\n\n  // The RTCIceCandidate object.\n  window.RTCIceCandidate = mozRTCIceCandidate;\n\n  // getUserMedia shim (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Creates ICE server from the URL for FF.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create ICE server with STUN URL.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      if (webrtcDetectedVersion < 27) {\n        // Create iceServer with turn url.\n        // Ignore the transport parameter from TURN url for FF version <=27.\n        var turnUrlParts = url.split('?');\n        // Return null for createIceServer if transport=tcp.\n        if (turnUrlParts.length === 1 ||\n          turnUrlParts[1].indexOf('transport=udp') === 0) {\n          iceServer = {\n            'url': turnUrlParts[0],\n            'credential': password,\n            'username': username\n          };\n        }\n      } else {\n        // FF 27 and above supports transport parameters in TURN url,\n        // So passing in the full url to create iceServer.\n        iceServer = {\n          'url': url,\n          'credential': password,\n          'username': username\n        };\n      }\n    }\n    return iceServer;\n  };\n\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    // Use .url for FireFox.\n    for (var i = 0; i < urls.length; i++) {\n      var iceServer =\n        window.createIceServer(urls[i], username, password);\n      if (iceServer !== null) {\n        iceServers.push(iceServer);\n      }\n    }\n    return iceServers;\n  };\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    console.log('Attaching media stream');\n    element.mozSrcObject = stream;\n  };\n\n  reattachMediaStream = function(to, from) {\n    console.log('Reattaching media stream');\n    to.mozSrcObject = from.mozSrcObject;\n  };\n\n} else if (navigator.webkitGetUserMedia) {\n  console.log('This appears to be Chrome');\n\n  webrtcDetectedBrowser = 'chrome';\n  // Temporary fix until crbug/374263 is fixed.\n  // Setting Chrome version to 999, if version is unavailable.\n  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  if (result !== null) {\n    webrtcDetectedVersion = parseInt(result[2], 10);\n  } else {\n    webrtcDetectedVersion = 999;\n  }\n\n  // Creates iceServer from the url for Chrome M33 and earlier.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create iceServer with stun url.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      // Chrome M28 & above uses below TURN format.\n      iceServer = {\n        'url': url,\n        'credential': password,\n        'username': username\n      };\n    }\n    return iceServer;\n  };\n\n  // Creates iceServers from the urls for Chrome M34 and above.\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    if (webrtcDetectedVersion >= 34) {\n      // .urls is supported since Chrome M34.\n      iceServers = {\n        'urls': urls,\n        'credential': password,\n        'username': username\n      };\n    } else {\n      for (var i = 0; i < urls.length; i++) {\n        var iceServer =\n          window.createIceServer(urls[i], username, password);\n        if (iceServer !== null) {\n          iceServers.push(iceServer);\n        }\n      }\n    }\n    return iceServers;\n  };\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is supported since Chrome M34.\n    if (webrtcDetectedVersion < 34) {\n      maybeFixConfiguration(pcConfig);\n    }\n    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    if (typeof element.srcObject !== 'undefined') {\n      element.srcObject = stream;\n    } else if (typeof element.mozSrcObject !== 'undefined') {\n      element.mozSrcObject = stream;\n    } else if (typeof element.src !== 'undefined') {\n      element.src = URL.createObjectURL(stream);\n    } else {\n      console.log('Error attaching stream to element.');\n    }\n  };\n\n  reattachMediaStream = function(to, from) {\n    to.src = from.src;\n  };\n} else {\n  console.log('Browser does not appear to be WebRTC-capable');\n}\n\n\nwindow.RTCPeerConnection = RTCPeerConnection;\nwindow.getUserMedia = getUserMedia;\nwindow.attachMediaStream = attachMediaStream;\nwindow.reattachMediaStream = reattachMediaStream;\nwindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\nwindow.webrtcDetectedVersion = webrtcDetectedVersion;\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    // Turn off strict mode for this function so we can assign to global.Q\n    /* jshint strict: false */\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else {\n        Q = definition();\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n\n    function flush() {\n        /* jshint loopfunc: true */\n\n        while (head.next) {\n            head = head.next;\n            var task = head.task;\n            head.task = void 0;\n            var domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n\n            try {\n                task();\n\n            } catch (e) {\n                if (isNodeJS) {\n                    // In node, uncaught exceptions are considered fatal errors.\n                    // Re-throw them synchronously to interrupt flushing!\n\n                    // Ensure continuation if the uncaught exception is suppressed\n                    // listening \"uncaughtException\" events (as domains does).\n                    // Continue in next event to avoid tick recursion.\n                    if (domain) {\n                        domain.exit();\n                    }\n                    setTimeout(flush, 0);\n                    if (domain) {\n                        domain.enter();\n                    }\n\n                    throw e;\n\n                } else {\n                    // In browsers, uncaught exceptions are not fatal.\n                    // Re-throw them asynchronously to avoid slow-downs.\n                    setTimeout(function() {\n                       throw e;\n                    }, 0);\n                }\n            }\n\n            if (domain) {\n                domain.exit();\n            }\n        }\n\n        flushing = false;\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process !== \"undefined\" && process.nextTick) {\n        // Node.js before 0.9. Note that some fake-Node environments, like the\n        // Mocha test runner, introduce a `process` global without a `nextTick`.\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (isPromise(value)) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become fulfilled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be fulfilled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function(resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function(answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return isObject(object) &&\n        typeof object.promiseDispatch === \"function\" &&\n        typeof object.inspect === \"function\";\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return result.value;\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return exception.value;\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var countDown = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++countDown;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--countDown === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (countDown === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {String} custom error message (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, message) {\n    return Q(object).timeout(ms, message);\n};\n\nPromise.prototype.timeout = function (ms, message) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        deferred.reject(new Error(message || \"Timed out after \" + ms + \" ms\"));\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n","/*\r\n * loglevel - https://github.com/pimterry/loglevel\r\n *\r\n * Copyright (c) 2013 Tim Perry\r\n * Licensed under the MIT license.\r\n */\r\n\r\n;(function (undefined) {\r\n    var undefinedType = \"undefined\";\r\n    \r\n    (function (name, definition) {\r\n        if (typeof module !== 'undefined') {\r\n            module.exports = definition();\r\n        } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n            define(definition);\r\n        } else {\r\n            this[name] = definition();\r\n        }\r\n    }('log', function () {\r\n        var self = {};\r\n        var noop = function() {};\r\n\r\n        function realMethod(methodName) {\r\n            if (typeof console === undefinedType) {\r\n                return noop;\r\n            } else if (console[methodName] === undefined) {\r\n                return boundToConsole(console, 'log') || noop;\r\n            } else {\r\n                return boundToConsole(console, methodName);\r\n            }\r\n        }\r\n\r\n        function boundToConsole(console, methodName) {\r\n            var method = console[methodName];\r\n            if (method.bind === undefined) {\r\n                if (Function.prototype.bind === undefined) {\r\n                    return function() {\r\n                        method.apply(console, arguments);\r\n                    };\r\n                } else {\r\n                    return Function.prototype.bind.call(console[methodName], console);\r\n                }\r\n            } else {\r\n                return console[methodName].bind(console);\r\n            }\r\n        }\r\n\r\n        var logMethods = [\r\n            \"trace\",\r\n            \"debug\",\r\n            \"info\",\r\n            \"warn\",\r\n            \"error\"\r\n        ];\r\n\r\n        function clearMethods() {\r\n            for (var ii = 0; ii < logMethods.length; ii++) {\r\n                self[logMethods[ii]] = noop;\r\n            }\r\n        }\r\n\r\n        function cookiesAvailable() {\r\n            return (typeof window !== undefinedType &&\r\n                    window.document !== undefined &&\r\n                    window.document.cookie !== undefined);\r\n        }\r\n\r\n        function setLevelInCookie(levelNum) {\r\n            if (!cookiesAvailable()) {\r\n                return;\r\n            }\r\n\r\n            var levelName;\r\n\r\n            for (var key in self.levels) {\r\n                if (self.levels.hasOwnProperty(key) && self.levels[key] === levelNum) {\r\n                    levelName = key;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (levelName !== undefined) {\r\n                window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n            }\r\n        }\r\n\r\n        var cookieRegex = /loglevel=([^;]+)/;\r\n\r\n        function loadLevelFromCookie() {\r\n            var cookieLevel;\r\n\r\n            if (cookiesAvailable()) {\r\n                var cookieMatch = cookieRegex.exec(window.document.cookie) || [];\r\n                cookieLevel = cookieMatch[1];\r\n            }\r\n\r\n            self.setLevel(self.levels[cookieLevel] || self.levels.WARN);\r\n        }\r\n\r\n        /*\r\n         *\r\n         * Public API\r\n         *\r\n         */\r\n\r\n        self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n            \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n        self.setLevel = function (level) {\r\n            if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n                setLevelInCookie(level);\r\n\r\n                if (level === self.levels.SILENT) {\r\n                    clearMethods();\r\n                    return;\r\n                } else if (typeof console === undefinedType) {\r\n                    clearMethods();\r\n                    throw \"No console available for logging\";\r\n                } else {\r\n                    for (var ii = 0; ii < logMethods.length; ii++) {\r\n                        var methodName = logMethods[ii];\r\n\r\n                        if (level <= self.levels[methodName.toUpperCase()]) {\r\n                            self[methodName] = realMethod(methodName);\r\n                        } else {\r\n                            self[methodName] = noop;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (typeof level === \"string\") {\r\n                self.setLevel(self.levels[level.toUpperCase()]);\r\n            } else {\r\n                throw \"log.setLevel() called with invalid level: \" + level;\r\n            }\r\n        };\r\n\r\n        self.enableAll = function() {\r\n            self.setLevel(self.levels.TRACE);\r\n        };\r\n\r\n        self.disableAll = function() {\r\n            self.setLevel(self.levels.SILENT);\r\n        };\r\n\r\n        try {\r\n            loadLevelFromCookie();\r\n        } catch (e) {\r\n            self.setLevel(self.levels.SILENT);\r\n        }\r\n        return self;\r\n    }));\r\n})();\r\n","/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\nvar io = ('undefined' === typeof module ? {} : module.exports);\n(function() {\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * IO namespace.\n   *\n   * @namespace\n   */\n\n  var io = exports;\n\n  /**\n   * Socket.IO version\n   *\n   * @api public\n   */\n\n  io.version = '0.9.17';\n\n  /**\n   * Protocol implemented.\n   *\n   * @api public\n   */\n\n  io.protocol = 1;\n\n  /**\n   * Available transports, these will be populated with the available transports\n   *\n   * @api public\n   */\n\n  io.transports = [];\n\n  /**\n   * Keep track of jsonp callbacks.\n   *\n   * @api private\n   */\n\n  io.j = [];\n\n  /**\n   * Keep track of our io.Sockets\n   *\n   * @api private\n   */\n  io.sockets = {};\n\n\n  /**\n   * Manages connections to hosts.\n   *\n   * @param {String} uri\n   * @Param {Boolean} force creation of new socket (defaults to false)\n   * @api public\n   */\n\n  io.connect = function (host, details) {\n    var uri = io.util.parseUri(host)\n      , uuri\n      , socket;\n\n    if (global && global.location) {\n      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n      uri.host = uri.host || (global.document\n        ? global.document.domain : global.location.hostname);\n      uri.port = uri.port || global.location.port;\n    }\n\n    uuri = io.util.uniqueUri(uri);\n\n    var options = {\n        host: uri.host\n      , secure: 'https' == uri.protocol\n      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n      , query: uri.query || ''\n    };\n\n    io.util.merge(options, details);\n\n    if (options['force new connection'] || !io.sockets[uuri]) {\n      socket = new io.Socket(options);\n    }\n\n    if (!options['force new connection'] && socket) {\n      io.sockets[uuri] = socket;\n    }\n\n    socket = socket || io.sockets[uuri];\n\n    // if path is different from '' or /\n    return socket.of(uri.path.length > 1 ? uri.path : '');\n  };\n\n})('object' === typeof module ? module.exports : (this.io = {}), this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * Utilities namespace.\n   *\n   * @namespace\n   */\n\n  var util = exports.util = {};\n\n  /**\n   * Parses an URI\n   *\n   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n   * @api public\n   */\n\n  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\n  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n               'anchor'];\n\n  util.parseUri = function (str) {\n    var m = re.exec(str || '')\n      , uri = {}\n      , i = 14;\n\n    while (i--) {\n      uri[parts[i]] = m[i] || '';\n    }\n\n    return uri;\n  };\n\n  /**\n   * Produces a unique url that identifies a Socket.IO connection.\n   *\n   * @param {Object} uri\n   * @api public\n   */\n\n  util.uniqueUri = function (uri) {\n    var protocol = uri.protocol\n      , host = uri.host\n      , port = uri.port;\n\n    if ('document' in global) {\n      host = host || document.domain;\n      port = port || (protocol == 'https'\n        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n    } else {\n      host = host || 'localhost';\n\n      if (!port && protocol == 'https') {\n        port = 443;\n      }\n    }\n\n    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n  };\n\n  /**\n   * Mergest 2 query strings in to once unique query string\n   *\n   * @param {String} base\n   * @param {String} addition\n   * @api public\n   */\n\n  util.query = function (base, addition) {\n    var query = util.chunkQuery(base || '')\n      , components = [];\n\n    util.merge(query, util.chunkQuery(addition || ''));\n    for (var part in query) {\n      if (query.hasOwnProperty(part)) {\n        components.push(part + '=' + query[part]);\n      }\n    }\n\n    return components.length ? '?' + components.join('&') : '';\n  };\n\n  /**\n   * Transforms a querystring in to an object\n   *\n   * @param {String} qs\n   * @api public\n   */\n\n  util.chunkQuery = function (qs) {\n    var query = {}\n      , params = qs.split('&')\n      , i = 0\n      , l = params.length\n      , kv;\n\n    for (; i < l; ++i) {\n      kv = params[i].split('=');\n      if (kv[0]) {\n        query[kv[0]] = kv[1];\n      }\n    }\n\n    return query;\n  };\n\n  /**\n   * Executes the given function when the page is loaded.\n   *\n   *     io.util.load(function () { console.log('page loaded'); });\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  var pageLoaded = false;\n\n  util.load = function (fn) {\n    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n      return fn();\n    }\n\n    util.on(global, 'load', fn, false);\n  };\n\n  /**\n   * Adds an event.\n   *\n   * @api private\n   */\n\n  util.on = function (element, event, fn, capture) {\n    if (element.attachEvent) {\n      element.attachEvent('on' + event, fn);\n    } else if (element.addEventListener) {\n      element.addEventListener(event, fn, capture);\n    }\n  };\n\n  /**\n   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n   *\n   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n   * @api private\n   */\n\n  util.request = function (xdomain) {\n\n    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n      return new XDomainRequest();\n    }\n\n    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n      return new XMLHttpRequest();\n    }\n\n    if (!xdomain) {\n      try {\n        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n      } catch(e) { }\n    }\n\n    return null;\n  };\n\n  /**\n   * XHR based transport constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  /**\n   * Change the internal pageLoaded value.\n   */\n\n  if ('undefined' != typeof window) {\n    util.load(function () {\n      pageLoaded = true;\n    });\n  }\n\n  /**\n   * Defers a function to ensure a spinner is not displayed by the browser\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  util.defer = function (fn) {\n    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n      return fn();\n    }\n\n    util.load(function () {\n      setTimeout(fn, 100);\n    });\n  };\n\n  /**\n   * Merges two objects.\n   *\n   * @api public\n   */\n\n  util.merge = function merge (target, additional, deep, lastseen) {\n    var seen = lastseen || []\n      , depth = typeof deep == 'undefined' ? 2 : deep\n      , prop;\n\n    for (prop in additional) {\n      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n        if (typeof target[prop] !== 'object' || !depth) {\n          target[prop] = additional[prop];\n          seen.push(additional[prop]);\n        } else {\n          util.merge(target[prop], additional[prop], depth - 1, seen);\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\n   * Merges prototypes from objects\n   *\n   * @api public\n   */\n\n  util.mixin = function (ctor, ctor2) {\n    util.merge(ctor.prototype, ctor2.prototype);\n  };\n\n  /**\n   * Shortcut for prototypical and static inheritance.\n   *\n   * @api private\n   */\n\n  util.inherit = function (ctor, ctor2) {\n    function f() {};\n    f.prototype = ctor2.prototype;\n    ctor.prototype = new f;\n  };\n\n  /**\n   * Checks if the given object is an Array.\n   *\n   *     io.util.isArray([]); // true\n   *     io.util.isArray({}); // false\n   *\n   * @param Object obj\n   * @api public\n   */\n\n  util.isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  /**\n   * Intersects values of two arrays into a third\n   *\n   * @api public\n   */\n\n  util.intersect = function (arr, arr2) {\n    var ret = []\n      , longest = arr.length > arr2.length ? arr : arr2\n      , shortest = arr.length > arr2.length ? arr2 : arr;\n\n    for (var i = 0, l = shortest.length; i < l; i++) {\n      if (~util.indexOf(longest, shortest[i]))\n        ret.push(shortest[i]);\n    }\n\n    return ret;\n  };\n\n  /**\n   * Array indexOf compatibility.\n   *\n   * @see bit.ly/a5Dxa2\n   * @api public\n   */\n\n  util.indexOf = function (arr, o, i) {\n\n    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n         i < j && arr[i] !== o; i++) {}\n\n    return j <= i ? -1 : i;\n  };\n\n  /**\n   * Converts enumerables to array.\n   *\n   * @api public\n   */\n\n  util.toArray = function (enu) {\n    var arr = [];\n\n    for (var i = 0, l = enu.length; i < l; i++)\n      arr.push(enu[i]);\n\n    return arr;\n  };\n\n  /**\n   * UA / engines detection namespace.\n   *\n   * @namespace\n   */\n\n  util.ua = {};\n\n  /**\n   * Whether the UA supports CORS for XHR.\n   *\n   * @api public\n   */\n\n  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n    try {\n      var a = new XMLHttpRequest();\n    } catch (e) {\n      return false;\n    }\n\n    return a.withCredentials != undefined;\n  })();\n\n  /**\n   * Detect webkit.\n   *\n   * @api public\n   */\n\n  util.ua.webkit = 'undefined' != typeof navigator\n    && /webkit/i.test(navigator.userAgent);\n\n   /**\n   * Detect iPad/iPhone/iPod.\n   *\n   * @api public\n   */\n\n  util.ua.iDevice = 'undefined' != typeof navigator\n      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\n})('undefined' != typeof io ? io : module.exports, this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.EventEmitter = EventEmitter;\n\n  /**\n   * Event emitter constructor.\n   *\n   * @api public.\n   */\n\n  function EventEmitter () {};\n\n  /**\n   * Adds a listener\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.on = function (name, fn) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = fn;\n    } else if (io.util.isArray(this.$events[name])) {\n      this.$events[name].push(fn);\n    } else {\n      this.$events[name] = [this.$events[name], fn];\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  /**\n   * Adds a volatile listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.once = function (name, fn) {\n    var self = this;\n\n    function on () {\n      self.removeListener(name, on);\n      fn.apply(this, arguments);\n    };\n\n    on.listener = fn;\n    this.on(name, on);\n\n    return this;\n  };\n\n  /**\n   * Removes a listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeListener = function (name, fn) {\n    if (this.$events && this.$events[name]) {\n      var list = this.$events[name];\n\n      if (io.util.isArray(list)) {\n        var pos = -1;\n\n        for (var i = 0, l = list.length; i < l; i++) {\n          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n            pos = i;\n            break;\n          }\n        }\n\n        if (pos < 0) {\n          return this;\n        }\n\n        list.splice(pos, 1);\n\n        if (!list.length) {\n          delete this.$events[name];\n        }\n      } else if (list === fn || (list.listener && list.listener === fn)) {\n        delete this.$events[name];\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Removes all listeners for an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeAllListeners = function (name) {\n    if (name === undefined) {\n      this.$events = {};\n      return this;\n    }\n\n    if (this.$events && this.$events[name]) {\n      this.$events[name] = null;\n    }\n\n    return this;\n  };\n\n  /**\n   * Gets all listeners for a certain event.\n   *\n   * @api publci\n   */\n\n  EventEmitter.prototype.listeners = function (name) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = [];\n    }\n\n    if (!io.util.isArray(this.$events[name])) {\n      this.$events[name] = [this.$events[name]];\n    }\n\n    return this.$events[name];\n  };\n\n  /**\n   * Emits an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.emit = function (name) {\n    if (!this.$events) {\n      return false;\n    }\n\n    var handler = this.$events[name];\n\n    if (!handler) {\n      return false;\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if ('function' == typeof handler) {\n      handler.apply(this, args);\n    } else if (io.util.isArray(handler)) {\n      var listeners = handler.slice();\n\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i].apply(this, args);\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Based on JSON2 (http://www.JSON.org/js.html).\n */\n\n(function (exports, nativeJSON) {\n  \"use strict\";\n\n  // use native JSON if it's available\n  if (nativeJSON && nativeJSON.parse){\n    return exports.JSON = {\n      parse: nativeJSON.parse\n    , stringify: nativeJSON.stringify\n    };\n  }\n\n  var JSON = exports.JSON = {};\n\n  function f(n) {\n      // Format integers to have at least two digits.\n      return n < 10 ? '0' + n : n;\n  }\n\n  function date(d, key) {\n    return isFinite(d.valueOf()) ?\n        d.getUTCFullYear()     + '-' +\n        f(d.getUTCMonth() + 1) + '-' +\n        f(d.getUTCDate())      + 'T' +\n        f(d.getUTCHours())     + ':' +\n        f(d.getUTCMinutes())   + ':' +\n        f(d.getUTCSeconds())   + 'Z' : null;\n  };\n\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      gap,\n      indent,\n      meta = {    // table of character substitutions\n          '\\b': '\\\\b',\n          '\\t': '\\\\t',\n          '\\n': '\\\\n',\n          '\\f': '\\\\f',\n          '\\r': '\\\\r',\n          '\"' : '\\\\\"',\n          '\\\\': '\\\\\\\\'\n      },\n      rep;\n\n\n  function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n      escapable.lastIndex = 0;\n      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n          var c = meta[a];\n          return typeof c === 'string' ? c :\n              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n      }) + '\"' : '\"' + string + '\"';\n  }\n\n\n  function str(key, holder) {\n\n// Produce a string from holder[key].\n\n      var i,          // The loop counter.\n          k,          // The member key.\n          v,          // The member value.\n          length,\n          mind = gap,\n          partial,\n          value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n      if (value instanceof Date) {\n          value = date(key);\n      }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n      if (typeof rep === 'function') {\n          value = rep.call(holder, key, value);\n      }\n\n// What happens next depends on the value's type.\n\n      switch (typeof value) {\n      case 'string':\n          return quote(value);\n\n      case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n          return isFinite(value) ? String(value) : 'null';\n\n      case 'boolean':\n      case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n          return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n      case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n          if (!value) {\n              return 'null';\n          }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n          gap += indent;\n          partial = [];\n\n// Is the value an array?\n\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n              length = value.length;\n              for (i = 0; i < length; i += 1) {\n                  partial[i] = str(i, value) || 'null';\n              }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n              v = partial.length === 0 ? '[]' : gap ?\n                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                  '[' + partial.join(',') + ']';\n              gap = mind;\n              return v;\n          }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n          if (rep && typeof rep === 'object') {\n              length = rep.length;\n              for (i = 0; i < length; i += 1) {\n                  if (typeof rep[i] === 'string') {\n                      k = rep[i];\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n          v = partial.length === 0 ? '{}' : gap ?\n              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n              '{' + partial.join(',') + '}';\n          gap = mind;\n          return v;\n      }\n  }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n  JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n      var i;\n      gap = '';\n      indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n      if (typeof space === 'number') {\n          for (i = 0; i < space; i += 1) {\n              indent += ' ';\n          }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n      } else if (typeof space === 'string') {\n          indent = space;\n      }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n      rep = replacer;\n      if (replacer && typeof replacer !== 'function' &&\n              (typeof replacer !== 'object' ||\n              typeof replacer.length !== 'number')) {\n          throw new Error('JSON.stringify');\n      }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n      return str('', {'': value});\n  };\n\n// If the JSON object does not yet have a parse method, give it one.\n\n  JSON.parse = function (text, reviver) {\n  // The parse method takes a text and an optional reviver function, and returns\n  // a JavaScript value if the text is a valid JSON text.\n\n      var j;\n\n      function walk(holder, key) {\n\n  // The walk method is used to recursively walk the resulting structure so\n  // that modifications can be made.\n\n          var k, v, value = holder[key];\n          if (value && typeof value === 'object') {\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = walk(value, k);\n                      if (v !== undefined) {\n                          value[k] = v;\n                      } else {\n                          delete value[k];\n                      }\n                  }\n              }\n          }\n          return reviver.call(holder, key, value);\n      }\n\n\n  // Parsing happens in four stages. In the first stage, we replace certain\n  // Unicode characters with escape sequences. JavaScript handles many characters\n  // incorrectly, either silently deleting them, or treating them as line endings.\n\n      text = String(text);\n      cx.lastIndex = 0;\n      if (cx.test(text)) {\n          text = text.replace(cx, function (a) {\n              return '\\\\u' +\n                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n          });\n      }\n\n  // In the second stage, we run the text against regular expressions that look\n  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n  // because they can cause invocation, and '=' because it can cause mutation.\n  // But just to be safe, we want to reject all unexpected forms.\n\n  // We split the second stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n      if (/^[\\],:{}\\s]*$/\n              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n  // In the third stage we use the eval function to compile the text into a\n  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n  // in JavaScript: it can begin a block or an object literal. We wrap the text\n  // in parens to eliminate the ambiguity.\n\n          j = eval('(' + text + ')');\n\n  // In the optional fourth stage, we recursively walk the new structure, passing\n  // each name/value pair to a reviver function for possible transformation.\n\n          return typeof reviver === 'function' ?\n              walk({'': j}, '') : j;\n      }\n\n  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n      throw new SyntaxError('JSON.parse');\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , typeof JSON !== 'undefined' ? JSON : undefined\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Parser namespace.\n   *\n   * @namespace\n   */\n\n  var parser = exports.parser = {};\n\n  /**\n   * Packet types.\n   */\n\n  var packets = parser.packets = [\n      'disconnect'\n    , 'connect'\n    , 'heartbeat'\n    , 'message'\n    , 'json'\n    , 'event'\n    , 'ack'\n    , 'error'\n    , 'noop'\n  ];\n\n  /**\n   * Errors reasons.\n   */\n\n  var reasons = parser.reasons = [\n      'transport not supported'\n    , 'client not handshaken'\n    , 'unauthorized'\n  ];\n\n  /**\n   * Errors advice.\n   */\n\n  var advice = parser.advice = [\n      'reconnect'\n  ];\n\n  /**\n   * Shortcuts.\n   */\n\n  var JSON = io.JSON\n    , indexOf = io.util.indexOf;\n\n  /**\n   * Encodes a packet.\n   *\n   * @api private\n   */\n\n  parser.encodePacket = function (packet) {\n    var type = indexOf(packets, packet.type)\n      , id = packet.id || ''\n      , endpoint = packet.endpoint || ''\n      , ack = packet.ack\n      , data = null;\n\n    switch (packet.type) {\n      case 'error':\n        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\n        if (reason !== '' || adv !== '')\n          data = reason + (adv !== '' ? ('+' + adv) : '');\n\n        break;\n\n      case 'message':\n        if (packet.data !== '')\n          data = packet.data;\n        break;\n\n      case 'event':\n        var ev = { name: packet.name };\n\n        if (packet.args && packet.args.length) {\n          ev.args = packet.args;\n        }\n\n        data = JSON.stringify(ev);\n        break;\n\n      case 'json':\n        data = JSON.stringify(packet.data);\n        break;\n\n      case 'connect':\n        if (packet.qs)\n          data = packet.qs;\n        break;\n\n      case 'ack':\n        data = packet.ackId\n          + (packet.args && packet.args.length\n              ? '+' + JSON.stringify(packet.args) : '');\n        break;\n    }\n\n    // construct packet with required fragments\n    var encoded = [\n        type\n      , id + (ack == 'data' ? '+' : '')\n      , endpoint\n    ];\n\n    // data fragment is optional\n    if (data !== null && data !== undefined)\n      encoded.push(data);\n\n    return encoded.join(':');\n  };\n\n  /**\n   * Encodes multiple messages (payload).\n   *\n   * @param {Array} messages\n   * @api private\n   */\n\n  parser.encodePayload = function (packets) {\n    var decoded = '';\n\n    if (packets.length == 1)\n      return packets[0];\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      var packet = packets[i];\n      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n    }\n\n    return decoded;\n  };\n\n  /**\n   * Decodes a packet\n   *\n   * @api private\n   */\n\n  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n  parser.decodePacket = function (data) {\n    var pieces = data.match(regexp);\n\n    if (!pieces) return {};\n\n    var id = pieces[2] || ''\n      , data = pieces[5] || ''\n      , packet = {\n            type: packets[pieces[1]]\n          , endpoint: pieces[4] || ''\n        };\n\n    // whether we need to acknowledge the packet\n    if (id) {\n      packet.id = id;\n      if (pieces[3])\n        packet.ack = 'data';\n      else\n        packet.ack = true;\n    }\n\n    // handle different packet types\n    switch (packet.type) {\n      case 'error':\n        var pieces = data.split('+');\n        packet.reason = reasons[pieces[0]] || '';\n        packet.advice = advice[pieces[1]] || '';\n        break;\n\n      case 'message':\n        packet.data = data || '';\n        break;\n\n      case 'event':\n        try {\n          var opts = JSON.parse(data);\n          packet.name = opts.name;\n          packet.args = opts.args;\n        } catch (e) { }\n\n        packet.args = packet.args || [];\n        break;\n\n      case 'json':\n        try {\n          packet.data = JSON.parse(data);\n        } catch (e) { }\n        break;\n\n      case 'connect':\n        packet.qs = data || '';\n        break;\n\n      case 'ack':\n        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n        if (pieces) {\n          packet.ackId = pieces[1];\n          packet.args = [];\n\n          if (pieces[3]) {\n            try {\n              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n            } catch (e) { }\n          }\n        }\n        break;\n\n      case 'disconnect':\n      case 'heartbeat':\n        break;\n    };\n\n    return packet;\n  };\n\n  /**\n   * Decodes data payload. Detects multiple messages\n   *\n   * @return {Array} messages\n   * @api public\n   */\n\n  parser.decodePayload = function (data) {\n    // IE doesn't like data[i] for unicode chars, charAt works fine\n    if (data.charAt(0) == '\\ufffd') {\n      var ret = [];\n\n      for (var i = 1, length = ''; i < data.length; i++) {\n        if (data.charAt(i) == '\\ufffd') {\n          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n          i += Number(length) + 1;\n          length = '';\n        } else {\n          length += data.charAt(i);\n        }\n      }\n\n      return ret;\n    } else {\n      return [parser.decodePacket(data)];\n    }\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Transport = Transport;\n\n  /**\n   * This is the transport template for all supported transport methods.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function Transport (socket, sessid) {\n    this.socket = socket;\n    this.sessid = sessid;\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Transport, io.EventEmitter);\n\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  Transport.prototype.heartbeats = function () {\n    return true;\n  };\n\n  /**\n   * Handles the response from the server. When a new response is received\n   * it will automatically update the timeout, decode the message and\n   * forwards the response to the onMessage function for further processing.\n   *\n   * @param {String} data Response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onData = function (data) {\n    this.clearCloseTimeout();\n\n    // If the connection in currently open (or in a reopening state) reset the close\n    // timeout since we have just received data. This check is necessary so\n    // that we don't reset the timeout on an explicitly disconnected connection.\n    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n      this.setCloseTimeout();\n    }\n\n    if (data !== '') {\n      // todo: we should only do decodePayload for xhr transports\n      var msgs = io.parser.decodePayload(data);\n\n      if (msgs && msgs.length) {\n        for (var i = 0, l = msgs.length; i < l; i++) {\n          this.onPacket(msgs[i]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles packets.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onPacket = function (packet) {\n    this.socket.setHeartbeatTimeout();\n\n    if (packet.type == 'heartbeat') {\n      return this.onHeartbeat();\n    }\n\n    if (packet.type == 'connect' && packet.endpoint == '') {\n      this.onConnect();\n    }\n\n    if (packet.type == 'error' && packet.advice == 'reconnect') {\n      this.isOpen = false;\n    }\n\n    this.socket.onPacket(packet);\n\n    return this;\n  };\n\n  /**\n   * Sets close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.setCloseTimeout = function () {\n    if (!this.closeTimeout) {\n      var self = this;\n\n      this.closeTimeout = setTimeout(function () {\n        self.onDisconnect();\n      }, this.socket.closeTimeout);\n    }\n  };\n\n  /**\n   * Called when transport disconnects.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onDisconnect = function () {\n    if (this.isOpen) this.close();\n    this.clearTimeouts();\n    this.socket.onDisconnect();\n    return this;\n  };\n\n  /**\n   * Called when transport connects\n   *\n   * @api private\n   */\n\n  Transport.prototype.onConnect = function () {\n    this.socket.onConnect();\n    return this;\n  };\n\n  /**\n   * Clears close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearCloseTimeout = function () {\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n      this.closeTimeout = null;\n    }\n  };\n\n  /**\n   * Clear timeouts\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearTimeouts = function () {\n    this.clearCloseTimeout();\n\n    if (this.reopenTimeout) {\n      clearTimeout(this.reopenTimeout);\n    }\n  };\n\n  /**\n   * Sends a packet\n   *\n   * @param {Object} packet object.\n   * @api private\n   */\n\n  Transport.prototype.packet = function (packet) {\n    this.send(io.parser.encodePacket(packet));\n  };\n\n  /**\n   * Send the received heartbeat message back to server. So the server\n   * knows we are still connected.\n   *\n   * @param {String} heartbeat Heartbeat response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onHeartbeat = function (heartbeat) {\n    this.packet({ type: 'heartbeat' });\n  };\n\n  /**\n   * Called when the transport opens.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onOpen = function () {\n    this.isOpen = true;\n    this.clearCloseTimeout();\n    this.socket.onOpen();\n  };\n\n  /**\n   * Notifies the base when the connection with the Socket.IO server\n   * has been disconnected.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onClose = function () {\n    var self = this;\n\n    /* FIXME: reopen delay causing a infinit loop\n    this.reopenTimeout = setTimeout(function () {\n      self.open();\n    }, this.socket.options['reopen delay']);*/\n\n    this.isOpen = false;\n    this.socket.onClose();\n    this.onDisconnect();\n  };\n\n  /**\n   * Generates a connection url based on the Socket.IO URL Protocol.\n   * See <https://github.com/learnboost/socket.io-node/> for more details.\n   *\n   * @returns {String} Connection url\n   * @api private\n   */\n\n  Transport.prototype.prepareUrl = function () {\n    var options = this.socket.options;\n\n    return this.scheme() + '://'\n      + options.host + ':' + options.port + '/'\n      + options.resource + '/' + io.protocol\n      + '/' + this.name + '/' + this.sessid;\n  };\n\n  /**\n   * Checks if the transport is ready to start a connection.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Transport.prototype.ready = function (socket, fn) {\n    fn.call(this);\n  };\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Socket = Socket;\n\n  /**\n   * Create a new `Socket.IO client` which can establish a persistent\n   * connection with a Socket.IO enabled server.\n   *\n   * @api public\n   */\n\n  function Socket (options) {\n    this.options = {\n        port: 80\n      , secure: false\n      , document: 'document' in global ? document : false\n      , resource: 'socket.io'\n      , transports: io.transports\n      , 'connect timeout': 10000\n      , 'try multiple transports': true\n      , 'reconnect': true\n      , 'reconnection delay': 500\n      , 'reconnection limit': Infinity\n      , 'reopen delay': 3000\n      , 'max reconnection attempts': 10\n      , 'sync disconnect on unload': false\n      , 'auto connect': true\n      , 'flash policy port': 10843\n      , 'manualFlush': false\n    };\n\n    io.util.merge(this.options, options);\n\n    this.connected = false;\n    this.open = false;\n    this.connecting = false;\n    this.reconnecting = false;\n    this.namespaces = {};\n    this.buffer = [];\n    this.doBuffer = false;\n\n    if (this.options['sync disconnect on unload'] &&\n        (!this.isXDomain() || io.util.ua.hasCORS)) {\n      var self = this;\n      io.util.on(global, 'beforeunload', function () {\n        self.disconnectSync();\n      }, false);\n    }\n\n    if (this.options['auto connect']) {\n      this.connect();\n    }\n};\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Socket, io.EventEmitter);\n\n  /**\n   * Returns a namespace listener/emitter for this socket\n   *\n   * @api public\n   */\n\n  Socket.prototype.of = function (name) {\n    if (!this.namespaces[name]) {\n      this.namespaces[name] = new io.SocketNamespace(this, name);\n\n      if (name !== '') {\n        this.namespaces[name].packet({ type: 'connect' });\n      }\n    }\n\n    return this.namespaces[name];\n  };\n\n  /**\n   * Emits the given event to the Socket and all namespaces\n   *\n   * @api private\n   */\n\n  Socket.prototype.publish = function () {\n    this.emit.apply(this, arguments);\n\n    var nsp;\n\n    for (var i in this.namespaces) {\n      if (this.namespaces.hasOwnProperty(i)) {\n        nsp = this.of(i);\n        nsp.$emit.apply(nsp, arguments);\n      }\n    }\n  };\n\n  /**\n   * Performs the handshake\n   *\n   * @api private\n   */\n\n  function empty () { };\n\n  Socket.prototype.handshake = function (fn) {\n    var self = this\n      , options = this.options;\n\n    function complete (data) {\n      if (data instanceof Error) {\n        self.connecting = false;\n        self.onError(data.message);\n      } else {\n        fn.apply(null, data.split(':'));\n      }\n    };\n\n    var url = [\n          'http' + (options.secure ? 's' : '') + ':/'\n        , options.host + ':' + options.port\n        , options.resource\n        , io.protocol\n        , io.util.query(this.options.query, 't=' + +new Date)\n      ].join('/');\n\n    if (this.isXDomain() && !io.util.ua.hasCORS) {\n      var insertAt = document.getElementsByTagName('script')[0]\n        , script = document.createElement('script');\n\n      script.src = url + '&jsonp=' + io.j.length;\n      insertAt.parentNode.insertBefore(script, insertAt);\n\n      io.j.push(function (data) {\n        complete(data);\n        script.parentNode.removeChild(script);\n      });\n    } else {\n      var xhr = io.util.request();\n\n      xhr.open('GET', url, true);\n      if (this.isXDomain()) {\n        xhr.withCredentials = true;\n      }\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          xhr.onreadystatechange = empty;\n\n          if (xhr.status == 200) {\n            complete(xhr.responseText);\n          } else if (xhr.status == 403) {\n            self.onError(xhr.responseText);\n          } else {\n            self.connecting = false;            \n            !self.reconnecting && self.onError(xhr.responseText);\n          }\n        }\n      };\n      xhr.send(null);\n    }\n  };\n\n  /**\n   * Find an available transport based on the options supplied in the constructor.\n   *\n   * @api private\n   */\n\n  Socket.prototype.getTransport = function (override) {\n    var transports = override || this.transports, match;\n\n    for (var i = 0, transport; transport = transports[i]; i++) {\n      if (io.Transport[transport]\n        && io.Transport[transport].check(this)\n        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n        return new io.Transport[transport](this, this.sessionid);\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Connects to the server.\n   *\n   * @param {Function} [fn] Callback.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.connect = function (fn) {\n    if (this.connecting) {\n      return this;\n    }\n\n    var self = this;\n    self.connecting = true;\n    \n    this.handshake(function (sid, heartbeat, close, transports) {\n      self.sessionid = sid;\n      self.closeTimeout = close * 1000;\n      self.heartbeatTimeout = heartbeat * 1000;\n      if(!self.transports)\n          self.transports = self.origTransports = (transports ? io.util.intersect(\n              transports.split(',')\n            , self.options.transports\n          ) : self.options.transports);\n\n      self.setHeartbeatTimeout();\n\n      function connect (transports){\n        if (self.transport) self.transport.clearTimeouts();\n\n        self.transport = self.getTransport(transports);\n        if (!self.transport) return self.publish('connect_failed');\n\n        // once the transport is ready\n        self.transport.ready(self, function () {\n          self.connecting = true;\n          self.publish('connecting', self.transport.name);\n          self.transport.open();\n\n          if (self.options['connect timeout']) {\n            self.connectTimeoutTimer = setTimeout(function () {\n              if (!self.connected) {\n                self.connecting = false;\n\n                if (self.options['try multiple transports']) {\n                  var remaining = self.transports;\n\n                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n                         self.transport.name) {}\n\n                    if (remaining.length){\n                      connect(remaining);\n                    } else {\n                      self.publish('connect_failed');\n                    }\n                }\n              }\n            }, self.options['connect timeout']);\n          }\n        });\n      }\n\n      connect(self.transports);\n\n      self.once('connect', function (){\n        clearTimeout(self.connectTimeoutTimer);\n\n        fn && typeof fn == 'function' && fn();\n      });\n    });\n\n    return this;\n  };\n\n  /**\n   * Clears and sets a new heartbeat timeout using the value given by the\n   * server during the handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.setHeartbeatTimeout = function () {\n    clearTimeout(this.heartbeatTimeoutTimer);\n    if(this.transport && !this.transport.heartbeats()) return;\n\n    var self = this;\n    this.heartbeatTimeoutTimer = setTimeout(function () {\n      self.transport.onClose();\n    }, this.heartbeatTimeout);\n  };\n\n  /**\n   * Sends a message.\n   *\n   * @param {Object} data packet.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.packet = function (data) {\n    if (this.connected && !this.doBuffer) {\n      this.transport.packet(data);\n    } else {\n      this.buffer.push(data);\n    }\n\n    return this;\n  };\n\n  /**\n   * Sets buffer state\n   *\n   * @api private\n   */\n\n  Socket.prototype.setBuffer = function (v) {\n    this.doBuffer = v;\n\n    if (!v && this.connected && this.buffer.length) {\n      if (!this.options['manualFlush']) {\n        this.flushBuffer();\n      }\n    }\n  };\n\n  /**\n   * Flushes the buffer data over the wire.\n   * To be invoked manually when 'manualFlush' is set to true.\n   *\n   * @api public\n   */\n\n  Socket.prototype.flushBuffer = function() {\n    this.transport.payload(this.buffer);\n    this.buffer = [];\n  };\n  \n\n  /**\n   * Disconnect the established connect.\n   *\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.disconnect = function () {\n    if (this.connected || this.connecting) {\n      if (this.open) {\n        this.of('').packet({ type: 'disconnect' });\n      }\n\n      // handle disconnection immediately\n      this.onDisconnect('booted');\n    }\n\n    return this;\n  };\n\n  /**\n   * Disconnects the socket with a sync XHR.\n   *\n   * @api private\n   */\n\n  Socket.prototype.disconnectSync = function () {\n    // ensure disconnection\n    var xhr = io.util.request();\n    var uri = [\n        'http' + (this.options.secure ? 's' : '') + ':/'\n      , this.options.host + ':' + this.options.port\n      , this.options.resource\n      , io.protocol\n      , ''\n      , this.sessionid\n    ].join('/') + '/?disconnect=1';\n\n    xhr.open('GET', uri, false);\n    xhr.send(null);\n\n    // handle disconnection immediately\n    this.onDisconnect('booted');\n  };\n\n  /**\n   * Check if we need to use cross domain enabled transports. Cross domain would\n   * be a different port or different domain name.\n   *\n   * @returns {Boolean}\n   * @api private\n   */\n\n  Socket.prototype.isXDomain = function () {\n\n    var port = global.location.port ||\n      ('https:' == global.location.protocol ? 443 : 80);\n\n    return this.options.host !== global.location.hostname \n      || this.options.port != port;\n  };\n\n  /**\n   * Called upon handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onConnect = function () {\n    if (!this.connected) {\n      this.connected = true;\n      this.connecting = false;\n      if (!this.doBuffer) {\n        // make sure to flush the buffer\n        this.setBuffer(false);\n      }\n      this.emit('connect');\n    }\n  };\n\n  /**\n   * Called when the transport opens\n   *\n   * @api private\n   */\n\n  Socket.prototype.onOpen = function () {\n    this.open = true;\n  };\n\n  /**\n   * Called when the transport closes.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onClose = function () {\n    this.open = false;\n    clearTimeout(this.heartbeatTimeoutTimer);\n  };\n\n  /**\n   * Called when the transport first opens a connection\n   *\n   * @param text\n   */\n\n  Socket.prototype.onPacket = function (packet) {\n    this.of(packet.endpoint).onPacket(packet);\n  };\n\n  /**\n   * Handles an error.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onError = function (err) {\n    if (err && err.advice) {\n      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n        this.disconnect();\n        if (this.options.reconnect) {\n          this.reconnect();\n        }\n      }\n    }\n\n    this.publish('error', err && err.reason ? err.reason : err);\n  };\n\n  /**\n   * Called when the transport disconnects.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onDisconnect = function (reason) {\n    var wasConnected = this.connected\n      , wasConnecting = this.connecting;\n\n    this.connected = false;\n    this.connecting = false;\n    this.open = false;\n\n    if (wasConnected || wasConnecting) {\n      this.transport.close();\n      this.transport.clearTimeouts();\n      if (wasConnected) {\n        this.publish('disconnect', reason);\n\n        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n          this.reconnect();\n        }\n      }\n    }\n  };\n\n  /**\n   * Called upon reconnection.\n   *\n   * @api private\n   */\n\n  Socket.prototype.reconnect = function () {\n    this.reconnecting = true;\n    this.reconnectionAttempts = 0;\n    this.reconnectionDelay = this.options['reconnection delay'];\n\n    var self = this\n      , maxAttempts = this.options['max reconnection attempts']\n      , tryMultiple = this.options['try multiple transports']\n      , limit = this.options['reconnection limit'];\n\n    function reset () {\n      if (self.connected) {\n        for (var i in self.namespaces) {\n          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n              self.namespaces[i].packet({ type: 'connect' });\n          }\n        }\n        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n      }\n\n      clearTimeout(self.reconnectionTimer);\n\n      self.removeListener('connect_failed', maybeReconnect);\n      self.removeListener('connect', maybeReconnect);\n\n      self.reconnecting = false;\n\n      delete self.reconnectionAttempts;\n      delete self.reconnectionDelay;\n      delete self.reconnectionTimer;\n      delete self.redoTransports;\n\n      self.options['try multiple transports'] = tryMultiple;\n    };\n\n    function maybeReconnect () {\n      if (!self.reconnecting) {\n        return;\n      }\n\n      if (self.connected) {\n        return reset();\n      };\n\n      if (self.connecting && self.reconnecting) {\n        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n      }\n\n      if (self.reconnectionAttempts++ >= maxAttempts) {\n        if (!self.redoTransports) {\n          self.on('connect_failed', maybeReconnect);\n          self.options['try multiple transports'] = true;\n          self.transports = self.origTransports;\n          self.transport = self.getTransport();\n          self.redoTransports = true;\n          self.connect();\n        } else {\n          self.publish('reconnect_failed');\n          reset();\n        }\n      } else {\n        if (self.reconnectionDelay < limit) {\n          self.reconnectionDelay *= 2; // exponential back off\n        }\n\n        self.connect();\n        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n      }\n    };\n\n    this.options['try multiple transports'] = false;\n    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\n    this.on('connect', maybeReconnect);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.SocketNamespace = SocketNamespace;\n\n  /**\n   * Socket namespace constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function SocketNamespace (socket, name) {\n    this.socket = socket;\n    this.name = name || '';\n    this.flags = {};\n    this.json = new Flag(this, 'json');\n    this.ackPackets = 0;\n    this.acks = {};\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(SocketNamespace, io.EventEmitter);\n\n  /**\n   * Copies emit since we override it\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\n  /**\n   * Creates a new namespace, by proxying the request to the socket. This\n   * allows us to use the synax as we do on the server.\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.of = function () {\n    return this.socket.of.apply(this.socket, arguments);\n  };\n\n  /**\n   * Sends a packet.\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.packet = function (packet) {\n    packet.endpoint = this.name;\n    this.socket.packet(packet);\n    this.flags = {};\n    return this;\n  };\n\n  /**\n   * Sends a message\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.send = function (data, fn) {\n    var packet = {\n        type: this.flags.json ? 'json' : 'message'\n      , data: data\n    };\n\n    if ('function' == typeof fn) {\n      packet.id = ++this.ackPackets;\n      packet.ack = true;\n      this.acks[packet.id] = fn;\n    }\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Emits an event\n   *\n   * @api public\n   */\n  \n  SocketNamespace.prototype.emit = function (name) {\n    var args = Array.prototype.slice.call(arguments, 1)\n      , lastArg = args[args.length - 1]\n      , packet = {\n            type: 'event'\n          , name: name\n        };\n\n    if ('function' == typeof lastArg) {\n      packet.id = ++this.ackPackets;\n      packet.ack = 'data';\n      this.acks[packet.id] = lastArg;\n      args = args.slice(0, args.length - 1);\n    }\n\n    packet.args = args;\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Disconnects the namespace\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.disconnect = function () {\n    if (this.name === '') {\n      this.socket.disconnect();\n    } else {\n      this.packet({ type: 'disconnect' });\n      this.$emit('disconnect');\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles a packet\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.onPacket = function (packet) {\n    var self = this;\n\n    function ack () {\n      self.packet({\n          type: 'ack'\n        , args: io.util.toArray(arguments)\n        , ackId: packet.id\n      });\n    };\n\n    switch (packet.type) {\n      case 'connect':\n        this.$emit('connect');\n        break;\n\n      case 'disconnect':\n        if (this.name === '') {\n          this.socket.onDisconnect(packet.reason || 'booted');\n        } else {\n          this.$emit('disconnect', packet.reason);\n        }\n        break;\n\n      case 'message':\n      case 'json':\n        var params = ['message', packet.data];\n\n        if (packet.ack == 'data') {\n          params.push(ack);\n        } else if (packet.ack) {\n          this.packet({ type: 'ack', ackId: packet.id });\n        }\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'event':\n        var params = [packet.name].concat(packet.args);\n\n        if (packet.ack == 'data')\n          params.push(ack);\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'ack':\n        if (this.acks[packet.ackId]) {\n          this.acks[packet.ackId].apply(this, packet.args);\n          delete this.acks[packet.ackId];\n        }\n        break;\n\n      case 'error':\n        if (packet.advice){\n          this.socket.onError(packet);\n        } else {\n          if (packet.reason == 'unauthorized') {\n            this.$emit('connect_failed', packet.reason);\n          } else {\n            this.$emit('error', packet.reason);\n          }\n        }\n        break;\n    }\n  };\n\n  /**\n   * Flag interface.\n   *\n   * @api private\n   */\n\n  function Flag (nsp, name) {\n    this.namespace = nsp;\n    this.name = name;\n  };\n\n  /**\n   * Send a message\n   *\n   * @api public\n   */\n\n  Flag.prototype.send = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.send.apply(this.namespace, arguments);\n  };\n\n  /**\n   * Emit an event\n   *\n   * @api public\n   */\n\n  Flag.prototype.emit = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.emit.apply(this.namespace, arguments);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.websocket = WS;\n\n  /**\n   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n   * persistent connection with the Socket.IO server. This transport will also\n   * be inherited by the FlashSocket fallback as it provides a API compatible\n   * polyfill for the WebSockets.\n   *\n   * @constructor\n   * @extends {io.Transport}\n   * @api public\n   */\n\n  function WS (socket) {\n    io.Transport.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(WS, io.Transport);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  WS.prototype.name = 'websocket';\n\n  /**\n   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n   * all the appropriate listeners to handle the responses from the server.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.open = function () {\n    var query = io.util.query(this.socket.options.query)\n      , self = this\n      , Socket\n\n\n    if (!Socket) {\n      Socket = global.MozWebSocket || global.WebSocket;\n    }\n\n    this.websocket = new Socket(this.prepareUrl() + query);\n\n    this.websocket.onopen = function () {\n      self.onOpen();\n      self.socket.setBuffer(false);\n    };\n    this.websocket.onmessage = function (ev) {\n      self.onData(ev.data);\n    };\n    this.websocket.onclose = function () {\n      self.onClose();\n      self.socket.setBuffer(true);\n    };\n    this.websocket.onerror = function (e) {\n      self.onError(e);\n    };\n\n    return this;\n  };\n\n  /**\n   * Send a message to the Socket.IO server. The message will automatically be\n   * encoded in the correct message format.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n  // setTimeout, when they resume from sleeping the browser will crash if \n  // we don't allow the browser time to detect the socket has been closed\n  if (io.util.ua.iDevice) {\n    WS.prototype.send = function (data) {\n      var self = this;\n      setTimeout(function() {\n         self.websocket.send(data);\n      },0);\n      return this;\n    };\n  } else {\n    WS.prototype.send = function (data) {\n      this.websocket.send(data);\n      return this;\n    };\n  }\n\n  /**\n   * Payload\n   *\n   * @api private\n   */\n\n  WS.prototype.payload = function (arr) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      this.packet(arr[i]);\n    }\n    return this;\n  };\n\n  /**\n   * Disconnect the established `WebSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.close = function () {\n    this.websocket.close();\n    return this;\n  };\n\n  /**\n   * Handle the errors that `WebSocket` might be giving when we\n   * are attempting to connect or send messages.\n   *\n   * @param {Error} e The error.\n   * @api private\n   */\n\n  WS.prototype.onError = function (e) {\n    this.socket.onError(e);\n  };\n\n  /**\n   * Returns the appropriate scheme for the URI generation.\n   *\n   * @api private\n   */\n  WS.prototype.scheme = function () {\n    return this.socket.options.secure ? 'wss' : 'ws';\n  };\n\n  /**\n   * Checks if the browser has support for native `WebSockets` and that\n   * it's not the polyfill created for the FlashSocket transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  WS.check = function () {\n    return ('WebSocket' in global && !('__addTask' in WebSocket))\n          || 'MozWebSocket' in global;\n  };\n\n  /**\n   * Check if the `WebSocket` transport support cross domain communications.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  WS.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('websocket');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.flashsocket = Flashsocket;\n\n  /**\n   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n   * specification. It uses a .swf file to communicate with the server. If you want\n   * to serve the .swf file from a other server than where the Socket.IO script is\n   * coming from you need to use the insecure version of the .swf. More information\n   * about this can be found on the github page.\n   *\n   * @constructor\n   * @extends {io.Transport.websocket}\n   * @api public\n   */\n\n  function Flashsocket () {\n    io.Transport.websocket.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(Flashsocket, io.Transport.websocket);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  Flashsocket.prototype.name = 'flashsocket';\n\n  /**\n   * Disconnect the established `FlashSocket` connection. This is done by adding a \n   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.open = function () {\n    var self = this\n      , args = arguments;\n\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.open.apply(self, args);\n    });\n    return this;\n  };\n  \n  /**\n   * Sends a message to the Socket.IO server. This is done by adding a new\n   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.send = function () {\n    var self = this, args = arguments;\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.send.apply(self, args);\n    });\n    return this;\n  };\n\n  /**\n   * Disconnects the established `FlashSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.close = function () {\n    WebSocket.__tasks.length = 0;\n    io.Transport.websocket.prototype.close.call(this);\n    return this;\n  };\n\n  /**\n   * The WebSocket fall back needs to append the flash container to the body\n   * element, so we need to make sure we have access to it. Or defer the call\n   * until we are sure there is a body element.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Flashsocket.prototype.ready = function (socket, fn) {\n    function init () {\n      var options = socket.options\n        , port = options['flash policy port']\n        , path = [\n              'http' + (options.secure ? 's' : '') + ':/'\n            , options.host + ':' + options.port\n            , options.resource\n            , 'static/flashsocket'\n            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n          ];\n\n      // Only start downloading the swf file when the checked that this browser\n      // actually supports it\n      if (!Flashsocket.loaded) {\n        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n          // Set the correct file based on the XDomain settings\n          WEB_SOCKET_SWF_LOCATION = path.join('/');\n        }\n\n        if (port !== 843) {\n          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n        }\n\n        WebSocket.__initialize();\n        Flashsocket.loaded = true;\n      }\n\n      fn.call(self);\n    }\n\n    var self = this;\n    if (document.body) return init();\n\n    io.util.load(init);\n  };\n\n  /**\n   * Check if the FlashSocket transport is supported as it requires that the Adobe\n   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n   * the polyfill is correctly loaded.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.check = function () {\n    if (\n        typeof WebSocket == 'undefined'\n      || !('__initialize' in WebSocket) || !swfobject\n    ) return false;\n\n    return swfobject.getFlashPlayerVersion().major >= 10;\n  };\n\n  /**\n   * Check if the FlashSocket transport can be used as cross domain / cross origin \n   * transport. Because we can't see which type (secure or insecure) of .swf is used\n   * we will just return true.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Disable AUTO_INITIALIZATION\n   */\n\n  if (typeof window != 'undefined') {\n    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n  }\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('flashsocket');\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n*/\nif ('undefined' != typeof window) {\nvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n}\n// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n// License: New BSD License\n// Reference: http://dev.w3.org/html5/websockets/\n// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\n(function() {\n  \n  if ('undefined' == typeof window || window.WebSocket) return;\n\n  var console = window.console;\n  if (!console || !console.log || !console.error) {\n    console = {log: function(){ }, error: function(){ }};\n  }\n  \n  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n    console.error(\"Flash Player >= 10.0.0 is required.\");\n    return;\n  }\n  if (location.protocol == \"file:\") {\n    console.error(\n      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n      \"unless you set Flash Security Settings properly. \" +\n      \"Open the page via Web server i.e. http://...\");\n  }\n\n  /**\n   * This class represents a faux web socket.\n   * @param {string} url\n   * @param {array or string} protocols\n   * @param {string} proxyHost\n   * @param {int} proxyPort\n   * @param {string} headers\n   */\n  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n    var self = this;\n    self.__id = WebSocket.__nextId++;\n    WebSocket.__instances[self.__id] = self;\n    self.readyState = WebSocket.CONNECTING;\n    self.bufferedAmount = 0;\n    self.__events = {};\n    if (!protocols) {\n      protocols = [];\n    } else if (typeof protocols == \"string\") {\n      protocols = [protocols];\n    }\n    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n    setTimeout(function() {\n      WebSocket.__addTask(function() {\n        WebSocket.__flash.create(\n            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n      });\n    }, 0);\n  };\n\n  /**\n   * Send data to the web socket.\n   * @param {string} data  The data to send to the socket.\n   * @return {boolean}  True for success, false for failure.\n   */\n  WebSocket.prototype.send = function(data) {\n    if (this.readyState == WebSocket.CONNECTING) {\n      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n    }\n    // We use encodeURIComponent() here, because FABridge doesn't work if\n    // the argument includes some characters. We don't use escape() here\n    // because of this:\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n    // additional testing.\n    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n    if (result < 0) { // success\n      return true;\n    } else {\n      this.bufferedAmount += result;\n      return false;\n    }\n  };\n\n  /**\n   * Close this web socket gracefully.\n   */\n  WebSocket.prototype.close = function() {\n    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n      return;\n    }\n    this.readyState = WebSocket.CLOSING;\n    WebSocket.__flash.close(this.__id);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) {\n      this.__events[type] = [];\n    }\n    this.__events[type].push(listener);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) return;\n    var events = this.__events[type];\n    for (var i = events.length - 1; i >= 0; --i) {\n      if (events[i] === listener) {\n        events.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {Event} event\n   * @return void\n   */\n  WebSocket.prototype.dispatchEvent = function(event) {\n    var events = this.__events[event.type] || [];\n    for (var i = 0; i < events.length; ++i) {\n      events[i](event);\n    }\n    var handler = this[\"on\" + event.type];\n    if (handler) handler(event);\n  };\n\n  /**\n   * Handles an event from Flash.\n   * @param {Object} flashEvent\n   */\n  WebSocket.prototype.__handleEvent = function(flashEvent) {\n    if (\"readyState\" in flashEvent) {\n      this.readyState = flashEvent.readyState;\n    }\n    if (\"protocol\" in flashEvent) {\n      this.protocol = flashEvent.protocol;\n    }\n    \n    var jsEvent;\n    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n      jsEvent = this.__createSimpleEvent(flashEvent.type);\n    } else if (flashEvent.type == \"close\") {\n      // TODO implement jsEvent.wasClean\n      jsEvent = this.__createSimpleEvent(\"close\");\n    } else if (flashEvent.type == \"message\") {\n      var data = decodeURIComponent(flashEvent.message);\n      jsEvent = this.__createMessageEvent(\"message\", data);\n    } else {\n      throw \"unknown event type: \" + flashEvent.type;\n    }\n    \n    this.dispatchEvent(jsEvent);\n  };\n  \n  WebSocket.prototype.__createSimpleEvent = function(type) {\n    if (document.createEvent && window.Event) {\n      var event = document.createEvent(\"Event\");\n      event.initEvent(type, false, false);\n      return event;\n    } else {\n      return {type: type, bubbles: false, cancelable: false};\n    }\n  };\n  \n  WebSocket.prototype.__createMessageEvent = function(type, data) {\n    if (document.createEvent && window.MessageEvent && !window.opera) {\n      var event = document.createEvent(\"MessageEvent\");\n      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n      return event;\n    } else {\n      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n      return {type: type, data: data, bubbles: false, cancelable: false};\n    }\n  };\n  \n  /**\n   * Define the WebSocket readyState enumeration.\n   */\n  WebSocket.CONNECTING = 0;\n  WebSocket.OPEN = 1;\n  WebSocket.CLOSING = 2;\n  WebSocket.CLOSED = 3;\n\n  WebSocket.__flash = null;\n  WebSocket.__instances = {};\n  WebSocket.__tasks = [];\n  WebSocket.__nextId = 0;\n  \n  /**\n   * Load a new flash security policy file.\n   * @param {string} url\n   */\n  WebSocket.loadFlashPolicyFile = function(url){\n    WebSocket.__addTask(function() {\n      WebSocket.__flash.loadManualPolicyFile(url);\n    });\n  };\n\n  /**\n   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n   */\n  WebSocket.__initialize = function() {\n    if (WebSocket.__flash) return;\n    \n    if (WebSocket.__swfLocation) {\n      // For backword compatibility.\n      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n    }\n    if (!window.WEB_SOCKET_SWF_LOCATION) {\n      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n      return;\n    }\n    var container = document.createElement(\"div\");\n    container.id = \"webSocketContainer\";\n    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n    // the best we can do as far as we know now.\n    container.style.position = \"absolute\";\n    if (WebSocket.__isFlashLite()) {\n      container.style.left = \"0px\";\n      container.style.top = \"0px\";\n    } else {\n      container.style.left = \"-100px\";\n      container.style.top = \"-100px\";\n    }\n    var holder = document.createElement(\"div\");\n    holder.id = \"webSocketFlash\";\n    container.appendChild(holder);\n    document.body.appendChild(container);\n    // See this article for hasPriority:\n    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n    swfobject.embedSWF(\n      WEB_SOCKET_SWF_LOCATION,\n      \"webSocketFlash\",\n      \"1\" /* width */,\n      \"1\" /* height */,\n      \"10.0.0\" /* SWF version */,\n      null,\n      null,\n      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n      null,\n      function(e) {\n        if (!e.success) {\n          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n        }\n      });\n  };\n  \n  /**\n   * Called by Flash to notify JS that it's fully loaded and ready\n   * for communication.\n   */\n  WebSocket.__onFlashInitialized = function() {\n    // We need to set a timeout here to avoid round-trip calls\n    // to flash during the initialization process.\n    setTimeout(function() {\n      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n      WebSocket.__flash.setCallerUrl(location.href);\n      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n        WebSocket.__tasks[i]();\n      }\n      WebSocket.__tasks = [];\n    }, 0);\n  };\n  \n  /**\n   * Called by Flash to notify WebSockets events are fired.\n   */\n  WebSocket.__onFlashEvent = function() {\n    setTimeout(function() {\n      try {\n        // Gets events using receiveEvents() instead of getting it from event object\n        // of Flash event. This is to make sure to keep message order.\n        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n        var events = WebSocket.__flash.receiveEvents();\n        for (var i = 0; i < events.length; ++i) {\n          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }, 0);\n    return true;\n  };\n  \n  // Called by Flash.\n  WebSocket.__log = function(message) {\n    console.log(decodeURIComponent(message));\n  };\n  \n  // Called by Flash.\n  WebSocket.__error = function(message) {\n    console.error(decodeURIComponent(message));\n  };\n  \n  WebSocket.__addTask = function(task) {\n    if (WebSocket.__flash) {\n      task();\n    } else {\n      WebSocket.__tasks.push(task);\n    }\n  };\n  \n  /**\n   * Test if the browser is running flash lite.\n   * @return {boolean} True if flash lite is running, false otherwise.\n   */\n  WebSocket.__isFlashLite = function() {\n    if (!window.navigator || !window.navigator.mimeTypes) {\n      return false;\n    }\n    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n      return false;\n    }\n    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n  };\n  \n  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n    if (window.addEventListener) {\n      window.addEventListener(\"load\", function(){\n        WebSocket.__initialize();\n      }, false);\n    } else {\n      window.attachEvent(\"onload\", function(){\n        WebSocket.__initialize();\n      });\n    }\n  }\n  \n})();\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   *\n   * @api public\n   */\n\n  exports.XHR = XHR;\n\n  /**\n   * XHR constructor\n   *\n   * @costructor\n   * @api public\n   */\n\n  function XHR (socket) {\n    if (!socket) return;\n\n    io.Transport.apply(this, arguments);\n    this.sendBuffer = [];\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(XHR, io.Transport);\n\n  /**\n   * Establish a connection\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.open = function () {\n    this.socket.setBuffer(false);\n    this.onOpen();\n    this.get();\n\n    // we need to make sure the request succeeds since we have no indication\n    // whether the request opened or not until it succeeded.\n    this.setCloseTimeout();\n\n    return this;\n  };\n\n  /**\n   * Check if we need to send data to the Socket.IO server, if we have data in our\n   * buffer we encode it and forward it to the `post` method.\n   *\n   * @api private\n   */\n\n  XHR.prototype.payload = function (payload) {\n    var msgs = [];\n\n    for (var i = 0, l = payload.length; i < l; i++) {\n      msgs.push(io.parser.encodePacket(payload[i]));\n    }\n\n    this.send(io.parser.encodePayload(msgs));\n  };\n\n  /**\n   * Send data to the Socket.IO server.\n   *\n   * @param data The message\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.send = function (data) {\n    this.post(data);\n    return this;\n  };\n\n  /**\n   * Posts a encoded message to the Socket.IO server.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  function empty () { };\n\n  XHR.prototype.post = function (data) {\n    var self = this;\n    this.socket.setBuffer(true);\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n        self.posting = false;\n\n        if (this.status == 200){\n          self.socket.setBuffer(false);\n        } else {\n          self.onClose();\n        }\n      }\n    }\n\n    function onload () {\n      this.onload = empty;\n      self.socket.setBuffer(false);\n    };\n\n    this.sendXHR = this.request('POST');\n\n    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n      this.sendXHR.onload = this.sendXHR.onerror = onload;\n    } else {\n      this.sendXHR.onreadystatechange = stateChange;\n    }\n\n    this.sendXHR.send(data);\n  };\n\n  /**\n   * Disconnects the established `XHR` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.close = function () {\n    this.onClose();\n    return this;\n  };\n\n  /**\n   * Generates a configured XHR request\n   *\n   * @param {String} url The url that needs to be requested.\n   * @param {String} method The method the request should use.\n   * @returns {XMLHttpRequest}\n   * @api private\n   */\n\n  XHR.prototype.request = function (method) {\n    var req = io.util.request(this.socket.isXDomain())\n      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\n    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n    if (method == 'POST') {\n      try {\n        if (req.setRequestHeader) {\n          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        } else {\n          // XDomainRequest\n          req.contentType = 'text/plain';\n        }\n      } catch (e) {}\n    }\n\n    return req;\n  };\n\n  /**\n   * Returns the scheme to use for the transport URLs.\n   *\n   * @api private\n   */\n\n  XHR.prototype.scheme = function () {\n    return this.socket.options.secure ? 'https' : 'http';\n  };\n\n  /**\n   * Check if the XHR transports are supported\n   *\n   * @param {Boolean} xdomain Check if we support cross domain requests.\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.check = function (socket, xdomain) {\n    try {\n      var request = io.util.request(xdomain),\n          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n      if (request && !(usesXDomReq && isXProtocol)) {\n        return true;\n      }\n    } catch(e) {}\n\n    return false;\n  };\n\n  /**\n   * Check if the XHR transport supports cross domain requests.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.xdomainCheck = function (socket) {\n    return XHR.check(socket, true);\n  };\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.htmlfile = HTMLFile;\n\n  /**\n   * The HTMLFile transport creates a `forever iframe` based transport\n   * for Internet Explorer. Regular forever iframe implementations will \n   * continuously trigger the browsers buzy indicators. If the forever iframe\n   * is created inside a `htmlfile` these indicators will not be trigged.\n   *\n   * @constructor\n   * @extends {io.Transport.XHR}\n   * @api public\n   */\n\n  function HTMLFile (socket) {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(HTMLFile, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  HTMLFile.prototype.name = 'htmlfile';\n\n  /**\n   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n   * that can be used to listen to messages. Inside the generated\n   * `htmlfile` a reference will be made to the HTMLFile transport.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.get = function () {\n    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n    this.doc.open();\n    this.doc.write('<html></html>');\n    this.doc.close();\n    this.doc.parentWindow.s = this;\n\n    var iframeC = this.doc.createElement('div');\n    iframeC.className = 'socketio';\n\n    this.doc.body.appendChild(iframeC);\n    this.iframe = this.doc.createElement('iframe');\n\n    iframeC.appendChild(this.iframe);\n\n    var self = this\n      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\n    this.iframe.src = this.prepareUrl() + query;\n\n    io.util.on(window, 'unload', function () {\n      self.destroy();\n    });\n  };\n\n  /**\n   * The Socket.IO server will write script tags inside the forever\n   * iframe, this function will be used as callback for the incoming\n   * information.\n   *\n   * @param {String} data The message\n   * @param {document} doc Reference to the context\n   * @api private\n   */\n\n  HTMLFile.prototype._ = function (data, doc) {\n    // unescape all forward slashes. see GH-1251\n    data = data.replace(/\\\\\\//g, '/');\n    this.onData(data);\n    try {\n      var script = doc.getElementsByTagName('script')[0];\n      script.parentNode.removeChild(script);\n    } catch (e) { }\n  };\n\n  /**\n   * Destroy the established connection, iframe and `htmlfile`.\n   * And calls the `CollectGarbage` function of Internet Explorer\n   * to release the memory.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.destroy = function () {\n    if (this.iframe){\n      try {\n        this.iframe.src = 'about:blank';\n      } catch(e){}\n\n      this.doc = null;\n      this.iframe.parentNode.removeChild(this.iframe);\n      this.iframe = null;\n\n      CollectGarbage();\n    }\n  };\n\n  /**\n   * Disconnects the established connection.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  HTMLFile.prototype.close = function () {\n    this.destroy();\n    return io.Transport.XHR.prototype.close.call(this);\n  };\n\n  /**\n   * Checks if the browser supports this transport. The browser\n   * must have an `Ac...eXObject` implementation.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  HTMLFile.check = function (socket) {\n    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n      try {\n        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n        return a && io.Transport.XHR.check(socket);\n      } catch(e){}\n    }\n    return false;\n  };\n\n  /**\n   * Check if cross domain requests are supported.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  HTMLFile.xdomainCheck = function () {\n    // we can probably do handling for sub-domains, we should\n    // test that it's cross domain but a subdomain here\n    return false;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('htmlfile');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['xhr-polling'] = XHRPolling;\n\n  /**\n   * The XHR-polling transport uses long polling XHR requests to create a\n   * \"persistent\" connection with the server.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function XHRPolling () {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Merge the properties from XHR transport\n   */\n\n  io.util.merge(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  XHRPolling.prototype.name = 'xhr-polling';\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.heartbeats = function () {\n    return false;\n  };\n\n  /** \n   * Establish a connection, for iPhone and Android this will be done once the page\n   * is loaded.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  XHRPolling.prototype.open = function () {\n    var self = this;\n\n    io.Transport.XHR.prototype.open.call(self);\n    return false;\n  };\n\n  /**\n   * Starts a XHR request to wait for incoming messages.\n   *\n   * @api private\n   */\n\n  function empty () {};\n\n  XHRPolling.prototype.get = function () {\n    if (!this.isOpen) return;\n\n    var self = this;\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n\n        if (this.status == 200) {\n          self.onData(this.responseText);\n          self.get();\n        } else {\n          self.onClose();\n        }\n      }\n    };\n\n    function onload () {\n      this.onload = empty;\n      this.onerror = empty;\n      self.retryCounter = 1;\n      self.onData(this.responseText);\n      self.get();\n    };\n\n    function onerror () {\n      self.retryCounter ++;\n      if(!self.retryCounter || self.retryCounter > 3) {\n        self.onClose();  \n      } else {\n        self.get();\n      }\n    };\n\n    this.xhr = this.request();\n\n    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n      this.xhr.onload = onload;\n      this.xhr.onerror = onerror;\n    } else {\n      this.xhr.onreadystatechange = stateChange;\n    }\n\n    this.xhr.send(null);\n  };\n\n  /**\n   * Handle the unclean close behavior.\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.onClose = function () {\n    io.Transport.XHR.prototype.onClose.call(this);\n\n    if (this.xhr) {\n      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n      try {\n        this.xhr.abort();\n      } catch(e){}\n      this.xhr = null;\n    }\n  };\n\n  /**\n   * Webkit based browsers show a infinit spinner when you start a XHR request\n   * before the browsers onload event is called so we need to defer opening of\n   * the transport until the onload event is called. Wrapping the cb in our\n   * defer method solve this.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  XHRPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n\n    io.util.defer(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('xhr-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n  /**\n   * There is a way to hide the loading indicator in Firefox. If you create and\n   * remove a iframe it will stop showing the current loading indicator.\n   * Unfortunately we can't feature detect that and UA sniffing is evil.\n   *\n   * @api private\n   */\n\n  var indicator = global.document && \"MozAppearance\" in\n    global.document.documentElement.style;\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['jsonp-polling'] = JSONPPolling;\n\n  /**\n   * The JSONP transport creates an persistent connection by dynamically\n   * inserting a script tag in the page. This script tag will receive the\n   * information of the Socket.IO server. When new information is received\n   * it creates a new script tag for the new data stream.\n   *\n   * @constructor\n   * @extends {io.Transport.xhr-polling}\n   * @api public\n   */\n\n  function JSONPPolling (socket) {\n    io.Transport['xhr-polling'].apply(this, arguments);\n\n    this.index = io.j.length;\n\n    var self = this;\n\n    io.j.push(function (msg) {\n      self._(msg);\n    });\n  };\n\n  /**\n   * Inherits from XHR polling transport.\n   */\n\n  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  JSONPPolling.prototype.name = 'jsonp-polling';\n\n  /**\n   * Posts a encoded message to the Socket.IO server using an iframe.\n   * The iframe is used because script tags can create POST based requests.\n   * The iframe is positioned outside of the view so the user does not\n   * notice it's existence.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  JSONPPolling.prototype.post = function (data) {\n    var self = this\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (!this.form) {\n      var form = document.createElement('form')\n        , area = document.createElement('textarea')\n        , id = this.iframeId = 'socketio_iframe_' + this.index\n        , iframe;\n\n      form.className = 'socketio';\n      form.style.position = 'absolute';\n      form.style.top = '0px';\n      form.style.left = '0px';\n      form.style.display = 'none';\n      form.target = id;\n      form.method = 'POST';\n      form.setAttribute('accept-charset', 'utf-8');\n      area.name = 'd';\n      form.appendChild(area);\n      document.body.appendChild(form);\n\n      this.form = form;\n      this.area = area;\n    }\n\n    this.form.action = this.prepareUrl() + query;\n\n    function complete () {\n      initIframe();\n      self.socket.setBuffer(false);\n    };\n\n    function initIframe () {\n      if (self.iframe) {\n        self.form.removeChild(self.iframe);\n      }\n\n      try {\n        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n      } catch (e) {\n        iframe = document.createElement('iframe');\n        iframe.name = self.iframeId;\n      }\n\n      iframe.id = self.iframeId;\n\n      self.form.appendChild(iframe);\n      self.iframe = iframe;\n    };\n\n    initIframe();\n\n    // we temporarily stringify until we figure out how to prevent\n    // browsers from turning `\\n` into `\\r\\n` in form inputs\n    this.area.value = io.JSON.stringify(data);\n\n    try {\n      this.form.submit();\n    } catch(e) {}\n\n    if (this.iframe.attachEvent) {\n      iframe.onreadystatechange = function () {\n        if (self.iframe.readyState == 'complete') {\n          complete();\n        }\n      };\n    } else {\n      this.iframe.onload = complete;\n    }\n\n    this.socket.setBuffer(true);\n  };\n\n  /**\n   * Creates a new JSONP poll that can be used to listen\n   * for messages from the Socket.IO server.\n   *\n   * @api private\n   */\n\n  JSONPPolling.prototype.get = function () {\n    var self = this\n      , script = document.createElement('script')\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (this.script) {\n      this.script.parentNode.removeChild(this.script);\n      this.script = null;\n    }\n\n    script.async = true;\n    script.src = this.prepareUrl() + query;\n    script.onerror = function () {\n      self.onClose();\n    };\n\n    var insertAt = document.getElementsByTagName('script')[0];\n    insertAt.parentNode.insertBefore(script, insertAt);\n    this.script = script;\n\n    if (indicator) {\n      setTimeout(function () {\n        var iframe = document.createElement('iframe');\n        document.body.appendChild(iframe);\n        document.body.removeChild(iframe);\n      }, 100);\n    }\n  };\n\n  /**\n   * Callback function for the incoming message stream from the Socket.IO server.\n   *\n   * @param {String} data The message\n   * @api private\n   */\n\n  JSONPPolling.prototype._ = function (msg) {\n    this.onData(msg);\n    if (this.isOpen) {\n      this.get();\n    }\n    return this;\n  };\n\n  /**\n   * The indicator hack only works after onload\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  JSONPPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n    if (!indicator) return fn.call(this);\n\n    io.util.load(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Checks if browser supports this transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.check = function () {\n    return 'document' in global;\n  };\n\n  /**\n   * Check if cross domain requests are supported\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('jsonp-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\nif (typeof define === \"function\" && define.amd) {\n  define([], function () { return io; });\n}\n})();","// Copyright (c) 2010 David Durman\n//\n// The contents of this file are subject to the MIT License (the \"License\");\n// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n// http://opensource.org/licenses/MIT.\n//\n// This hierarchical state machine implementation has been inspired\n// by the QP active object framework, see http://www.state-machine.com/\n\n\n(function(root, factory){\n    \"use strict\";\n\n    if (typeof exports === 'object') {\n\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n\n    } else if (typeof define === 'function' && define.amd) {\n\n        // AMD. Register as an anonymous module.\n        define(factory);\n\n    } else {\n\n        // Browser globals (root is window)\n        root.Statechart = factory();\n    }\n\n}(this, function(){\n\n    \"use strict\";\n\n    var assert = function(assertion){\n        if (!assertion) {\n            throw new Error(\"Assertion failed.\");\n        }\n    };\n\n\n    // Statechart.\n    // -----------\n\n    // `myState` - the current state\n    // `mySource` - the source of the current transition\n\n    var Statechart = {\n\n        run: function(opt){\n            opt = opt || {};\n            this.debug = opt.debug ? opt.debug : function(){};\n            this.construct(this.initialState);\n            this.init(null);\n        },\n\n        construct: function(initialState){\n            this.myState = this.top();\n            this.mySource = this.state(\"Initial\");\n\n            // Initial pseudo-state\n            this.states.Initial = {\n                empty: function(){\n                    this.newInitialState(initialState);\n                }\n            };\n            var handled = function(){ return null; };\n\n            // TOP state\n            this.states.TOP = {\n                entry: handled,\n                exit:  handled,\n                init:  handled,\n                empty: handled\n            };\n            this.flatten();\n        },\n\n        // Trigger the initial transition and recursively enter the submachine of the top state.\n        // Must be called only once for a given Statechart before dispatching any events to it.\n        init: function(anEventOrNull){\n            assert(this.myState === this.top() && this.mySource !== null);\n            var s = this.myState;    // save top in temp\n            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n            s = this.myState;\n            s.enter();\n            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n                s = this.myState;\n                s.enter();\n            }\n        },\n\n        state: function(stateOrName){\n            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n        },\n\n        top: function(stateOrName){\n            // create the top state only once and store it to an auxiliary property\n            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n        },\n\n        currentState: function(){\n            return this.myState;\n        },\n\n        flatten: function(){\n            this.statesTable = this.statesTable || {};\n            this._flatten(this.states, this.top().name);\n        },\n\n        _flatten: function(states, parent){\n            if (!states) {\n                return;\n            }\n\n            for (var state in states) {\n                if (states.hasOwnProperty(state)) {\n                    this.statesTable[state] = states[state];\n                    this.statesTable[state].parent = parent;\n                    this._flatten(states[state].states, state);\n                }\n            }\n        },\n\n        selectState: function(stateName){\n            return this.statesTable[stateName];\n        },\n\n        dispatchEvent: function(anEvent, state, act){\n            act = act || state[anEvent.type];\n\n            // Action might also be an array in which case it is assumed that evaluating guards decides\n            // which target to enter.\n            if (act instanceof Array) {\n                for (var i = 0; i < act.length; i++) {\n                    this.dispatchEvent(anEvent, state, act[i]);\n                }\n            }\n\n            // @todo This is terrible edge case used just for more fancy Statechart representation\n            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n            // In some cases the latter form can be useful for better control of the Statechart\n            if (anEvent.type === \"init\" && typeof act === \"string\") {\n                this.newInitialState(act);\n                return null; // handled\n            }\n\n            if (act instanceof Function){\n                act.call(this, anEvent.args);\n                return null;  // handled\n            } else if (act) {\n                // no guard at all or the guard condition is met\n                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n                    if (act.action) {\n                        act.action.call(this, anEvent.args);\n                    }\n                    if (act.target) {\n                        this.newState(act.target);\n                    }\n                    return null;  // handled\n                }\n            } else {        // act is undefined (no handler in state for anEvent)\n                if (state === this.selectState(\"TOP\")) {\n                    this.handleUnhandledEvent(anEvent); // not-handled\n                    return null;    // handled (TOP state handles all events)\n                }\n            }\n            return this.state(state.parent); // not-handled\n        },\n\n        // Override this when needed.\n        handleUnhandledEvent: function(anEvent){\n            this.debug(\"Unhandled event: \" + anEvent.type);\n            return null;\n        },\n\n        // Traverse the state hierarchy starting from the currently active state myState.\n        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n        // the state handlers in succession. At each level of state nesting, it intercepts the value\n        // returned from a state handler to obtain the superstate needed to advance to the next level.\n        dispatch: function(anEvent, args){\n            if (!anEvent || !(anEvent instanceof QEvent)) {\n                anEvent = new QEvent(anEvent, args);\n            }\n            this.mySource = this.myState;\n            while (this.mySource) {\n                this.mySource = this.mySource.trigger(anEvent);\n            }\n        },\n\n        // Performs dynamic transition. (macro Q_TRAN_DYN())\n        newState: function(aStateName){\n            this.transition(this.state(aStateName));\n        },\n\n        // Used by handlers only in response to the #init event. (macro Q_INIT())\n        // USAGE: return this.newInitialState(\"whatever\");\n        // @return null for convenience\n\n        newInitialState: function(aStateOrName){\n            this.myState = this.state(aStateOrName);\n            return null;\n        },\n\n        // Dynamic transition. (Q_TRAN_DYN())\n        transition: function(target){\n            assert(!target.equals(this.top()));\n\n            var entry = [];\n            var mySource = this.mySource;\n            var s = this.myState;\n\n            // exit all the nested states between myState and mySource\n            assert(s !== null);\n            assert(mySource !== null);\n            while (!s.equals(mySource)) {\n                s = s.exit() || s.superstate();\n            }\n\n            // check all seven possible source/target state combinations\n\n\t    entry.push(target);\n\n            // (a) mySource == target (self transition)\n            if (mySource.equals(target)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (b) mySource == target.superstate (one level deep)\n            var p = target.superstate();\n            if (mySource.equals(p)) {\n                return this.enterVia(target, entry);\n            }\n\n            assert(mySource !== null);\n\n            // (c) mySource.superstate == target.superstate (most common - fsa)\n            var q = mySource.superstate();\n            if (q.equals(p)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (d) mySource.superstate == target (one level up)\n            if (q.equals(target)) {\n                mySource.exit();\n                entry.pop();    // do not enter the LCA\n                return this.enterVia(target, entry);\n            }\n\n            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t    entry.push(p);\n            s = p.superstate();\n            while (s !== null) {\n                if (mySource.equals(s)) {\n                    return this.enterVia(target, entry);\n                }\n\n\t\tentry.push(s);\n                s = s.superstate();\n            }\n\n            // otherwise we're definitely exiting mySource\n            mySource.exit();\n\n            // entry array is complete, save its length to avoid computing it repeatedly\n            var entryLength = entry.length;\n\n            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n            var lca;\n            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                if (q.equals(entry[lca])) {\n                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                }\n            }\n\n            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n            s = q;\n            while (s !== null) {\n                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                    if (s.equals(entry[lca])) {\n                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                    }\n                }\n                s.exit();\n                s = s.superstate();\n            }\n        },\n\n        // tail of transition()\n        // We are in the LCA of mySource and target.\n        enterVia: function(target, entry){\n\n            // retrace the entry path in reverse order\n            var idx = entry.length;\n            while (idx > 0) {\n                idx--;\n                entry[idx].enter();\n            }\n\n            this.myState = target;\n            while (target.init() === null) {\n                // initial transition must go one level deep\n                assert(target.equals(this.myState.superstate()));\n                target = this.myState;\n                target.enter();\n            }\n        }\n    };\n\n    // QState.\n    // -------\n\n    function QState(fsm, name){\n        this.fsm = fsm;\n        this.name = name;\n    }\n\n    QState.prototype = {\n        equals: function(state){\n            return (this.name === state.name && this.fsm === state.fsm);\n        },\n\n        dispatchEvent: function(anEvent, state){\n            return this.fsm.dispatchEvent(anEvent, state);\n        },\n\n        trigger: function(anEvent){\n            var evt = anEvent || QEventEmpty;\n            var state = this.fsm.selectState(this.name);\n            return this.dispatchEvent(evt, state);\n        },\n\n        enter: function(){\n            this.fsm.debug(\"[\" + this.name + \"] enter\");\n            return this.trigger(QEventEntry);\n        },\n\n        exit: function(){\n            this.fsm.debug(\"[\" + this.name + \"] exit\");\n            return this.trigger(QEventExit);\n        },\n\n        init: function(){\n            this.fsm.debug(\"[\" + this.name + \"] init\");\n            return this.trigger(QEventInit);\n        },\n\n        // Answer my superstate. Default is to return fsm top state.\n        superstate: function(){\n            var superstate = this.trigger(QEventEmpty);\n            if (superstate && superstate instanceof QState) {\n                return superstate;\n            }\n            superstate = this.fsm.top();\n            if (this.name === superstate.name) {\n                return null;\n            }\n            return superstate;\n        }\n    };\n\n    // QEvent\n    // ------\n\n    function QEvent(type, args){\n        this.type = type;\n        this.args = args;\n    }\n\n    // these events are static, they do not carry any arguments\n    // -> create them only once\n    // moreover, they don't have to be exposed to the outer world\n    var QEventEntry = new QEvent(\"entry\");\n    var QEventExit = new QEvent(\"exit\");\n    var QEventInit = new QEvent(\"init\");\n    var QEventEmpty = new QEvent(\"empty\");\n\n\n    return Statechart;\n}));\n","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n"],"sourceRoot":"webpack-module://"}