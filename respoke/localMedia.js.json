[
    {
        "tags": [],
        "description": {
            "full": "<p>Copyright 2014, Digium, Inc.\nAll rights reserved.</p>\n<p>This source code is licensed under The MIT License found in the\nLICENSE file in the root directory of this source tree.</p>\n<p>For all details and documentation:  <a href=\"https://www.respoke.io\">https://www.respoke.io</a></p>\n",
            "summary": "<p>Copyright 2014, Digium, Inc.\nAll rights reserved.</p>\n",
            "body": "<p>This source code is licensed under The MIT License found in the\nLICENSE file in the root directory of this source tree.</p>\n<p>For all details and documentation:  <a href=\"https://www.respoke.io\">https://www.respoke.io</a></p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "var log = require('loglevel');\nvar respoke = require('./respoke');",
        "ctx": {
            "type": "declaration",
            "name": "log",
            "value": "require('loglevel')",
            "string": "log",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "class",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "constructor",
                "string": ""
            },
            {
                "type": "augments",
                "otherClass": "respoke.EventEmitter"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "params",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "params.instanceId",
                "description": "- client id"
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "params.callId",
                "description": "- call id"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "[params.constraints]",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "HTMLVideoElement"
                ],
                "name": "params.element",
                "description": "- Pass in an optional html video element to have local\nvideo attached to it."
            },
            {
                "type": "returns",
                "string": "{respoke.LocalMedia}"
            }
        ],
        "description": {
            "full": "<p>A wrapper around the stream from <code>getUserMedia</code>,\nwhich is attached to a call at <code>call.outgoingMedia</code>.</p>\n",
            "summary": "<p>A wrapper around the stream from <code>getUserMedia</code>,\nwhich is attached to a call at <code>call.outgoingMedia</code>.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "module.exports = function (params) {\n    \"use strict\";\n    params = params || {};",
        "ctx": {
            "type": "method",
            "receiver": "module",
            "name": "exports",
            "string": "module.exports()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "instanceId"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.LocalMedia</p>\n",
            "summary": "<p>@memberof! respoke.LocalMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;",
        "ctx": {
            "type": "declaration",
            "name": "instanceId",
            "value": "params.instanceId",
            "string": "instanceId",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "className"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.LocalMedia</p>\n",
            "summary": "<p>@memberof! respoke.LocalMedia</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.className = 'respoke.LocalMedia';",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "className",
            "value": "'respoke.LocalMedia'",
            "string": "that.className",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "name",
                "string": "id"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>Respoke media ID (different from a <code>MediaStream.id</code>).</p>\n",
            "summary": "<p>Respoke media ID (different from a <code>MediaStream.id</code>).</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.id = respoke.makeGUID();",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "id",
            "value": "respoke.makeGUID()",
            "string": "that.id",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "client"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "respoke.getClient"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.LocalMedia</p>\n",
            "summary": "<p>@memberof! respoke.LocalMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var client = respoke.getClient(instanceId);",
        "ctx": {
            "type": "declaration",
            "name": "client",
            "value": "respoke.getClient(instanceId)",
            "string": "client",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "name",
                "string": "element"
            },
            {
                "type": "type",
                "types": [
                    "HTMLVideoElement"
                ]
            }
        ],
        "description": {
            "full": "<p>The HTML element with video attached.</p>\n",
            "summary": "<p>The HTML element with video attached.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.element = params.element;",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "element",
            "value": "params.element",
            "string": "that.element",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "sdpHasAudio"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "boolean"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.LocalMedia</p>\n",
            "summary": "<p>@memberof! respoke.LocalMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var sdpHasAudio = false;",
        "ctx": {
            "type": "declaration",
            "name": "sdpHasAudio",
            "value": "false",
            "string": "sdpHasAudio",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "sdpHasVideo"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "boolean"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.LocalMedia</p>\n",
            "summary": "<p>@memberof! respoke.LocalMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var sdpHasVideo = false;",
        "ctx": {
            "type": "declaration",
            "name": "sdpHasVideo",
            "value": "false",
            "string": "sdpHasVideo",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "sdpHasDataChannel"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "boolean"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.LocalMedia</p>\n",
            "summary": "<p>@memberof! respoke.LocalMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var sdpHasDataChannel = false;",
        "ctx": {
            "type": "declaration",
            "name": "sdpHasDataChannel",
            "value": "false",
            "string": "sdpHasDataChannel",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "name",
                "string": "allowTimer"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "number"
                ]
            }
        ],
        "description": {
            "full": "<p>A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn&#39;t\nautomatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.</p>\n",
            "summary": "<p>A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn&#39;t\nautomatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var allowTimer = 0;",
        "ctx": {
            "type": "declaration",
            "name": "allowTimer",
            "value": "0",
            "string": "allowTimer",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "mediaOptions"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "object"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.LocalMedia</p>\n",
            "summary": "<p>@memberof! respoke.LocalMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };",
        "ctx": {
            "type": "declaration",
            "name": "mediaOptions",
            "value": "{",
            "string": "mediaOptions",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "pc"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "respoke.PeerConnection"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.LocalMedia</p>\n",
            "summary": "<p>@memberof! respoke.LocalMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var pc = params.pc;\n    delete that.pc;",
        "ctx": {
            "type": "declaration",
            "name": "pc",
            "value": "params.pc",
            "string": "pc",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "name",
                "string": "stream"
            },
            {
                "type": "type",
                "types": [
                    "RTCMediaStream"
                ]
            }
        ],
        "description": {
            "full": "<p>The local <code>MediaStream</code> from <code>getUserMedia()</code>.</p>\n",
            "summary": "<p>The local <code>MediaStream</code> from <code>getUserMedia()</code>.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.stream = null;\n\n    function getStream(theConstraints) {\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n            if (respoke.isEqual(s.constraints, theConstraints)) {\n                return s.stream;\n            }\n        }\n        return null;\n    }\n\n    function removeStream(theConstraints) {\n        var toRemoveIndex;\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n            if (respoke.isEqual(s.constraints, theConstraints)) {\n                toRemoveIndex = i;\n                break;\n            }\n        }\n        if (toRemoveIndex !== undefined) {\n            respoke.streams.splice(toRemoveIndex, 1);\n        }\n    }",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "stream",
            "value": "null",
            "string": "that.stream",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.onReceiveUserMedia"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "param",
                "types": [
                    "RTCMediaStream"
                ],
                "name": "theStream",
                "description": ""
            },
            {
                "type": "fires",
                "string": "respoke.LocalMedia#stream-received"
            }
        ],
        "description": {
            "full": "<p>Save the local stream. Kick off SDP creation.</p>\n",
            "summary": "<p>Save the local stream. Kick off SDP creation.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [
            "respoke.LocalMedia#stream-received"
        ],
        "ignore": false,
        "code": "function onReceiveUserMedia(theStream) {\n        that.stream = theStream;\n        clearTimeout(allowTimer);",
        "ctx": {
            "type": "function",
            "name": "onReceiveUserMedia",
            "string": "onReceiveUserMedia()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.LocalMedia#allow"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>The user has approved the request for media. Any UI changes made to remind the user to click Allow\nshould be canceled now. This event is the same as the <code>onAllow</code> callback.  This event gets fired\neven if the allow process is automatic, i. e., permission and media is granted by the browser\nwithout asking the user to approve it.</p>\n",
            "summary": "<p>The user has approved the request for media. Any UI changes made to remind the user to click Allow\nshould be canceled now. This event is the same as the <code>onAllow</code> callback.  This event gets fired\neven if the allow process is automatic, i. e., permission and media is granted by the browser\nwithout asking the user to approve it.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('allow');\n        log.debug('User gave permission to use media.');\n        log.debug('onReceiveUserMedia');",
        "ctx": {
            "type": "event",
            "name": "respoke.LocalMedia#allow",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.getAudioTracks"
            }
        ],
        "description": {
            "full": "<p>Expose getAudioTracks.</p>\n",
            "summary": "<p>Expose getAudioTracks.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.getAudioTracks = that.stream.getAudioTracks.bind(that.stream);",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "getAudioTracks",
            "value": "that.stream.getAudioTracks.bind(that.stream)",
            "string": "that.getAudioTracks",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.getVideoTracks"
            }
        ],
        "description": {
            "full": "<p>Expose getVideoTracks.</p>\n",
            "summary": "<p>Expose getVideoTracks.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.getVideoTracks = that.stream.getVideoTracks.bind(that.stream);\n\n        // This happens when we get an automatic hangup or reject from the other side.\n        if (pc === null) {\n            that.hangup({signal: false});\n            return;\n        }\n\n        that.element = that.element || document.createElement('video');\n\n        // This still needs some work. Using cached streams causes an unused video element to be passed\n        // back to the App. This is because we assume at the moment that only one local media video element\n        // will be needed. The first one passed back will contain media and the others will fake it. Media\n        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n        // and the implications of passing back a video element with no media attached.\n        var aStream = getStream(that.constraints);\n        if (aStream) {\n            aStream.numPc += 1;\n\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "getVideoTracks",
            "value": "that.stream.getVideoTracks.bind(that.stream)",
            "string": "that.getVideoTracks",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "Element"
                ],
                "name": "element",
                "description": "- the HTML5 Video element with the new stream attached."
            },
            {
                "type": "property",
                "types": [
                    "RTCMediaStream"
                ],
                "name": "stream",
                "description": "- the HTML5 Video stream"
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.LocalMedia#stream-received</p>\n",
            "summary": "<p>@event respoke.LocalMedia#stream-received</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('stream-received', {\n                element: that.element,\n                stream: that.stream\n            });\n        } else {\n            that.stream.numPc = 1;\n            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\n            that.stream.id = client.endpointId;\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;",
        "ctx": {
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "Element"
                ],
                "name": "element",
                "description": "- the HTML5 Video element with the new stream attached."
            },
            {
                "type": "property",
                "types": [
                    "RTCMediaStream"
                ],
                "name": "stream",
                "description": "- the HTML5 Video stream"
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.LocalMedia#stream-received</p>\n",
            "summary": "<p>@event respoke.LocalMedia#stream-received</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('stream-received', {\n                element: that.element,\n                stream: that.stream\n            });\n        }\n    }",
        "ctx": {
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.requestMedia"
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>Create the RTCPeerConnection and add handlers. Process any offer we have already received.</p>\n",
            "summary": "<p>Create the RTCPeerConnection and add handlers. Process any offer we have already received.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "function requestMedia() {\n        log.debug('requestMedia');\n\n        if (!that.constraints) {\n            throw new Error('No constraints.');\n        }\n\n        var theStream = getStream(that.constraints);\n        if (theStream) {\n            log.debug('using old stream');\n            onReceiveUserMedia(theStream);\n            return;\n        }\n\n        try {\n            log.debug(\"Running getUserMedia with constraints\", that.constraints);\n            // TODO set getStream(that.constraints) = true as a flag that we are already\n            // attempting to obtain this media so the race condition where gUM is called twice with\n            // the same constraints when calls are placed too quickly together doesn't occur.\n            allowTimer = setTimeout(function allowTimer() {",
        "ctx": {
            "type": "function",
            "name": "requestMedia",
            "string": "requestMedia()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.LocalMedia#requesting-media"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>The browser is asking for permission to access the User&#39;s media. This would be an ideal time\nto modify the UI of the application so that the user notices the request for permissions\nand approves it.</p>\n",
            "summary": "<p>The browser is asking for permission to access the User&#39;s media. This would be an ideal time\nto modify the UI of the application so that the user notices the request for permissions\nand approves it.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('requesting-media');\n            }, 500);\n            if (respoke.useFakeMedia === true) {\n                that.constraints.fake = true;\n            }\n            getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n        } catch (e) {\n            log.error(\"Couldn't get user media: \" + e.message);\n        }\n    }",
        "ctx": {
            "type": "event",
            "name": "respoke.LocalMedia#requesting-media",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.onUserMediaError"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Handle any error that comes up during the process of getting user media.</p>\n",
            "summary": "<p>Handle any error that comes up during the process of getting user media.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "function onUserMediaError(p) {\n        log.debug('onUserMediaError');\n        if (p.code === 1) {\n            log.warn(\"Permission denied.\");",
        "ctx": {
            "type": "function",
            "name": "onUserMediaError",
            "string": "onUserMediaError()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.LocalMedia#requesting-media"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Indicate there has been an error obtaining media.</p>\n",
            "summary": "<p>Indicate there has been an error obtaining media.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('error', {error: 'Permission denied.'});\n        } else {\n            log.warn(p);",
        "ctx": {
            "type": "event",
            "name": "respoke.LocalMedia#requesting-media",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "event",
                "string": "respoke.LocalMedia#requesting-media"
            },
            {
                "type": "type",
                "types": [
                    "respoke.Event"
                ]
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>Indicate there has been an error obtaining media.</p>\n",
            "summary": "<p>Indicate there has been an error obtaining media.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('error', {error: p.code});\n        }\n    }",
        "ctx": {
            "type": "event",
            "name": "respoke.LocalMedia#requesting-media",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "returns",
                "string": "boolean"
            }
        ],
        "description": {
            "full": "<p>Whether the video stream is muted.</p>\n<p>All video tracks must be muted for this to return <code>false</code>.</p>\n",
            "summary": "<p>Whether the video stream is muted.</p>\n",
            "body": "<p>All video tracks must be muted for this to return <code>false</code>.</p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.isVideoMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "isVideoMuted",
            "string": "that.isVideoMuted()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.muteVideo"
            },
            {
                "type": "fires",
                "string": "respoke.LocalMedia#mute"
            }
        ],
        "description": {
            "full": "<p>Mute local video stream.</p>\n",
            "summary": "<p>Mute local video stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.LocalMedia#mute"
        ],
        "ignore": false,
        "code": "that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "muteVideo",
            "string": "that.muteVideo()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "type",
                "description": "- Either \"audio\" or \"video\" to specify the type of stream whose muted state\nhas been changed."
            },
            {
                "type": "property",
                "types": [
                    "boolean"
                ],
                "name": "muted",
                "description": "- Whether the stream is now muted. Will be set to false if mute was turned off."
            }
        ],
        "description": {
            "full": "<p>@event respoke.LocalMedia#mute</p>\n",
            "summary": "<p>@event respoke.LocalMedia#mute</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };",
        "ctx": {
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.unmuteVideo"
            },
            {
                "type": "fires",
                "string": "respoke.LocalMedia#mute"
            }
        ],
        "description": {
            "full": "<p>Unmute local video stream.</p>\n",
            "summary": "<p>Unmute local video stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.LocalMedia#mute"
        ],
        "ignore": false,
        "code": "that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "unmuteVideo",
            "string": "that.unmuteVideo()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "type",
                "description": "- Either \"audio\" or \"video\" to specify the type of stream whose muted state\nhas been changed."
            },
            {
                "type": "property",
                "types": [
                    "boolean"
                ],
                "name": "muted",
                "description": "- Whether the stream is now muted. Will be set to false if mute was turned off."
            }
        ],
        "description": {
            "full": "<p>@event respoke.LocalMedia#mute</p>\n",
            "summary": "<p>@event respoke.LocalMedia#mute</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };",
        "ctx": {
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "returns",
                "string": "boolean"
            }
        ],
        "description": {
            "full": "<p>Whether the audio stream is muted.</p>\n<p>All audio tracks must be muted for this to return <code>false</code>.</p>\n",
            "summary": "<p>Whether the audio stream is muted.</p>\n",
            "body": "<p>All audio tracks must be muted for this to return <code>false</code>.</p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.isAudioMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "isAudioMuted",
            "string": "that.isAudioMuted()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.muteAudio"
            },
            {
                "type": "fires",
                "string": "respoke.LocalMedia#mute"
            }
        ],
        "description": {
            "full": "<p>Mute local audio stream.</p>\n",
            "summary": "<p>Mute local audio stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.LocalMedia#mute"
        ],
        "ignore": false,
        "code": "that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "muteAudio",
            "string": "that.muteAudio()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "type",
                "description": "- Either \"audio\" or \"video\" to specify the type of stream whose muted state\nhas been changed."
            },
            {
                "type": "property",
                "types": [
                    "boolean"
                ],
                "name": "muted",
                "description": "- Whether the stream is now muted. Will be set to false if mute was turned off."
            }
        ],
        "description": {
            "full": "<p>@event respoke.LocalMedia#mute</p>\n",
            "summary": "<p>@event respoke.LocalMedia#mute</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };",
        "ctx": {
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.unmuteAudio"
            },
            {
                "type": "fires",
                "string": "respoke.LocalMedia#mute"
            }
        ],
        "description": {
            "full": "<p>Unmute local audio stream.</p>\n",
            "summary": "<p>Unmute local audio stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.LocalMedia#mute"
        ],
        "ignore": false,
        "code": "that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "unmuteAudio",
            "string": "that.unmuteAudio()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "type",
                "description": "- Either \"audio\" or \"video\" to specify the type of stream whose muted state\nhas been changed."
            },
            {
                "type": "property",
                "types": [
                    "boolean"
                ],
                "name": "muted",
                "description": "- Whether the stream is now muted. Will be set to false if mute was turned off."
            }
        ],
        "description": {
            "full": "<p>@event respoke.LocalMedia#mute</p>\n",
            "summary": "<p>@event respoke.LocalMedia#mute</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };",
        "ctx": {
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.stop"
            },
            {
                "type": "fires",
                "string": "respoke.LocalMedia#stop"
            }
        ],
        "description": {
            "full": "<p>Stop the stream.</p>\n",
            "summary": "<p>Stop the stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.LocalMedia#stop"
        ],
        "ignore": false,
        "code": "that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n            removeStream(that.constraints);\n        }\n        that.stream = null;",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "stop",
            "string": "that.stop()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.LocalMedia"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.LocalMedia#stop</p>\n",
            "summary": "<p>@event respoke.LocalMedia#stop</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('stop');\n    };",
        "ctx": {
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.hasVideo"
            },
            {
                "type": "return",
                "string": "{boolean}"
            }
        ],
        "description": {
            "full": "<p>Indicate whether we are sending video.</p>\n",
            "summary": "<p>Indicate whether we are sending video.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "hasVideo",
            "string": "that.hasVideo()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.hasAudio"
            },
            {
                "type": "return",
                "string": "{boolean}"
            }
        ],
        "description": {
            "full": "<p>Indicate whether we are sending audio.</p>\n",
            "summary": "<p>Indicate whether we are sending audio.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "hasAudio",
            "string": "that.hasAudio()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.hasMedia"
            },
            {
                "type": "return",
                "string": "{boolean}"
            }
        ],
        "description": {
            "full": "<p>Indicate whether we have media yet.</p>\n",
            "summary": "<p>Indicate whether we have media yet.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.hasMedia = function () {\n        return !!that.stream;\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "hasMedia",
            "string": "that.hasMedia()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.setSDP"
            },
            {
                "type": "param",
                "types": [
                    "RTCSessionDescription"
                ],
                "name": "oSession",
                "description": ""
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>Save and parse the SDP.</p>\n",
            "summary": "<p>Save and parse the SDP.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "setSDP",
            "string": "that.setSDP()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.LocalMedia"
            },
            {
                "type": "method",
                "string": "respoke.LocalMedia.start"
            },
            {
                "type": "fires",
                "string": "respoke.LocalMedia#start"
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>Start the stream.</p>\n",
            "summary": "<p>Start the stream.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [
            "respoke.LocalMedia#start"
        ],
        "ignore": false,
        "code": "that.start = function () {\n        requestMedia();\n    };\n\n    return that;\n}; // End respoke.LocalMedia",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "start",
            "string": "that.start()",
            "file": {
                "input": "respoke/localMedia.js",
                "output": ".docs/site/respoke/localMedia.js.json"
            }
        }
    }
]