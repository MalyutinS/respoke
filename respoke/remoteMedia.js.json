[
    {
        "tags": [],
        "description": {
            "full": "<p>Copyright 2014, Digium, Inc.\nAll rights reserved.</p>\n<p>This source code is licensed under The MIT License found in the\nLICENSE file in the root directory of this source tree.</p>\n<p>For all details and documentation:  <a href=\"https://www.respoke.io\">https://www.respoke.io</a></p>\n",
            "summary": "<p>Copyright 2014, Digium, Inc.\nAll rights reserved.</p>\n",
            "body": "<p>This source code is licensed under The MIT License found in the\nLICENSE file in the root directory of this source tree.</p>\n<p>For all details and documentation:  <a href=\"https://www.respoke.io\">https://www.respoke.io</a></p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "var log = require('loglevel');\nvar respoke = require('./respoke');",
        "ctx": {
            "type": "declaration",
            "name": "log",
            "value": "require('loglevel')",
            "string": "log",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "class",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "constructor",
                "string": ""
            },
            {
                "type": "augments",
                "otherClass": "respoke.EventEmitter"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "params",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "params.instanceId",
                "description": "- client id"
            },
            {
                "type": "param",
                "types": [
                    "string"
                ],
                "name": "params.callId",
                "description": "- call id"
            },
            {
                "type": "param",
                "types": [
                    "object"
                ],
                "name": "params.constraints",
                "description": ""
            },
            {
                "type": "param",
                "types": [
                    "HTMLVideoElement"
                ],
                "name": "params.videoRemoteElement",
                "description": "- Pass in an optional html video element to have remote video attached to it."
            },
            {
                "type": "returns",
                "string": "{respoke.RemoteMedia}"
            }
        ],
        "description": {
            "full": "<p>Class for managing the remote media stream, \nwhich is attached to a call at <code>call.outgoingMedia</code>.</p>\n",
            "summary": "<p>Class for managing the remote media stream, \nwhich is attached to a call at <code>call.outgoingMedia</code>.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "module.exports = function (params) {\n    \"use strict\";\n    params = params || {};",
        "ctx": {
            "type": "method",
            "receiver": "module",
            "name": "exports",
            "string": "module.exports()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "instanceId"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "summary": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;",
        "ctx": {
            "type": "declaration",
            "name": "instanceId",
            "value": "params.instanceId",
            "string": "instanceId",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "className"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "summary": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.className = 'respoke.RemoteMedia';",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "className",
            "value": "'respoke.RemoteMedia'",
            "string": "that.className",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "name",
                "string": "id"
            },
            {
                "type": "type",
                "types": [
                    "string"
                ]
            }
        ],
        "description": {
            "full": "<p>Respoke media ID (different from a <code>MediaStream.id</code>).</p>\n",
            "summary": "<p>Respoke media ID (different from a <code>MediaStream.id</code>).</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.id = respoke.makeGUID();",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "id",
            "value": "respoke.makeGUID()",
            "string": "that.id",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "client"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "respoke.getClient"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "summary": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var client = respoke.getClient(instanceId);",
        "ctx": {
            "type": "declaration",
            "name": "client",
            "value": "respoke.getClient(instanceId)",
            "string": "client",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "name",
                "string": "element"
            },
            {
                "type": "type",
                "types": [
                    "HTMLVideoElement"
                ]
            }
        ],
        "description": {
            "full": "<p>The HTML element with attached video.</p>\n",
            "summary": "<p>The HTML element with attached video.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.element = params.videoRemoteElement;",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "element",
            "value": "params.videoRemoteElement",
            "string": "that.element",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "sdpHasAudio"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "boolean"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "summary": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var sdpHasAudio = false;",
        "ctx": {
            "type": "declaration",
            "name": "sdpHasAudio",
            "value": "false",
            "string": "sdpHasAudio",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "sdpHasVideo"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "boolean"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "summary": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var sdpHasVideo = false;",
        "ctx": {
            "type": "declaration",
            "name": "sdpHasVideo",
            "value": "false",
            "string": "sdpHasVideo",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "sdpHasDataChannel"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "boolean"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "summary": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var sdpHasDataChannel = false;",
        "ctx": {
            "type": "declaration",
            "name": "sdpHasDataChannel",
            "value": "false",
            "string": "sdpHasDataChannel",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "name",
                "string": "allowTimer"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "number"
                ]
            }
        ],
        "description": {
            "full": "<p>A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn&#39;t\nautomatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.</p>\n",
            "summary": "<p>A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn&#39;t\nautomatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var allowTimer = 0;",
        "ctx": {
            "type": "declaration",
            "name": "allowTimer",
            "value": "0",
            "string": "allowTimer",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "mediaOptions"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "object"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "summary": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };",
        "ctx": {
            "type": "declaration",
            "name": "mediaOptions",
            "value": "{",
            "string": "mediaOptions",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "name",
                "string": "pc"
            },
            {
                "type": "private",
                "visibility": "private"
            },
            {
                "type": "type",
                "types": [
                    "respoke.PeerConnection"
                ]
            }
        ],
        "description": {
            "full": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "summary": "<p>@memberof! respoke.RemoteMedia</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "var pc = params.pc;\n    delete that.pc;",
        "ctx": {
            "type": "declaration",
            "name": "pc",
            "value": "params.pc",
            "string": "pc",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "name",
                "string": "stream"
            },
            {
                "type": "type",
                "types": [
                    "RTCMediaStream"
                ]
            }
        ],
        "description": {
            "full": "<p>The remote <code>MediaStream</code>.</p>\n",
            "summary": "<p>The remote <code>MediaStream</code>.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.stream = null;",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "stream",
            "value": "null",
            "string": "that.stream",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.hasVideo"
            },
            {
                "type": "return",
                "string": "{boolean}"
            }
        ],
        "description": {
            "full": "<p>Indicate whether we are receiving video.</p>\n",
            "summary": "<p>Indicate whether we are receiving video.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "hasVideo",
            "string": "that.hasVideo()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.hasAudio"
            },
            {
                "type": "return",
                "string": "{boolean}"
            }
        ],
        "description": {
            "full": "<p>Indicate whether we are receiving audio.</p>\n",
            "summary": "<p>Indicate whether we are receiving audio.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "hasAudio",
            "string": "that.hasAudio()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.hasMedia"
            },
            {
                "type": "return",
                "string": "{boolean}"
            }
        ],
        "description": {
            "full": "<p>Indicate whether we have media yet.</p>\n",
            "summary": "<p>Indicate whether we have media yet.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.hasMedia = function () {\n        return !!that.stream;\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "hasMedia",
            "string": "that.hasMedia()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.setSDP"
            },
            {
                "type": "param",
                "types": [
                    "RTCSessionDescription"
                ],
                "name": "oSession",
                "description": ""
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>Save and parse the SDP</p>\n",
            "summary": "<p>Save and parse the SDP</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "setSDP",
            "string": "that.setSDP()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.setConstraints"
            },
            {
                "type": "param",
                "types": [
                    "MediaConstraints"
                ],
                "name": "constraints",
                "description": ""
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>Parse the constraints.</p>\n",
            "summary": "<p>Parse the constraints.</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "setConstraints",
            "string": "that.setConstraints()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.setStream"
            },
            {
                "type": "param",
                "types": [
                    "MediaStream"
                ],
                "name": "str",
                "description": ""
            },
            {
                "type": "private",
                "visibility": "private"
            }
        ],
        "description": {
            "full": "<p>Save the media stream</p>\n",
            "summary": "<p>Save the media stream</p>\n",
            "body": ""
        },
        "isPrivate": true,
        "fires": [],
        "ignore": false,
        "code": "that.setStream = function (str) {\n        if (str) {\n            that.stream = str;",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "setStream",
            "string": "that.setStream()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [],
        "description": {
            "full": "<p>Expose getAudioTracks.</p>\n",
            "summary": "<p>Expose getAudioTracks.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.getAudioTracks = that.stream.getAudioTracks.bind(that.stream);",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "getAudioTracks",
            "value": "that.stream.getAudioTracks.bind(that.stream)",
            "string": "that.getAudioTracks",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [],
        "description": {
            "full": "<p>Expose getVideoTracks.</p>\n",
            "summary": "<p>Expose getVideoTracks.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.getVideoTracks = that.stream.getVideoTracks.bind(that.stream);\n            that.element = that.element || document.createElement('video');\n            attachMediaStream(that.element, that.stream);\n            that.element.autoplay = true;\n            setTimeout(that.element.play.bind(that.element));\n        }\n    };",
        "ctx": {
            "type": "property",
            "receiver": "that",
            "name": "getVideoTracks",
            "value": "that.stream.getVideoTracks.bind(that.stream)",
            "string": "that.getVideoTracks",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.stop"
            },
            {
                "type": "fires",
                "string": "respoke.RemoteMedia#stop"
            }
        ],
        "description": {
            "full": "<p>Stop the stream.</p>\n",
            "summary": "<p>Stop the stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.RemoteMedia#stop"
        ],
        "ignore": false,
        "code": "that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n            delete respoke.streams[that.constraints];\n        }\n        that.stream = null;",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "stop",
            "string": "that.stop()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.RemoteMedia"
                ],
                "name": "target",
                "description": ""
            }
        ],
        "description": {
            "full": "<p>@event respoke.RemoteMedia#stop</p>\n",
            "summary": "<p>@event respoke.RemoteMedia#stop</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('stop');\n    };",
        "ctx": {
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "returns",
                "string": "boolean"
            }
        ],
        "description": {
            "full": "<p>Whether the video stream is muted.</p>\n<p>All video tracks must be muted for this to return <code>false</code>.</p>\n",
            "summary": "<p>Whether the video stream is muted.</p>\n",
            "body": "<p>All video tracks must be muted for this to return <code>false</code>.</p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.isVideoMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "isVideoMuted",
            "string": "that.isVideoMuted()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.muteVideo"
            },
            {
                "type": "fires",
                "string": "respoke.RemoteMedia#mute"
            }
        ],
        "description": {
            "full": "<p>Mute remote video stream.</p>\n",
            "summary": "<p>Mute remote video stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.RemoteMedia#mute"
        ],
        "ignore": false,
        "code": "that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "muteVideo",
            "string": "that.muteVideo()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.RemoteMedia"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "type",
                "description": "- Either \"audio\" or \"video\" to specify the type of stream whose muted state\nhas been changed."
            },
            {
                "type": "property",
                "types": [
                    "boolean"
                ],
                "name": "muted",
                "description": "- Whether the stream is now muted. Will be set to false if mute was turned off."
            }
        ],
        "description": {
            "full": "<p>@event respoke.RemoteMedia#mute</p>\n",
            "summary": "<p>@event respoke.RemoteMedia#mute</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };",
        "ctx": {
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.unmuteVideo"
            },
            {
                "type": "fires",
                "string": "respoke.RemoteMedia#mute"
            }
        ],
        "description": {
            "full": "<p>Unmute remote video stream.</p>\n",
            "summary": "<p>Unmute remote video stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.RemoteMedia#mute"
        ],
        "ignore": false,
        "code": "that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "unmuteVideo",
            "string": "that.unmuteVideo()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.RemoteMedia"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "type",
                "description": "- Either \"audio\" or \"video\" to specify the type of stream whose muted state\nhas been changed."
            },
            {
                "type": "property",
                "types": [
                    "boolean"
                ],
                "name": "muted",
                "description": "- Whether the stream is now muted. Will be set to false if mute was turned off."
            }
        ],
        "description": {
            "full": "<p>@event respoke.RemoteMedia#mute</p>\n",
            "summary": "<p>@event respoke.RemoteMedia#mute</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };",
        "ctx": {
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "returns",
                "string": "boolean"
            }
        ],
        "description": {
            "full": "<p>Whether the audio stream is muted.</p>\n<p>All audio tracks must be muted for this to return <code>false</code>.</p>\n",
            "summary": "<p>Whether the audio stream is muted.</p>\n",
            "body": "<p>All audio tracks must be muted for this to return <code>false</code>.</p>\n"
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.isAudioMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "isAudioMuted",
            "string": "that.isAudioMuted()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.muteAudio"
            },
            {
                "type": "fires",
                "string": "respoke.RemoteMedia#mute"
            }
        ],
        "description": {
            "full": "<p>Mute remote audio stream.</p>\n",
            "summary": "<p>Mute remote audio stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.RemoteMedia#mute"
        ],
        "ignore": false,
        "code": "that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "muteAudio",
            "string": "that.muteAudio()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.RemoteMedia"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "type",
                "description": "- Either \"audio\" or \"video\" to specify the type of stream whose muted state\nhas been changed."
            },
            {
                "type": "property",
                "types": [
                    "boolean"
                ],
                "name": "muted",
                "description": "- Whether the stream is now muted. Will be set to false if mute was turned off."
            }
        ],
        "description": {
            "full": "<p>@event respoke.RemoteMedia#mute</p>\n",
            "summary": "<p>@event respoke.RemoteMedia#mute</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };",
        "ctx": {
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "memberof",
                "string": "respoke.RemoteMedia"
            },
            {
                "type": "method",
                "string": "respoke.RemoteMedia.unmuteAudio"
            },
            {
                "type": "fires",
                "string": "respoke.RemoteMedia#mute"
            }
        ],
        "description": {
            "full": "<p>Unmute remote audio stream.</p>\n",
            "summary": "<p>Unmute remote audio stream.</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [
            "respoke.RemoteMedia#mute"
        ],
        "ignore": false,
        "code": "that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });",
        "ctx": {
            "type": "method",
            "receiver": "that",
            "name": "unmuteAudio",
            "string": "that.unmuteAudio()",
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    },
    {
        "tags": [
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "name",
                "description": "- the event name."
            },
            {
                "type": "property",
                "types": [
                    "respoke.RemoteMedia"
                ],
                "name": "target",
                "description": ""
            },
            {
                "type": "property",
                "types": [
                    "string"
                ],
                "name": "type",
                "description": "- Either \"audio\" or \"video\" to specify the type of stream whose muted state\nhas been changed."
            },
            {
                "type": "property",
                "types": [
                    "boolean"
                ],
                "name": "muted",
                "description": "- Whether the stream is now muted. Will be set to false if mute was turned off."
            }
        ],
        "description": {
            "full": "<p>@event respoke.RemoteMedia#mute</p>\n",
            "summary": "<p>@event respoke.RemoteMedia#mute</p>\n",
            "body": ""
        },
        "isPrivate": false,
        "fires": [],
        "ignore": false,
        "code": "that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    return that;\n}; // End respoke.RemoteMedia",
        "ctx": {
            "file": {
                "input": "respoke/remoteMedia.js",
                "output": ".docs/site/respoke/remoteMedia.js.json"
            }
        }
    }
]